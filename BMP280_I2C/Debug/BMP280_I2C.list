
BMP280_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e94  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08008fa8  08008fa8  00009fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800942c  0800942c  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800942c  0800942c  0000a42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009434  08009434  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009434  08009434  0000a434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009438  08009438  0000a438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800943c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c8  200001d4  08009610  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  08009610  0000b59c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cff7  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002350  00000000  00000000  000181f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0001a548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009bf  00000000  00000000  0001b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000037b6  00000000  00000000  0001bb9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd0e  00000000  00000000  0001f355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089959  00000000  00000000  0002f063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b89bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000457c  00000000  00000000  000b8a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000bcf7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008f8c 	.word	0x08008f8c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008f8c 	.word	0x08008f8c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f48:	b097      	sub	sp, #92	@ 0x5c
 8000f4a:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4c:	f000 fda8 	bl	8001aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f50:	f000 f8fc 	bl	800114c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f54:	f000 fa5e 	bl	8001414 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f58:	f000 fa08 	bl	800136c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f5c:	f000 f950 	bl	8001200 <MX_I2C1_Init>
  MX_RTC_Init();
 8000f60:	f000 f9aa 	bl	80012b8 <MX_RTC_Init>
  MX_I2C2_Init();
 8000f64:	f000 f97a 	bl	800125c <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000f68:	f000 fa2a 	bl	80013c0 <MX_USART3_UART_Init>
//
//	  		HAL_Delay(1000);

	  /*Code for taking random values*/

	  HAL_Delay(100);
 8000f6c:	2064      	movs	r0, #100	@ 0x64
 8000f6e:	f000 fdf9 	bl	8001b64 <HAL_Delay>

	      /* Get RTC current time and date */
	      HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000f72:	2201      	movs	r2, #1
 8000f74:	4965      	ldr	r1, [pc, #404]	@ (800110c <main+0x1c8>)
 8000f76:	4866      	ldr	r0, [pc, #408]	@ (8001110 <main+0x1cc>)
 8000f78:	f003 fea2 	bl	8004cc0 <HAL_RTC_GetTime>
	      HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4965      	ldr	r1, [pc, #404]	@ (8001114 <main+0x1d0>)
 8000f80:	4863      	ldr	r0, [pc, #396]	@ (8001110 <main+0x1cc>)
 8000f82:	f004 f82b 	bl	8004fdc <HAL_RTC_GetDate>

	      /* Generate random sensor values */
	      float temperature = 20.0f + (rand() % 1500) / 100.0f; // 20.0 – 35.0 °C
 8000f86:	f005 f96b 	bl	8006260 <rand>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	4b62      	ldr	r3, [pc, #392]	@ (8001118 <main+0x1d4>)
 8000f8e:	fb83 1302 	smull	r1, r3, r3, r2
 8000f92:	1159      	asrs	r1, r3, #5
 8000f94:	17d3      	asrs	r3, r2, #31
 8000f96:	1acb      	subs	r3, r1, r3
 8000f98:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000f9c:	fb01 f303 	mul.w	r3, r1, r3
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fe2a 	bl	8000bfc <__aeabi_i2f>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	495c      	ldr	r1, [pc, #368]	@ (800111c <main+0x1d8>)
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff2d 	bl	8000e0c <__aeabi_fdiv>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	495a      	ldr	r1, [pc, #360]	@ (8001120 <main+0x1dc>)
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fd6c 	bl	8000a94 <__addsf3>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
	      float dissolvedO2 = 5.0f  + (rand() % 300) / 100.0f;  // 5.0 – 8.0 mg/L
 8000fc0:	f005 f94e 	bl	8006260 <rand>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	4b57      	ldr	r3, [pc, #348]	@ (8001124 <main+0x1e0>)
 8000fc8:	fb83 1302 	smull	r1, r3, r3, r2
 8000fcc:	1159      	asrs	r1, r3, #5
 8000fce:	17d3      	asrs	r3, r2, #31
 8000fd0:	1acb      	subs	r3, r1, r3
 8000fd2:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000fd6:	fb01 f303 	mul.w	r3, r1, r3
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fe0d 	bl	8000bfc <__aeabi_i2f>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	494d      	ldr	r1, [pc, #308]	@ (800111c <main+0x1d8>)
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff10 	bl	8000e0c <__aeabi_fdiv>
 8000fec:	4603      	mov	r3, r0
 8000fee:	494e      	ldr	r1, [pc, #312]	@ (8001128 <main+0x1e4>)
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fd4f 	bl	8000a94 <__addsf3>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	623b      	str	r3, [r7, #32]
	      float salinity    = 30.0f + (rand() % 1000) / 100.0f; // 30.0 – 40.0 PSU
 8000ffa:	f005 f931 	bl	8006260 <rand>
 8000ffe:	4602      	mov	r2, r0
 8001000:	4b4a      	ldr	r3, [pc, #296]	@ (800112c <main+0x1e8>)
 8001002:	fb83 1302 	smull	r1, r3, r3, r2
 8001006:	1199      	asrs	r1, r3, #6
 8001008:	17d3      	asrs	r3, r2, #31
 800100a:	1acb      	subs	r3, r1, r3
 800100c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001010:	fb01 f303 	mul.w	r3, r1, r3
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fdf0 	bl	8000bfc <__aeabi_i2f>
 800101c:	4603      	mov	r3, r0
 800101e:	493f      	ldr	r1, [pc, #252]	@ (800111c <main+0x1d8>)
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fef3 	bl	8000e0c <__aeabi_fdiv>
 8001026:	4603      	mov	r3, r0
 8001028:	4941      	ldr	r1, [pc, #260]	@ (8001130 <main+0x1ec>)
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fd32 	bl	8000a94 <__addsf3>
 8001030:	4603      	mov	r3, r0
 8001032:	61fb      	str	r3, [r7, #28]
	      float pH          = 6.5f  + (rand() % 200) / 100.0f;  // 6.5 – 8.5
 8001034:	f005 f914 	bl	8006260 <rand>
 8001038:	4602      	mov	r2, r0
 800103a:	4b3e      	ldr	r3, [pc, #248]	@ (8001134 <main+0x1f0>)
 800103c:	fb83 1302 	smull	r1, r3, r3, r2
 8001040:	1199      	asrs	r1, r3, #6
 8001042:	17d3      	asrs	r3, r2, #31
 8001044:	1acb      	subs	r3, r1, r3
 8001046:	21c8      	movs	r1, #200	@ 0xc8
 8001048:	fb01 f303 	mul.w	r3, r1, r3
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fdd4 	bl	8000bfc <__aeabi_i2f>
 8001054:	4603      	mov	r3, r0
 8001056:	4931      	ldr	r1, [pc, #196]	@ (800111c <main+0x1d8>)
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fed7 	bl	8000e0c <__aeabi_fdiv>
 800105e:	4603      	mov	r3, r0
 8001060:	4935      	ldr	r1, [pc, #212]	@ (8001138 <main+0x1f4>)
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fd16 	bl	8000a94 <__addsf3>
 8001068:	4603      	mov	r3, r0
 800106a:	61bb      	str	r3, [r7, #24]
	         "{ \"Timestamp\": \"%04d-%02d-%02dT%02d:%02d:%02dZ\", "
	         "\"Temperature\": %.2f, "
	         "\"Dissolved O2\": %.2f, "
	         "\"Salinity\": %.2f, "
	         "\"pH\": %.2f }\n",
	         2000 + DateToUpdate.Year, DateToUpdate.Month, DateToUpdate.Date,
 800106c:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <main+0x1d0>)
 800106e:	78db      	ldrb	r3, [r3, #3]
	      size = sprintf((char *)Data,
 8001070:	f503 66fa 	add.w	r6, r3, #2000	@ 0x7d0
	         2000 + DateToUpdate.Year, DateToUpdate.Month, DateToUpdate.Date,
 8001074:	4b27      	ldr	r3, [pc, #156]	@ (8001114 <main+0x1d0>)
 8001076:	785b      	ldrb	r3, [r3, #1]
	      size = sprintf((char *)Data,
 8001078:	617b      	str	r3, [r7, #20]
	         2000 + DateToUpdate.Year, DateToUpdate.Month, DateToUpdate.Date,
 800107a:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <main+0x1d0>)
 800107c:	789b      	ldrb	r3, [r3, #2]
	      size = sprintf((char *)Data,
 800107e:	613b      	str	r3, [r7, #16]
	         sTime.Hours, sTime.Minutes, sTime.Seconds,
 8001080:	4b22      	ldr	r3, [pc, #136]	@ (800110c <main+0x1c8>)
 8001082:	781b      	ldrb	r3, [r3, #0]
	      size = sprintf((char *)Data,
 8001084:	60fb      	str	r3, [r7, #12]
	         sTime.Hours, sTime.Minutes, sTime.Seconds,
 8001086:	4b21      	ldr	r3, [pc, #132]	@ (800110c <main+0x1c8>)
 8001088:	785b      	ldrb	r3, [r3, #1]
	      size = sprintf((char *)Data,
 800108a:	60bb      	str	r3, [r7, #8]
	         sTime.Hours, sTime.Minutes, sTime.Seconds,
 800108c:	4b1f      	ldr	r3, [pc, #124]	@ (800110c <main+0x1c8>)
 800108e:	789b      	ldrb	r3, [r3, #2]
	      size = sprintf((char *)Data,
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001094:	f7ff f9c8 	bl	8000428 <__aeabi_f2d>
 8001098:	4680      	mov	r8, r0
 800109a:	4689      	mov	r9, r1
 800109c:	6a38      	ldr	r0, [r7, #32]
 800109e:	f7ff f9c3 	bl	8000428 <__aeabi_f2d>
 80010a2:	4682      	mov	sl, r0
 80010a4:	468b      	mov	fp, r1
 80010a6:	69f8      	ldr	r0, [r7, #28]
 80010a8:	f7ff f9be 	bl	8000428 <__aeabi_f2d>
 80010ac:	4604      	mov	r4, r0
 80010ae:	460d      	mov	r5, r1
 80010b0:	69b8      	ldr	r0, [r7, #24]
 80010b2:	f7ff f9b9 	bl	8000428 <__aeabi_f2d>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80010be:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80010c2:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80010c6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	9203      	str	r2, [sp, #12]
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	9202      	str	r2, [sp, #8]
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	9201      	str	r2, [sp, #4]
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	9200      	str	r2, [sp, #0]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	4632      	mov	r2, r6
 80010de:	4917      	ldr	r1, [pc, #92]	@ (800113c <main+0x1f8>)
 80010e0:	4817      	ldr	r0, [pc, #92]	@ (8001140 <main+0x1fc>)
 80010e2:	f005 fe17 	bl	8006d14 <siprintf>
 80010e6:	4603      	mov	r3, r0
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	4b16      	ldr	r3, [pc, #88]	@ (8001144 <main+0x200>)
 80010ec:	801a      	strh	r2, [r3, #0]
	         temperature, dissolvedO2, salinity, pH);

	      HAL_UART_Transmit(&huart3, Data, size, 1000);
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <main+0x200>)
 80010f0:	881a      	ldrh	r2, [r3, #0]
 80010f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f6:	4912      	ldr	r1, [pc, #72]	@ (8001140 <main+0x1fc>)
 80010f8:	4813      	ldr	r0, [pc, #76]	@ (8001148 <main+0x204>)
 80010fa:	f004 faeb 	bl	80056d4 <HAL_UART_Transmit>

	      HAL_Delay(1000);
 80010fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001102:	f000 fd2f 	bl	8001b64 <HAL_Delay>
  {
 8001106:	bf00      	nop
 8001108:	e730      	b.n	8000f6c <main+0x28>
 800110a:	bf00      	nop
 800110c:	20000440 	.word	0x20000440
 8001110:	20000298 	.word	0x20000298
 8001114:	20000444 	.word	0x20000444
 8001118:	057619f1 	.word	0x057619f1
 800111c:	42c80000 	.word	0x42c80000
 8001120:	41a00000 	.word	0x41a00000
 8001124:	1b4e81b5 	.word	0x1b4e81b5
 8001128:	40a00000 	.word	0x40a00000
 800112c:	10624dd3 	.word	0x10624dd3
 8001130:	41f00000 	.word	0x41f00000
 8001134:	51eb851f 	.word	0x51eb851f
 8001138:	40d00000 	.word	0x40d00000
 800113c:	08008fa8 	.word	0x08008fa8
 8001140:	20000340 	.word	0x20000340
 8001144:	2000033c 	.word	0x2000033c
 8001148:	200002f4 	.word	0x200002f4

0800114c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b094      	sub	sp, #80	@ 0x50
 8001150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001152:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001156:	2228      	movs	r2, #40	@ 0x28
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f005 fe3f 	bl	8006dde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800117c:	2306      	movs	r3, #6
 800117e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001180:	2301      	movs	r3, #1
 8001182:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001184:	2301      	movs	r3, #1
 8001186:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001188:	2310      	movs	r3, #16
 800118a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118c:	2302      	movs	r3, #2
 800118e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001190:	2300      	movs	r3, #0
 8001192:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001194:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001198:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 feee 	bl	8003f80 <HAL_RCC_OscConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x62>
  {
    Error_Handler();
 80011aa:	f000 f9bb 	bl	8001524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ae:	230f      	movs	r3, #15
 80011b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2102      	movs	r1, #2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 f95a 	bl	8004484 <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011d6:	f000 f9a5 	bl	8001524 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011da:	2301      	movs	r3, #1
 80011dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80011de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011e2:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 fada 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80011f2:	f000 f997 	bl	8001524 <Error_Handler>
  }
}
 80011f6:	bf00      	nop
 80011f8:	3750      	adds	r7, #80	@ 0x50
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <MX_I2C1_Init+0x50>)
 8001206:	4a13      	ldr	r2, [pc, #76]	@ (8001254 <MX_I2C1_Init+0x54>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800120a:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <MX_I2C1_Init+0x50>)
 800120c:	4a12      	ldr	r2, [pc, #72]	@ (8001258 <MX_I2C1_Init+0x58>)
 800120e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001210:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <MX_I2C1_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001216:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <MX_I2C1_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121c:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <MX_I2C1_Init+0x50>)
 800121e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001222:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001224:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <MX_I2C1_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <MX_I2C1_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001230:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <MX_I2C1_Init+0x50>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <MX_I2C1_Init+0x50>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	@ (8001250 <MX_I2C1_Init+0x50>)
 800123e:	f001 f841 	bl	80022c4 <HAL_I2C_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001248:	f000 f96c 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200001f0 	.word	0x200001f0
 8001254:	40005400 	.word	0x40005400
 8001258:	000186a0 	.word	0x000186a0

0800125c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <MX_I2C2_Init+0x50>)
 8001262:	4a13      	ldr	r2, [pc, #76]	@ (80012b0 <MX_I2C2_Init+0x54>)
 8001264:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <MX_I2C2_Init+0x50>)
 8001268:	4a12      	ldr	r2, [pc, #72]	@ (80012b4 <MX_I2C2_Init+0x58>)
 800126a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <MX_I2C2_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <MX_I2C2_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <MX_I2C2_Init+0x50>)
 800127a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800127e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001280:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <MX_I2C2_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <MX_I2C2_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128c:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <MX_I2C2_Init+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <MX_I2C2_Init+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001298:	4804      	ldr	r0, [pc, #16]	@ (80012ac <MX_I2C2_Init+0x50>)
 800129a:	f001 f813 	bl	80022c4 <HAL_I2C_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012a4:	f000 f93e 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000244 	.word	0x20000244
 80012b0:	40005800 	.word	0x40005800
 80012b4:	000186a0 	.word	0x000186a0

080012b8 <MX_RTC_Init>:
  * @param None
  * @retval None
  */
#define RTC_BKP_DEFINE_CODE 0x32F2
static void MX_RTC_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
//
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2100      	movs	r1, #0
 80012c2:	460a      	mov	r2, r1
 80012c4:	801a      	strh	r2, [r3, #0]
 80012c6:	460a      	mov	r2, r1
 80012c8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
//
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012ce:	4b25      	ldr	r3, [pc, #148]	@ (8001364 <MX_RTC_Init+0xac>)
 80012d0:	4a25      	ldr	r2, [pc, #148]	@ (8001368 <MX_RTC_Init+0xb0>)
 80012d2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80012d4:	4b23      	ldr	r3, [pc, #140]	@ (8001364 <MX_RTC_Init+0xac>)
 80012d6:	f04f 32ff 	mov.w	r2, #4294967295
 80012da:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80012dc:	4b21      	ldr	r3, [pc, #132]	@ (8001364 <MX_RTC_Init+0xac>)
 80012de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012e2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012e4:	481f      	ldr	r0, [pc, #124]	@ (8001364 <MX_RTC_Init+0xac>)
 80012e6:	f003 fbc7 	bl	8004a78 <HAL_RTC_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80012f0:	f000 f918 	bl	8001524 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
//
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != RTC_BKP_DEFINE_CODE)
 80012f4:	2101      	movs	r1, #1
 80012f6:	481b      	ldr	r0, [pc, #108]	@ (8001364 <MX_RTC_Init+0xac>)
 80012f8:	f004 f980 	bl	80055fc <HAL_RTCEx_BKUPRead>
 80012fc:	4603      	mov	r3, r0
 80012fe:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8001302:	4293      	cmp	r3, r2
 8001304:	d029      	beq.n	800135a <MX_RTC_Init+0xa2>
      {
        // RTC not initialized before: Set default time and date
  	  sTime.Hours = 0x03;
 8001306:	2303      	movs	r3, #3
 8001308:	713b      	strb	r3, [r7, #4]
  	    sTime.Minutes = 0x0;
 800130a:	2300      	movs	r3, #0
 800130c:	717b      	strb	r3, [r7, #5]
  	    sTime.Seconds = 0x0;
 800130e:	2300      	movs	r3, #0
 8001310:	71bb      	strb	r3, [r7, #6]

  	    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2201      	movs	r2, #1
 8001316:	4619      	mov	r1, r3
 8001318:	4812      	ldr	r0, [pc, #72]	@ (8001364 <MX_RTC_Init+0xac>)
 800131a:	f003 fc39 	bl	8004b90 <HAL_RTC_SetTime>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_RTC_Init+0x70>
  	    {
  	      Error_Handler();
 8001324:	f000 f8fe 	bl	8001524 <Error_Handler>
  	    }
  	  DateToUpdate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8001328:	2304      	movs	r3, #4
 800132a:	703b      	strb	r3, [r7, #0]
  	    DateToUpdate.Month = RTC_MONTH_JULY;
 800132c:	2307      	movs	r3, #7
 800132e:	707b      	strb	r3, [r7, #1]
  	    DateToUpdate.Date = 0x31;
 8001330:	2331      	movs	r3, #49	@ 0x31
 8001332:	70bb      	strb	r3, [r7, #2]
  	    DateToUpdate.Year = 0x0;
 8001334:	2300      	movs	r3, #0
 8001336:	70fb      	strb	r3, [r7, #3]

  	    if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001338:	463b      	mov	r3, r7
 800133a:	2201      	movs	r2, #1
 800133c:	4619      	mov	r1, r3
 800133e:	4809      	ldr	r0, [pc, #36]	@ (8001364 <MX_RTC_Init+0xac>)
 8001340:	f003 fd96 	bl	8004e70 <HAL_RTC_SetDate>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_RTC_Init+0x96>
  	    {
  	      Error_Handler();
 800134a:	f000 f8eb 	bl	8001524 <Error_Handler>
  	    }



        // Write magic code to backup register
        HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_BKP_DEFINE_CODE);
 800134e:	f243 22f2 	movw	r2, #13042	@ 0x32f2
 8001352:	2101      	movs	r1, #1
 8001354:	4803      	ldr	r0, [pc, #12]	@ (8001364 <MX_RTC_Init+0xac>)
 8001356:	f004 f937 	bl	80055c8 <HAL_RTCEx_BKUPWrite>
//  }
  /* USER CODE BEGIN RTC_Init 2 */
//
  /* USER CODE END RTC_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000298 	.word	0x20000298
 8001368:	40002800 	.word	0x40002800

0800136c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001370:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <MX_USART2_UART_Init+0x4c>)
 8001372:	4a12      	ldr	r2, [pc, #72]	@ (80013bc <MX_USART2_UART_Init+0x50>)
 8001374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001376:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <MX_USART2_UART_Init+0x4c>)
 8001378:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800137c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <MX_USART2_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <MX_USART2_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800138a:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <MX_USART2_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <MX_USART2_UART_Init+0x4c>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <MX_USART2_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <MX_USART2_UART_Init+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <MX_USART2_UART_Init+0x4c>)
 80013a4:	f004 f946 	bl	8005634 <HAL_UART_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ae:	f000 f8b9 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200002ac 	.word	0x200002ac
 80013bc:	40004400 	.word	0x40004400

080013c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <MX_USART3_UART_Init+0x4c>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <MX_USART3_UART_Init+0x50>)
 80013c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <MX_USART3_UART_Init+0x4c>)
 80013cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <MX_USART3_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <MX_USART3_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <MX_USART3_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <MX_USART3_UART_Init+0x4c>)
 80013e6:	220c      	movs	r2, #12
 80013e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <MX_USART3_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <MX_USART3_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_USART3_UART_Init+0x4c>)
 80013f8:	f004 f91c 	bl	8005634 <HAL_UART_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001402:	f000 f88f 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200002f4 	.word	0x200002f4
 8001410:	40004800 	.word	0x40004800

08001414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001428:	4b3a      	ldr	r3, [pc, #232]	@ (8001514 <MX_GPIO_Init+0x100>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a39      	ldr	r2, [pc, #228]	@ (8001514 <MX_GPIO_Init+0x100>)
 800142e:	f043 0310 	orr.w	r3, r3, #16
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b37      	ldr	r3, [pc, #220]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0310 	and.w	r3, r3, #16
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001440:	4b34      	ldr	r3, [pc, #208]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a33      	ldr	r2, [pc, #204]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001446:	f043 0320 	orr.w	r3, r3, #32
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b31      	ldr	r3, [pc, #196]	@ (8001514 <MX_GPIO_Init+0x100>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0320 	and.w	r3, r3, #32
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	4b2e      	ldr	r3, [pc, #184]	@ (8001514 <MX_GPIO_Init+0x100>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a2d      	ldr	r2, [pc, #180]	@ (8001514 <MX_GPIO_Init+0x100>)
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b2b      	ldr	r3, [pc, #172]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001470:	4b28      	ldr	r3, [pc, #160]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a27      	ldr	r2, [pc, #156]	@ (8001514 <MX_GPIO_Init+0x100>)
 8001476:	f043 0308 	orr.w	r3, r3, #8
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b25      	ldr	r3, [pc, #148]	@ (8001514 <MX_GPIO_Init+0x100>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	2120      	movs	r1, #32
 800148c:	4822      	ldr	r0, [pc, #136]	@ (8001518 <MX_GPIO_Init+0x104>)
 800148e:	f000 fedf 	bl	8002250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001492:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001498:	4b20      	ldr	r3, [pc, #128]	@ (800151c <MX_GPIO_Init+0x108>)
 800149a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	4619      	mov	r1, r3
 80014a6:	481e      	ldr	r0, [pc, #120]	@ (8001520 <MX_GPIO_Init+0x10c>)
 80014a8:	f000 fd4e 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014ac:	2320      	movs	r3, #32
 80014ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	4619      	mov	r1, r3
 80014c2:	4815      	ldr	r0, [pc, #84]	@ (8001518 <MX_GPIO_Init+0x104>)
 80014c4:	f000 fd40 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	4619      	mov	r1, r3
 80014dc:	480e      	ldr	r0, [pc, #56]	@ (8001518 <MX_GPIO_Init+0x104>)
 80014de:	f000 fd33 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	4619      	mov	r1, r3
 80014f6:	4808      	ldr	r0, [pc, #32]	@ (8001518 <MX_GPIO_Init+0x104>)
 80014f8:	f000 fd26 	bl	8001f48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2100      	movs	r1, #0
 8001500:	2028      	movs	r0, #40	@ 0x28
 8001502:	f000 fc2a 	bl	8001d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001506:	2028      	movs	r0, #40	@ 0x28
 8001508:	f000 fc43 	bl	8001d92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800150c:	bf00      	nop
 800150e:	3720      	adds	r7, #32
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40021000 	.word	0x40021000
 8001518:	40010800 	.word	0x40010800
 800151c:	10110000 	.word	0x10110000
 8001520:	40011000 	.word	0x40011000

08001524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001528:	b672      	cpsid	i
}
 800152a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <Error_Handler+0x8>

08001530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <HAL_MspInit+0x5c>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	4a14      	ldr	r2, [pc, #80]	@ (800158c <HAL_MspInit+0x5c>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6193      	str	r3, [r2, #24]
 8001542:	4b12      	ldr	r3, [pc, #72]	@ (800158c <HAL_MspInit+0x5c>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <HAL_MspInit+0x5c>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	4a0e      	ldr	r2, [pc, #56]	@ (800158c <HAL_MspInit+0x5c>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001558:	61d3      	str	r3, [r2, #28]
 800155a:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <HAL_MspInit+0x5c>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001566:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <HAL_MspInit+0x60>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <HAL_MspInit+0x60>)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	40021000 	.word	0x40021000
 8001590:	40010000 	.word	0x40010000

08001594 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	@ 0x30
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001698 <HAL_I2C_MspInit+0x104>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d143      	bne.n	800163c <HAL_I2C_MspInit+0xa8>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b4:	4b39      	ldr	r3, [pc, #228]	@ (800169c <HAL_I2C_MspInit+0x108>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a38      	ldr	r2, [pc, #224]	@ (800169c <HAL_I2C_MspInit+0x108>)
 80015ba:	f043 0308 	orr.w	r3, r3, #8
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b36      	ldr	r3, [pc, #216]	@ (800169c <HAL_I2C_MspInit+0x108>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015cc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d2:	2312      	movs	r3, #18
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	482f      	ldr	r0, [pc, #188]	@ (80016a0 <HAL_I2C_MspInit+0x10c>)
 80015e2:	f000 fcb1 	bl	8001f48 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80015e6:	4b2f      	ldr	r3, [pc, #188]	@ (80016a4 <HAL_I2C_MspInit+0x110>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ee:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80015f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015f6:	f043 0302 	orr.w	r3, r3, #2
 80015fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015fc:	4a29      	ldr	r2, [pc, #164]	@ (80016a4 <HAL_I2C_MspInit+0x110>)
 80015fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001600:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001602:	4b26      	ldr	r3, [pc, #152]	@ (800169c <HAL_I2C_MspInit+0x108>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	4a25      	ldr	r2, [pc, #148]	@ (800169c <HAL_I2C_MspInit+0x108>)
 8001608:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800160c:	61d3      	str	r3, [r2, #28]
 800160e:	4b23      	ldr	r3, [pc, #140]	@ (800169c <HAL_I2C_MspInit+0x108>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	201f      	movs	r0, #31
 8001620:	f000 fb9b 	bl	8001d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001624:	201f      	movs	r0, #31
 8001626:	f000 fbb4 	bl	8001d92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	2020      	movs	r0, #32
 8001630:	f000 fb93 	bl	8001d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001634:	2020      	movs	r0, #32
 8001636:	f000 fbac 	bl	8001d92 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 800163a:	e029      	b.n	8001690 <HAL_I2C_MspInit+0xfc>
  else if(hi2c->Instance==I2C2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a19      	ldr	r2, [pc, #100]	@ (80016a8 <HAL_I2C_MspInit+0x114>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d124      	bne.n	8001690 <HAL_I2C_MspInit+0xfc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	4b15      	ldr	r3, [pc, #84]	@ (800169c <HAL_I2C_MspInit+0x108>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	4a14      	ldr	r2, [pc, #80]	@ (800169c <HAL_I2C_MspInit+0x108>)
 800164c:	f043 0308 	orr.w	r3, r3, #8
 8001650:	6193      	str	r3, [r2, #24]
 8001652:	4b12      	ldr	r3, [pc, #72]	@ (800169c <HAL_I2C_MspInit+0x108>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800165e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001664:	2312      	movs	r3, #18
 8001666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	4619      	mov	r1, r3
 8001672:	480b      	ldr	r0, [pc, #44]	@ (80016a0 <HAL_I2C_MspInit+0x10c>)
 8001674:	f000 fc68 	bl	8001f48 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001678:	4b08      	ldr	r3, [pc, #32]	@ (800169c <HAL_I2C_MspInit+0x108>)
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	4a07      	ldr	r2, [pc, #28]	@ (800169c <HAL_I2C_MspInit+0x108>)
 800167e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001682:	61d3      	str	r3, [r2, #28]
 8001684:	4b05      	ldr	r3, [pc, #20]	@ (800169c <HAL_I2C_MspInit+0x108>)
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
}
 8001690:	bf00      	nop
 8001692:	3730      	adds	r7, #48	@ 0x30
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40005400 	.word	0x40005400
 800169c:	40021000 	.word	0x40021000
 80016a0:	40010c00 	.word	0x40010c00
 80016a4:	40010000 	.word	0x40010000
 80016a8:	40005800 	.word	0x40005800

080016ac <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0b      	ldr	r2, [pc, #44]	@ (80016e8 <HAL_RTC_MspInit+0x3c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d110      	bne.n	80016e0 <HAL_RTC_MspInit+0x34>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80016be:	f002 fc53 	bl	8003f68 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80016c2:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <HAL_RTC_MspInit+0x40>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a09      	ldr	r2, [pc, #36]	@ (80016ec <HAL_RTC_MspInit+0x40>)
 80016c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <HAL_RTC_MspInit+0x40>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016da:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <HAL_RTC_MspInit+0x44>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40002800 	.word	0x40002800
 80016ec:	40021000 	.word	0x40021000
 80016f0:	4242043c 	.word	0x4242043c

080016f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08c      	sub	sp, #48	@ 0x30
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a3e      	ldr	r2, [pc, #248]	@ (8001808 <HAL_UART_MspInit+0x114>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d124      	bne.n	800175e <HAL_UART_MspInit+0x6a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001714:	4b3d      	ldr	r3, [pc, #244]	@ (800180c <HAL_UART_MspInit+0x118>)
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	4a3c      	ldr	r2, [pc, #240]	@ (800180c <HAL_UART_MspInit+0x118>)
 800171a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800171e:	61d3      	str	r3, [r2, #28]
 8001720:	4b3a      	ldr	r3, [pc, #232]	@ (800180c <HAL_UART_MspInit+0x118>)
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001728:	61bb      	str	r3, [r7, #24]
 800172a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4b37      	ldr	r3, [pc, #220]	@ (800180c <HAL_UART_MspInit+0x118>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a36      	ldr	r2, [pc, #216]	@ (800180c <HAL_UART_MspInit+0x118>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b34      	ldr	r3, [pc, #208]	@ (800180c <HAL_UART_MspInit+0x118>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001744:	230c      	movs	r3, #12
 8001746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2302      	movs	r3, #2
 800174e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	4619      	mov	r1, r3
 8001756:	482e      	ldr	r0, [pc, #184]	@ (8001810 <HAL_UART_MspInit+0x11c>)
 8001758:	f000 fbf6 	bl	8001f48 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800175c:	e050      	b.n	8001800 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART3)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a2c      	ldr	r2, [pc, #176]	@ (8001814 <HAL_UART_MspInit+0x120>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d14b      	bne.n	8001800 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001768:	4b28      	ldr	r3, [pc, #160]	@ (800180c <HAL_UART_MspInit+0x118>)
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	4a27      	ldr	r2, [pc, #156]	@ (800180c <HAL_UART_MspInit+0x118>)
 800176e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001772:	61d3      	str	r3, [r2, #28]
 8001774:	4b25      	ldr	r3, [pc, #148]	@ (800180c <HAL_UART_MspInit+0x118>)
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001780:	4b22      	ldr	r3, [pc, #136]	@ (800180c <HAL_UART_MspInit+0x118>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a21      	ldr	r2, [pc, #132]	@ (800180c <HAL_UART_MspInit+0x118>)
 8001786:	f043 0310 	orr.w	r3, r3, #16
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b1f      	ldr	r3, [pc, #124]	@ (800180c <HAL_UART_MspInit+0x118>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001798:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	4619      	mov	r1, r3
 80017ac:	481a      	ldr	r0, [pc, #104]	@ (8001818 <HAL_UART_MspInit+0x124>)
 80017ae:	f000 fbcb 	bl	8001f48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4619      	mov	r1, r3
 80017c6:	4814      	ldr	r0, [pc, #80]	@ (8001818 <HAL_UART_MspInit+0x124>)
 80017c8:	f000 fbbe 	bl	8001f48 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80017cc:	4b13      	ldr	r3, [pc, #76]	@ (800181c <HAL_UART_MspInit+0x128>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80017d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017dc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80017e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e4:	f043 0310 	orr.w	r3, r3, #16
 80017e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017ea:	4a0c      	ldr	r2, [pc, #48]	@ (800181c <HAL_UART_MspInit+0x128>)
 80017ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ee:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2100      	movs	r1, #0
 80017f4:	2027      	movs	r0, #39	@ 0x27
 80017f6:	f000 fab0 	bl	8001d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017fa:	2027      	movs	r0, #39	@ 0x27
 80017fc:	f000 fac9 	bl	8001d92 <HAL_NVIC_EnableIRQ>
}
 8001800:	bf00      	nop
 8001802:	3730      	adds	r7, #48	@ 0x30
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40004400 	.word	0x40004400
 800180c:	40021000 	.word	0x40021000
 8001810:	40010800 	.word	0x40010800
 8001814:	40004800 	.word	0x40004800
 8001818:	40011000 	.word	0x40011000
 800181c:	40010000 	.word	0x40010000

08001820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <NMI_Handler+0x4>

08001828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <HardFault_Handler+0x4>

08001830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <MemManage_Handler+0x4>

08001838 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <BusFault_Handler+0x4>

08001840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <UsageFault_Handler+0x4>

08001848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001870:	f000 f95c 	bl	8001b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <I2C1_EV_IRQHandler+0x10>)
 800187e:	f000 fe79 	bl	8002574 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200001f0 	.word	0x200001f0

0800188c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <I2C1_ER_IRQHandler+0x10>)
 8001892:	f000 ffe0 	bl	8002856 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200001f0 	.word	0x200001f0

080018a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018a4:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <USART3_IRQHandler+0x10>)
 80018a6:	f003 ffa1 	bl	80057ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200002f4 	.word	0x200002f4

080018b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80018b8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80018bc:	f000 fce0 	bl	8002280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return 1;
 80018c8:	2301      	movs	r3, #1
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <_kill>:

int _kill(int pid, int sig)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018dc:	f005 fad2 	bl	8006e84 <__errno>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2216      	movs	r2, #22
 80018e4:	601a      	str	r2, [r3, #0]
  return -1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <_exit>:

void _exit (int status)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018fa:	f04f 31ff 	mov.w	r1, #4294967295
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffe7 	bl	80018d2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <_exit+0x12>

08001908 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	e00a      	b.n	8001930 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800191a:	f3af 8000 	nop.w
 800191e:	4601      	mov	r1, r0
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	60ba      	str	r2, [r7, #8]
 8001926:	b2ca      	uxtb	r2, r1
 8001928:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	429a      	cmp	r2, r3
 8001936:	dbf0      	blt.n	800191a <_read+0x12>
  }

  return len;
 8001938:	687b      	ldr	r3, [r7, #4]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	e009      	b.n	8001968 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	60ba      	str	r2, [r7, #8]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	429a      	cmp	r2, r3
 800196e:	dbf1      	blt.n	8001954 <_write+0x12>
  }
  return len;
 8001970:	687b      	ldr	r3, [r7, #4]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <_close>:

int _close(int file)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019a0:	605a      	str	r2, [r3, #4]
  return 0;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <_isatty>:

int _isatty(int file)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b085      	sub	sp, #20
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
	...

080019dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019e4:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <_sbrk+0x5c>)
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <_sbrk+0x60>)
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019f8:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <_sbrk+0x64>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	@ (8001a44 <_sbrk+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019fe:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d207      	bcs.n	8001a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a0c:	f005 fa3a 	bl	8006e84 <__errno>
 8001a10:	4603      	mov	r3, r0
 8001a12:	220c      	movs	r2, #12
 8001a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	e009      	b.n	8001a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a22:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	4a05      	ldr	r2, [pc, #20]	@ (8001a40 <_sbrk+0x64>)
 8001a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20005000 	.word	0x20005000
 8001a3c:	00000400 	.word	0x00000400
 8001a40:	20000448 	.word	0x20000448
 8001a44:	200005a0 	.word	0x200005a0

08001a48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a54:	f7ff fff8 	bl	8001a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a58:	480b      	ldr	r0, [pc, #44]	@ (8001a88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a5a:	490c      	ldr	r1, [pc, #48]	@ (8001a8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a60:	e002      	b.n	8001a68 <LoopCopyDataInit>

08001a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a66:	3304      	adds	r3, #4

08001a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a6c:	d3f9      	bcc.n	8001a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6e:	4a09      	ldr	r2, [pc, #36]	@ (8001a94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a70:	4c09      	ldr	r4, [pc, #36]	@ (8001a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a74:	e001      	b.n	8001a7a <LoopFillZerobss>

08001a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a78:	3204      	adds	r2, #4

08001a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a7c:	d3fb      	bcc.n	8001a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a7e:	f005 fa07 	bl	8006e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a82:	f7ff fa5f 	bl	8000f44 <main>
  bx lr
 8001a86:	4770      	bx	lr
  ldr r0, =_sdata
 8001a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a8c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a90:	0800943c 	.word	0x0800943c
  ldr r2, =_sbss
 8001a94:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a98:	2000059c 	.word	0x2000059c

08001a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a9c:	e7fe      	b.n	8001a9c <ADC1_2_IRQHandler>
	...

08001aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa4:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <HAL_Init+0x28>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a07      	ldr	r2, [pc, #28]	@ (8001ac8 <HAL_Init+0x28>)
 8001aaa:	f043 0310 	orr.w	r3, r3, #16
 8001aae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	f000 f947 	bl	8001d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f000 f808 	bl	8001acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001abc:	f7ff fd38 	bl	8001530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40022000 	.word	0x40022000

08001acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad4:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <HAL_InitTick+0x54>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <HAL_InitTick+0x58>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 f95f 	bl	8001dae <HAL_SYSTICK_Config>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00e      	b.n	8001b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	d80a      	bhi.n	8001b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f000 f927 	bl	8001d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b0c:	4a06      	ldr	r2, [pc, #24]	@ (8001b28 <HAL_InitTick+0x5c>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e000      	b.n	8001b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000008 	.word	0x20000008
 8001b28:	20000004 	.word	0x20000004

08001b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b30:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <HAL_IncTick+0x1c>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <HAL_IncTick+0x20>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a03      	ldr	r2, [pc, #12]	@ (8001b4c <HAL_IncTick+0x20>)
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	2000044c 	.word	0x2000044c

08001b50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return uwTick;
 8001b54:	4b02      	ldr	r3, [pc, #8]	@ (8001b60 <HAL_GetTick+0x10>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	2000044c 	.word	0x2000044c

08001b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b6c:	f7ff fff0 	bl	8001b50 <HAL_GetTick>
 8001b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7c:	d005      	beq.n	8001b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <HAL_Delay+0x44>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b8a:	bf00      	nop
 8001b8c:	f7ff ffe0 	bl	8001b50 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d8f7      	bhi.n	8001b8c <HAL_Delay+0x28>
  {
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20000008 	.word	0x20000008

08001bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bde:	4a04      	ldr	r2, [pc, #16]	@ (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	60d3      	str	r3, [r2, #12]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	@ (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db0b      	blt.n	8001c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4906      	ldr	r1, [pc, #24]	@ (8001c44 <__NVIC_EnableIRQ+0x34>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2001      	movs	r0, #1
 8001c32:	fa00 f202 	lsl.w	r2, r0, r2
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db0a      	blt.n	8001c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	@ (8001c94 <__NVIC_SetPriority+0x4c>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c70:	e00a      	b.n	8001c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4908      	ldr	r1, [pc, #32]	@ (8001c98 <__NVIC_SetPriority+0x50>)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	761a      	strb	r2, [r3, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	@ 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
         );
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	@ 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d10:	d301      	bcc.n	8001d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00f      	b.n	8001d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d16:	4a0a      	ldr	r2, [pc, #40]	@ (8001d40 <SysTick_Config+0x40>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1e:	210f      	movs	r1, #15
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f7ff ff90 	bl	8001c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d28:	4b05      	ldr	r3, [pc, #20]	@ (8001d40 <SysTick_Config+0x40>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2e:	4b04      	ldr	r3, [pc, #16]	@ (8001d40 <SysTick_Config+0x40>)
 8001d30:	2207      	movs	r2, #7
 8001d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	e000e010 	.word	0xe000e010

08001d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ff2d 	bl	8001bac <__NVIC_SetPriorityGrouping>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6c:	f7ff ff42 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	f7ff ff90 	bl	8001c9c <NVIC_EncodePriority>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff5f 	bl	8001c48 <__NVIC_SetPriority>
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff35 	bl	8001c10 <__NVIC_EnableIRQ>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffa2 	bl	8001d00 <SysTick_Config>
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b085      	sub	sp, #20
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d008      	beq.n	8001df0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2204      	movs	r2, #4
 8001de2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e020      	b.n	8001e32 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 020e 	bic.w	r2, r2, #14
 8001dfe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0201 	bic.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e18:	2101      	movs	r1, #1
 8001e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d005      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2204      	movs	r2, #4
 8001e58:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	e051      	b.n	8001f04 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 020e 	bic.w	r2, r2, #14
 8001e6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0201 	bic.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a22      	ldr	r2, [pc, #136]	@ (8001f10 <HAL_DMA_Abort_IT+0xd4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d029      	beq.n	8001ede <HAL_DMA_Abort_IT+0xa2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a21      	ldr	r2, [pc, #132]	@ (8001f14 <HAL_DMA_Abort_IT+0xd8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d022      	beq.n	8001eda <HAL_DMA_Abort_IT+0x9e>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1f      	ldr	r2, [pc, #124]	@ (8001f18 <HAL_DMA_Abort_IT+0xdc>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d01a      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x98>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f1c <HAL_DMA_Abort_IT+0xe0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d012      	beq.n	8001ece <HAL_DMA_Abort_IT+0x92>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1c      	ldr	r2, [pc, #112]	@ (8001f20 <HAL_DMA_Abort_IT+0xe4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00a      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x8c>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8001f24 <HAL_DMA_Abort_IT+0xe8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d102      	bne.n	8001ec2 <HAL_DMA_Abort_IT+0x86>
 8001ebc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001ec0:	e00e      	b.n	8001ee0 <HAL_DMA_Abort_IT+0xa4>
 8001ec2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ec6:	e00b      	b.n	8001ee0 <HAL_DMA_Abort_IT+0xa4>
 8001ec8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ecc:	e008      	b.n	8001ee0 <HAL_DMA_Abort_IT+0xa4>
 8001ece:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed2:	e005      	b.n	8001ee0 <HAL_DMA_Abort_IT+0xa4>
 8001ed4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ed8:	e002      	b.n	8001ee0 <HAL_DMA_Abort_IT+0xa4>
 8001eda:	2310      	movs	r3, #16
 8001edc:	e000      	b.n	8001ee0 <HAL_DMA_Abort_IT+0xa4>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	4a11      	ldr	r2, [pc, #68]	@ (8001f28 <HAL_DMA_Abort_IT+0xec>)
 8001ee2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	4798      	blx	r3
    } 
  }
  return status;
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40020008 	.word	0x40020008
 8001f14:	4002001c 	.word	0x4002001c
 8001f18:	40020030 	.word	0x40020030
 8001f1c:	40020044 	.word	0x40020044
 8001f20:	40020058 	.word	0x40020058
 8001f24:	4002006c 	.word	0x4002006c
 8001f28:	40020000 	.word	0x40020000

08001f2c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f3a:	b2db      	uxtb	r3, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
	...

08001f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b08b      	sub	sp, #44	@ 0x2c
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f52:	2300      	movs	r3, #0
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5a:	e169      	b.n	8002230 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	f040 8158 	bne.w	800222a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4a9a      	ldr	r2, [pc, #616]	@ (80021e8 <HAL_GPIO_Init+0x2a0>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d05e      	beq.n	8002042 <HAL_GPIO_Init+0xfa>
 8001f84:	4a98      	ldr	r2, [pc, #608]	@ (80021e8 <HAL_GPIO_Init+0x2a0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d875      	bhi.n	8002076 <HAL_GPIO_Init+0x12e>
 8001f8a:	4a98      	ldr	r2, [pc, #608]	@ (80021ec <HAL_GPIO_Init+0x2a4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d058      	beq.n	8002042 <HAL_GPIO_Init+0xfa>
 8001f90:	4a96      	ldr	r2, [pc, #600]	@ (80021ec <HAL_GPIO_Init+0x2a4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d86f      	bhi.n	8002076 <HAL_GPIO_Init+0x12e>
 8001f96:	4a96      	ldr	r2, [pc, #600]	@ (80021f0 <HAL_GPIO_Init+0x2a8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d052      	beq.n	8002042 <HAL_GPIO_Init+0xfa>
 8001f9c:	4a94      	ldr	r2, [pc, #592]	@ (80021f0 <HAL_GPIO_Init+0x2a8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d869      	bhi.n	8002076 <HAL_GPIO_Init+0x12e>
 8001fa2:	4a94      	ldr	r2, [pc, #592]	@ (80021f4 <HAL_GPIO_Init+0x2ac>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d04c      	beq.n	8002042 <HAL_GPIO_Init+0xfa>
 8001fa8:	4a92      	ldr	r2, [pc, #584]	@ (80021f4 <HAL_GPIO_Init+0x2ac>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d863      	bhi.n	8002076 <HAL_GPIO_Init+0x12e>
 8001fae:	4a92      	ldr	r2, [pc, #584]	@ (80021f8 <HAL_GPIO_Init+0x2b0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d046      	beq.n	8002042 <HAL_GPIO_Init+0xfa>
 8001fb4:	4a90      	ldr	r2, [pc, #576]	@ (80021f8 <HAL_GPIO_Init+0x2b0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d85d      	bhi.n	8002076 <HAL_GPIO_Init+0x12e>
 8001fba:	2b12      	cmp	r3, #18
 8001fbc:	d82a      	bhi.n	8002014 <HAL_GPIO_Init+0xcc>
 8001fbe:	2b12      	cmp	r3, #18
 8001fc0:	d859      	bhi.n	8002076 <HAL_GPIO_Init+0x12e>
 8001fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc8 <HAL_GPIO_Init+0x80>)
 8001fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc8:	08002043 	.word	0x08002043
 8001fcc:	0800201d 	.word	0x0800201d
 8001fd0:	0800202f 	.word	0x0800202f
 8001fd4:	08002071 	.word	0x08002071
 8001fd8:	08002077 	.word	0x08002077
 8001fdc:	08002077 	.word	0x08002077
 8001fe0:	08002077 	.word	0x08002077
 8001fe4:	08002077 	.word	0x08002077
 8001fe8:	08002077 	.word	0x08002077
 8001fec:	08002077 	.word	0x08002077
 8001ff0:	08002077 	.word	0x08002077
 8001ff4:	08002077 	.word	0x08002077
 8001ff8:	08002077 	.word	0x08002077
 8001ffc:	08002077 	.word	0x08002077
 8002000:	08002077 	.word	0x08002077
 8002004:	08002077 	.word	0x08002077
 8002008:	08002077 	.word	0x08002077
 800200c:	08002025 	.word	0x08002025
 8002010:	08002039 	.word	0x08002039
 8002014:	4a79      	ldr	r2, [pc, #484]	@ (80021fc <HAL_GPIO_Init+0x2b4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800201a:	e02c      	b.n	8002076 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	623b      	str	r3, [r7, #32]
          break;
 8002022:	e029      	b.n	8002078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	3304      	adds	r3, #4
 800202a:	623b      	str	r3, [r7, #32]
          break;
 800202c:	e024      	b.n	8002078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	3308      	adds	r3, #8
 8002034:	623b      	str	r3, [r7, #32]
          break;
 8002036:	e01f      	b.n	8002078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	330c      	adds	r3, #12
 800203e:	623b      	str	r3, [r7, #32]
          break;
 8002040:	e01a      	b.n	8002078 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800204a:	2304      	movs	r3, #4
 800204c:	623b      	str	r3, [r7, #32]
          break;
 800204e:	e013      	b.n	8002078 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d105      	bne.n	8002064 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002058:	2308      	movs	r3, #8
 800205a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	611a      	str	r2, [r3, #16]
          break;
 8002062:	e009      	b.n	8002078 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002064:	2308      	movs	r3, #8
 8002066:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	615a      	str	r2, [r3, #20]
          break;
 800206e:	e003      	b.n	8002078 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002070:	2300      	movs	r3, #0
 8002072:	623b      	str	r3, [r7, #32]
          break;
 8002074:	e000      	b.n	8002078 <HAL_GPIO_Init+0x130>
          break;
 8002076:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	2bff      	cmp	r3, #255	@ 0xff
 800207c:	d801      	bhi.n	8002082 <HAL_GPIO_Init+0x13a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	e001      	b.n	8002086 <HAL_GPIO_Init+0x13e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3304      	adds	r3, #4
 8002086:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	2bff      	cmp	r3, #255	@ 0xff
 800208c:	d802      	bhi.n	8002094 <HAL_GPIO_Init+0x14c>
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	e002      	b.n	800209a <HAL_GPIO_Init+0x152>
 8002094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002096:	3b08      	subs	r3, #8
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	210f      	movs	r1, #15
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	fa01 f303 	lsl.w	r3, r1, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	401a      	ands	r2, r3
 80020ac:	6a39      	ldr	r1, [r7, #32]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	431a      	orrs	r2, r3
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 80b1 	beq.w	800222a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002200 <HAL_GPIO_Init+0x2b8>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002200 <HAL_GPIO_Init+0x2b8>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6193      	str	r3, [r2, #24]
 80020d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002200 <HAL_GPIO_Init+0x2b8>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020e0:	4a48      	ldr	r2, [pc, #288]	@ (8002204 <HAL_GPIO_Init+0x2bc>)
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	3302      	adds	r3, #2
 80020e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4013      	ands	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a40      	ldr	r2, [pc, #256]	@ (8002208 <HAL_GPIO_Init+0x2c0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d013      	beq.n	8002134 <HAL_GPIO_Init+0x1ec>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a3f      	ldr	r2, [pc, #252]	@ (800220c <HAL_GPIO_Init+0x2c4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00d      	beq.n	8002130 <HAL_GPIO_Init+0x1e8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3e      	ldr	r2, [pc, #248]	@ (8002210 <HAL_GPIO_Init+0x2c8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d007      	beq.n	800212c <HAL_GPIO_Init+0x1e4>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a3d      	ldr	r2, [pc, #244]	@ (8002214 <HAL_GPIO_Init+0x2cc>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d101      	bne.n	8002128 <HAL_GPIO_Init+0x1e0>
 8002124:	2303      	movs	r3, #3
 8002126:	e006      	b.n	8002136 <HAL_GPIO_Init+0x1ee>
 8002128:	2304      	movs	r3, #4
 800212a:	e004      	b.n	8002136 <HAL_GPIO_Init+0x1ee>
 800212c:	2302      	movs	r3, #2
 800212e:	e002      	b.n	8002136 <HAL_GPIO_Init+0x1ee>
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <HAL_GPIO_Init+0x1ee>
 8002134:	2300      	movs	r3, #0
 8002136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002138:	f002 0203 	and.w	r2, r2, #3
 800213c:	0092      	lsls	r2, r2, #2
 800213e:	4093      	lsls	r3, r2
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002146:	492f      	ldr	r1, [pc, #188]	@ (8002204 <HAL_GPIO_Init+0x2bc>)
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3302      	adds	r3, #2
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d006      	beq.n	800216e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002160:	4b2d      	ldr	r3, [pc, #180]	@ (8002218 <HAL_GPIO_Init+0x2d0>)
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	492c      	ldr	r1, [pc, #176]	@ (8002218 <HAL_GPIO_Init+0x2d0>)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	608b      	str	r3, [r1, #8]
 800216c:	e006      	b.n	800217c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800216e:	4b2a      	ldr	r3, [pc, #168]	@ (8002218 <HAL_GPIO_Init+0x2d0>)
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	43db      	mvns	r3, r3
 8002176:	4928      	ldr	r1, [pc, #160]	@ (8002218 <HAL_GPIO_Init+0x2d0>)
 8002178:	4013      	ands	r3, r2
 800217a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d006      	beq.n	8002196 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002188:	4b23      	ldr	r3, [pc, #140]	@ (8002218 <HAL_GPIO_Init+0x2d0>)
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	4922      	ldr	r1, [pc, #136]	@ (8002218 <HAL_GPIO_Init+0x2d0>)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	60cb      	str	r3, [r1, #12]
 8002194:	e006      	b.n	80021a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002196:	4b20      	ldr	r3, [pc, #128]	@ (8002218 <HAL_GPIO_Init+0x2d0>)
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	43db      	mvns	r3, r3
 800219e:	491e      	ldr	r1, [pc, #120]	@ (8002218 <HAL_GPIO_Init+0x2d0>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d006      	beq.n	80021be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021b0:	4b19      	ldr	r3, [pc, #100]	@ (8002218 <HAL_GPIO_Init+0x2d0>)
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	4918      	ldr	r1, [pc, #96]	@ (8002218 <HAL_GPIO_Init+0x2d0>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021be:	4b16      	ldr	r3, [pc, #88]	@ (8002218 <HAL_GPIO_Init+0x2d0>)
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	4914      	ldr	r1, [pc, #80]	@ (8002218 <HAL_GPIO_Init+0x2d0>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d021      	beq.n	800221c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002218 <HAL_GPIO_Init+0x2d0>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	490e      	ldr	r1, [pc, #56]	@ (8002218 <HAL_GPIO_Init+0x2d0>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]
 80021e4:	e021      	b.n	800222a <HAL_GPIO_Init+0x2e2>
 80021e6:	bf00      	nop
 80021e8:	10320000 	.word	0x10320000
 80021ec:	10310000 	.word	0x10310000
 80021f0:	10220000 	.word	0x10220000
 80021f4:	10210000 	.word	0x10210000
 80021f8:	10120000 	.word	0x10120000
 80021fc:	10110000 	.word	0x10110000
 8002200:	40021000 	.word	0x40021000
 8002204:	40010000 	.word	0x40010000
 8002208:	40010800 	.word	0x40010800
 800220c:	40010c00 	.word	0x40010c00
 8002210:	40011000 	.word	0x40011000
 8002214:	40011400 	.word	0x40011400
 8002218:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800221c:	4b0b      	ldr	r3, [pc, #44]	@ (800224c <HAL_GPIO_Init+0x304>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	43db      	mvns	r3, r3
 8002224:	4909      	ldr	r1, [pc, #36]	@ (800224c <HAL_GPIO_Init+0x304>)
 8002226:	4013      	ands	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800222a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222c:	3301      	adds	r3, #1
 800222e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002236:	fa22 f303 	lsr.w	r3, r2, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	f47f ae8e 	bne.w	8001f5c <HAL_GPIO_Init+0x14>
  }
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	372c      	adds	r7, #44	@ 0x2c
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	40010400 	.word	0x40010400

08002250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	807b      	strh	r3, [r7, #2]
 800225c:	4613      	mov	r3, r2
 800225e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002260:	787b      	ldrb	r3, [r7, #1]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002266:	887a      	ldrh	r2, [r7, #2]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800226c:	e003      	b.n	8002276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800226e:	887b      	ldrh	r3, [r7, #2]
 8002270:	041a      	lsls	r2, r3, #16
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	611a      	str	r2, [r3, #16]
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800228a:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	4013      	ands	r3, r2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d006      	beq.n	80022a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002296:	4a05      	ldr	r2, [pc, #20]	@ (80022ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f806 	bl	80022b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40010400 	.word	0x40010400

080022b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e12b      	b.n	800252e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff f952 	bl	8001594 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2224      	movs	r2, #36	@ 0x24
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002316:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002326:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002328:	f002 f9f4 	bl	8004714 <HAL_RCC_GetPCLK1Freq>
 800232c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4a81      	ldr	r2, [pc, #516]	@ (8002538 <HAL_I2C_Init+0x274>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d807      	bhi.n	8002348 <HAL_I2C_Init+0x84>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4a80      	ldr	r2, [pc, #512]	@ (800253c <HAL_I2C_Init+0x278>)
 800233c:	4293      	cmp	r3, r2
 800233e:	bf94      	ite	ls
 8002340:	2301      	movls	r3, #1
 8002342:	2300      	movhi	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	e006      	b.n	8002356 <HAL_I2C_Init+0x92>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4a7d      	ldr	r2, [pc, #500]	@ (8002540 <HAL_I2C_Init+0x27c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	bf94      	ite	ls
 8002350:	2301      	movls	r3, #1
 8002352:	2300      	movhi	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e0e7      	b.n	800252e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4a78      	ldr	r2, [pc, #480]	@ (8002544 <HAL_I2C_Init+0x280>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	0c9b      	lsrs	r3, r3, #18
 8002368:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	430a      	orrs	r2, r1
 800237c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4a6a      	ldr	r2, [pc, #424]	@ (8002538 <HAL_I2C_Init+0x274>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d802      	bhi.n	8002398 <HAL_I2C_Init+0xd4>
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	3301      	adds	r3, #1
 8002396:	e009      	b.n	80023ac <HAL_I2C_Init+0xe8>
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	4a69      	ldr	r2, [pc, #420]	@ (8002548 <HAL_I2C_Init+0x284>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	099b      	lsrs	r3, r3, #6
 80023aa:	3301      	adds	r3, #1
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	430b      	orrs	r3, r1
 80023b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80023be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	495c      	ldr	r1, [pc, #368]	@ (8002538 <HAL_I2C_Init+0x274>)
 80023c8:	428b      	cmp	r3, r1
 80023ca:	d819      	bhi.n	8002400 <HAL_I2C_Init+0x13c>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	1e59      	subs	r1, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80023da:	1c59      	adds	r1, r3, #1
 80023dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80023e0:	400b      	ands	r3, r1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_I2C_Init+0x138>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1e59      	subs	r1, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80023f4:	3301      	adds	r3, #1
 80023f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023fa:	e051      	b.n	80024a0 <HAL_I2C_Init+0x1dc>
 80023fc:	2304      	movs	r3, #4
 80023fe:	e04f      	b.n	80024a0 <HAL_I2C_Init+0x1dc>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d111      	bne.n	800242c <HAL_I2C_Init+0x168>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1e58      	subs	r0, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6859      	ldr	r1, [r3, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	440b      	add	r3, r1
 8002416:	fbb0 f3f3 	udiv	r3, r0, r3
 800241a:	3301      	adds	r3, #1
 800241c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf0c      	ite	eq
 8002424:	2301      	moveq	r3, #1
 8002426:	2300      	movne	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	e012      	b.n	8002452 <HAL_I2C_Init+0x18e>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1e58      	subs	r0, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	0099      	lsls	r1, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002442:	3301      	adds	r3, #1
 8002444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_I2C_Init+0x196>
 8002456:	2301      	movs	r3, #1
 8002458:	e022      	b.n	80024a0 <HAL_I2C_Init+0x1dc>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10e      	bne.n	8002480 <HAL_I2C_Init+0x1bc>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1e58      	subs	r0, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6859      	ldr	r1, [r3, #4]
 800246a:	460b      	mov	r3, r1
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	440b      	add	r3, r1
 8002470:	fbb0 f3f3 	udiv	r3, r0, r3
 8002474:	3301      	adds	r3, #1
 8002476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800247e:	e00f      	b.n	80024a0 <HAL_I2C_Init+0x1dc>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1e58      	subs	r0, r3, #1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6859      	ldr	r1, [r3, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	0099      	lsls	r1, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	fbb0 f3f3 	udiv	r3, r0, r3
 8002496:	3301      	adds	r3, #1
 8002498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800249c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	6809      	ldr	r1, [r1, #0]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69da      	ldr	r2, [r3, #28]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6911      	ldr	r1, [r2, #16]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68d2      	ldr	r2, [r2, #12]
 80024da:	4311      	orrs	r1, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	000186a0 	.word	0x000186a0
 800253c:	001e847f 	.word	0x001e847f
 8002540:	003d08ff 	.word	0x003d08ff
 8002544:	431bde83 	.word	0x431bde83
 8002548:	10624dd3 	.word	0x10624dd3

0800254c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800255e:	2b80      	cmp	r3, #128	@ 0x80
 8002560:	d103      	bne.n	800256a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2200      	movs	r2, #0
 8002568:	611a      	str	r2, [r3, #16]
  }
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002594:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800259c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b10      	cmp	r3, #16
 80025a2:	d003      	beq.n	80025ac <HAL_I2C_EV_IRQHandler+0x38>
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	2b40      	cmp	r3, #64	@ 0x40
 80025a8:	f040 80c1 	bne.w	800272e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10d      	bne.n	80025e2 <HAL_I2C_EV_IRQHandler+0x6e>
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80025cc:	d003      	beq.n	80025d6 <HAL_I2C_EV_IRQHandler+0x62>
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80025d4:	d101      	bne.n	80025da <HAL_I2C_EV_IRQHandler+0x66>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_I2C_EV_IRQHandler+0x68>
 80025da:	2300      	movs	r3, #0
 80025dc:	2b01      	cmp	r3, #1
 80025de:	f000 8132 	beq.w	8002846 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00c      	beq.n	8002606 <HAL_I2C_EV_IRQHandler+0x92>
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	0a5b      	lsrs	r3, r3, #9
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d006      	beq.n	8002606 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f001 fc9b 	bl	8003f34 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fd99 	bl	8003136 <I2C_Master_SB>
 8002604:	e092      	b.n	800272c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	08db      	lsrs	r3, r3, #3
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <HAL_I2C_EV_IRQHandler+0xb2>
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	0a5b      	lsrs	r3, r3, #9
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fe0e 	bl	8003240 <I2C_Master_ADD10>
 8002624:	e082      	b.n	800272c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	085b      	lsrs	r3, r3, #1
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d009      	beq.n	8002646 <HAL_I2C_EV_IRQHandler+0xd2>
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	0a5b      	lsrs	r3, r3, #9
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fe27 	bl	8003292 <I2C_Master_ADDR>
 8002644:	e072      	b.n	800272c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d03b      	beq.n	80026ca <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800265c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002660:	f000 80f3 	beq.w	800284a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	09db      	lsrs	r3, r3, #7
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00f      	beq.n	8002690 <HAL_I2C_EV_IRQHandler+0x11c>
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	0a9b      	lsrs	r3, r3, #10
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d009      	beq.n	8002690 <HAL_I2C_EV_IRQHandler+0x11c>
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	089b      	lsrs	r3, r3, #2
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d103      	bne.n	8002690 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f9f1 	bl	8002a70 <I2C_MasterTransmit_TXE>
 800268e:	e04d      	b.n	800272c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	089b      	lsrs	r3, r3, #2
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80d6 	beq.w	800284a <HAL_I2C_EV_IRQHandler+0x2d6>
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	0a5b      	lsrs	r3, r3, #9
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 80cf 	beq.w	800284a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80026ac:	7bbb      	ldrb	r3, [r7, #14]
 80026ae:	2b21      	cmp	r3, #33	@ 0x21
 80026b0:	d103      	bne.n	80026ba <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fa78 	bl	8002ba8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026b8:	e0c7      	b.n	800284a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	2b40      	cmp	r3, #64	@ 0x40
 80026be:	f040 80c4 	bne.w	800284a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fae6 	bl	8002c94 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026c8:	e0bf      	b.n	800284a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026d8:	f000 80b7 	beq.w	800284a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	099b      	lsrs	r3, r3, #6
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00f      	beq.n	8002708 <HAL_I2C_EV_IRQHandler+0x194>
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	0a9b      	lsrs	r3, r3, #10
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d009      	beq.n	8002708 <HAL_I2C_EV_IRQHandler+0x194>
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d103      	bne.n	8002708 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fb5f 	bl	8002dc4 <I2C_MasterReceive_RXNE>
 8002706:	e011      	b.n	800272c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	089b      	lsrs	r3, r3, #2
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 809a 	beq.w	800284a <HAL_I2C_EV_IRQHandler+0x2d6>
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	0a5b      	lsrs	r3, r3, #9
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8093 	beq.w	800284a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 fc15 	bl	8002f54 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800272a:	e08e      	b.n	800284a <HAL_I2C_EV_IRQHandler+0x2d6>
 800272c:	e08d      	b.n	800284a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	2b00      	cmp	r3, #0
 8002734:	d004      	beq.n	8002740 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	e007      	b.n	8002750 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	085b      	lsrs	r3, r3, #1
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d012      	beq.n	8002782 <HAL_I2C_EV_IRQHandler+0x20e>
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	0a5b      	lsrs	r3, r3, #9
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00c      	beq.n	8002782 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002778:	69b9      	ldr	r1, [r7, #24]
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 ffe0 	bl	8003740 <I2C_Slave_ADDR>
 8002780:	e066      	b.n	8002850 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <HAL_I2C_EV_IRQHandler+0x22e>
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	0a5b      	lsrs	r3, r3, #9
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f001 f81a 	bl	80037d4 <I2C_Slave_STOPF>
 80027a0:	e056      	b.n	8002850 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80027a2:	7bbb      	ldrb	r3, [r7, #14]
 80027a4:	2b21      	cmp	r3, #33	@ 0x21
 80027a6:	d002      	beq.n	80027ae <HAL_I2C_EV_IRQHandler+0x23a>
 80027a8:	7bbb      	ldrb	r3, [r7, #14]
 80027aa:	2b29      	cmp	r3, #41	@ 0x29
 80027ac:	d125      	bne.n	80027fa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	09db      	lsrs	r3, r3, #7
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00f      	beq.n	80027da <HAL_I2C_EV_IRQHandler+0x266>
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	0a9b      	lsrs	r3, r3, #10
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <HAL_I2C_EV_IRQHandler+0x266>
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	089b      	lsrs	r3, r3, #2
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d103      	bne.n	80027da <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fef8 	bl	80035c8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027d8:	e039      	b.n	800284e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	089b      	lsrs	r3, r3, #2
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d033      	beq.n	800284e <HAL_I2C_EV_IRQHandler+0x2da>
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	0a5b      	lsrs	r3, r3, #9
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d02d      	beq.n	800284e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 ff25 	bl	8003642 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027f8:	e029      	b.n	800284e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	099b      	lsrs	r3, r3, #6
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00f      	beq.n	8002826 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	0a9b      	lsrs	r3, r3, #10
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d009      	beq.n	8002826 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d103      	bne.n	8002826 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 ff2f 	bl	8003682 <I2C_SlaveReceive_RXNE>
 8002824:	e014      	b.n	8002850 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	089b      	lsrs	r3, r3, #2
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00e      	beq.n	8002850 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	0a5b      	lsrs	r3, r3, #9
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d008      	beq.n	8002850 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 ff5d 	bl	80036fe <I2C_SlaveReceive_BTF>
 8002844:	e004      	b.n	8002850 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002846:	bf00      	nop
 8002848:	e002      	b.n	8002850 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800284a:	bf00      	nop
 800284c:	e000      	b.n	8002850 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800284e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002850:	3720      	adds	r7, #32
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b08a      	sub	sp, #40	@ 0x28
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800286e:	2300      	movs	r3, #0
 8002870:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002878:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d016      	beq.n	80028b4 <HAL_I2C_ER_IRQHandler+0x5e>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	0a1b      	lsrs	r3, r3, #8
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d010      	beq.n	80028b4 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80028a2:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028b2:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	0a5b      	lsrs	r3, r3, #9
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00e      	beq.n	80028de <HAL_I2C_ER_IRQHandler+0x88>
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80028cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ce:	f043 0302 	orr.w	r3, r3, #2
 80028d2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80028dc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	0a9b      	lsrs	r3, r3, #10
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d03f      	beq.n	800296a <HAL_I2C_ER_IRQHandler+0x114>
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	0a1b      	lsrs	r3, r3, #8
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d039      	beq.n	800296a <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80028f6:	7efb      	ldrb	r3, [r7, #27]
 80028f8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002908:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002910:	7ebb      	ldrb	r3, [r7, #26]
 8002912:	2b20      	cmp	r3, #32
 8002914:	d112      	bne.n	800293c <HAL_I2C_ER_IRQHandler+0xe6>
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10f      	bne.n	800293c <HAL_I2C_ER_IRQHandler+0xe6>
 800291c:	7cfb      	ldrb	r3, [r7, #19]
 800291e:	2b21      	cmp	r3, #33	@ 0x21
 8002920:	d008      	beq.n	8002934 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002922:	7cfb      	ldrb	r3, [r7, #19]
 8002924:	2b29      	cmp	r3, #41	@ 0x29
 8002926:	d005      	beq.n	8002934 <HAL_I2C_ER_IRQHandler+0xde>
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	2b28      	cmp	r3, #40	@ 0x28
 800292c:	d106      	bne.n	800293c <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b21      	cmp	r3, #33	@ 0x21
 8002932:	d103      	bne.n	800293c <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f001 f87d 	bl	8003a34 <I2C_Slave_AF>
 800293a:	e016      	b.n	800296a <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002944:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002948:	f043 0304 	orr.w	r3, r3, #4
 800294c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800294e:	7efb      	ldrb	r3, [r7, #27]
 8002950:	2b10      	cmp	r3, #16
 8002952:	d002      	beq.n	800295a <HAL_I2C_ER_IRQHandler+0x104>
 8002954:	7efb      	ldrb	r3, [r7, #27]
 8002956:	2b40      	cmp	r3, #64	@ 0x40
 8002958:	d107      	bne.n	800296a <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002968:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	0adb      	lsrs	r3, r3, #11
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00e      	beq.n	8002994 <HAL_I2C_ER_IRQHandler+0x13e>
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	0a1b      	lsrs	r3, r3, #8
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d008      	beq.n	8002994 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002984:	f043 0308 	orr.w	r3, r3, #8
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002992:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002996:	2b00      	cmp	r3, #0
 8002998:	d008      	beq.n	80029ac <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f001 f8b8 	bl	8003b1c <I2C_ITError>
  }
}
 80029ac:	bf00      	nop
 80029ae:	3728      	adds	r7, #40	@ 0x28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	70fb      	strb	r3, [r7, #3]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a7e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a86:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d150      	bne.n	8002b38 <I2C_MasterTransmit_TXE+0xc8>
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	2b21      	cmp	r3, #33	@ 0x21
 8002a9a:	d14d      	bne.n	8002b38 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d01d      	beq.n	8002ade <I2C_MasterTransmit_TXE+0x6e>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b20      	cmp	r3, #32
 8002aa6:	d01a      	beq.n	8002ade <I2C_MasterTransmit_TXE+0x6e>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002aae:	d016      	beq.n	8002ade <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002abe:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2211      	movs	r2, #17
 8002ac4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ff6c 	bl	80029b4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002adc:	e060      	b.n	8002ba0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002aec:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002afc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b40      	cmp	r3, #64	@ 0x40
 8002b16:	d107      	bne.n	8002b28 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff ff81 	bl	8002a28 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b26:	e03b      	b.n	8002ba0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ff3f 	bl	80029b4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b36:	e033      	b.n	8002ba0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b21      	cmp	r3, #33	@ 0x21
 8002b3c:	d005      	beq.n	8002b4a <I2C_MasterTransmit_TXE+0xda>
 8002b3e:	7bbb      	ldrb	r3, [r7, #14]
 8002b40:	2b40      	cmp	r3, #64	@ 0x40
 8002b42:	d12d      	bne.n	8002ba0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	2b22      	cmp	r3, #34	@ 0x22
 8002b48:	d12a      	bne.n	8002ba0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d108      	bne.n	8002b66 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b62:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002b64:	e01c      	b.n	8002ba0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b40      	cmp	r3, #64	@ 0x40
 8002b70:	d103      	bne.n	8002b7a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f88e 	bl	8002c94 <I2C_MemoryTransmit_TXE_BTF>
}
 8002b78:	e012      	b.n	8002ba0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7e:	781a      	ldrb	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002b9e:	e7ff      	b.n	8002ba0 <I2C_MasterTransmit_TXE+0x130>
 8002ba0:	bf00      	nop
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b21      	cmp	r3, #33	@ 0x21
 8002bc0:	d164      	bne.n	8002c8c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d012      	beq.n	8002bf2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	781a      	ldrb	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002bf0:	e04c      	b.n	8002c8c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d01d      	beq.n	8002c34 <I2C_MasterTransmit_BTF+0x8c>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d01a      	beq.n	8002c34 <I2C_MasterTransmit_BTF+0x8c>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c04:	d016      	beq.n	8002c34 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c14:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2211      	movs	r2, #17
 8002c1a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff fec1 	bl	80029b4 <HAL_I2C_MasterTxCpltCallback>
}
 8002c32:	e02b      	b.n	8002c8c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c42:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c52:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b40      	cmp	r3, #64	@ 0x40
 8002c6c:	d107      	bne.n	8002c7e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff fed6 	bl	8002a28 <HAL_I2C_MemTxCpltCallback>
}
 8002c7c:	e006      	b.n	8002c8c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff fe94 	bl	80029b4 <HAL_I2C_MasterTxCpltCallback>
}
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ca2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d11d      	bne.n	8002ce8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10b      	bne.n	8002ccc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cc4:	1c9a      	adds	r2, r3, #2
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002cca:	e077      	b.n	8002dbc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	121b      	asrs	r3, r3, #8
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002ce6:	e069      	b.n	8002dbc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d10b      	bne.n	8002d08 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002d06:	e059      	b.n	8002dbc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d152      	bne.n	8002db6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	2b22      	cmp	r3, #34	@ 0x22
 8002d14:	d10d      	bne.n	8002d32 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d24:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002d30:	e044      	b.n	8002dbc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d015      	beq.n	8002d68 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	2b21      	cmp	r3, #33	@ 0x21
 8002d40:	d112      	bne.n	8002d68 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	781a      	ldrb	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002d66:	e029      	b.n	8002dbc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d124      	bne.n	8002dbc <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	2b21      	cmp	r3, #33	@ 0x21
 8002d76:	d121      	bne.n	8002dbc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002d86:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d96:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff fe3a 	bl	8002a28 <HAL_I2C_MemTxCpltCallback>
}
 8002db4:	e002      	b.n	8002dbc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff fbc8 	bl	800254c <I2C_Flush_DR>
}
 8002dbc:	bf00      	nop
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b22      	cmp	r3, #34	@ 0x22
 8002dd6:	f040 80b9 	bne.w	8002f4c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dde:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d921      	bls.n	8002e32 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	f040 8096 	bne.w	8002f4c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e2e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002e30:	e08c      	b.n	8002f4c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d07f      	beq.n	8002f3a <I2C_MasterReceive_RXNE+0x176>
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d002      	beq.n	8002e46 <I2C_MasterReceive_RXNE+0x82>
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d179      	bne.n	8002f3a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f001 f842 	bl	8003ed0 <I2C_WaitOnSTOPRequestThroughIT>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d14c      	bne.n	8002eec <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e60:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e70:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b40      	cmp	r3, #64	@ 0x40
 8002eaa:	d10a      	bne.n	8002ec2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff fdbd 	bl	8002a3a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ec0:	e044      	b.n	8002f4c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d002      	beq.n	8002ed6 <I2C_MasterReceive_RXNE+0x112>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d103      	bne.n	8002ede <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	@ 0x30
 8002edc:	e002      	b.n	8002ee4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2212      	movs	r2, #18
 8002ee2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff fd6e 	bl	80029c6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002eea:	e02f      	b.n	8002f4c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002efa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff fd8a 	bl	8002a4c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002f38:	e008      	b.n	8002f4c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f48:	605a      	str	r2, [r3, #4]
}
 8002f4a:	e7ff      	b.n	8002f4c <I2C_MasterReceive_RXNE+0x188>
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f60:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d11b      	bne.n	8002fa4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f7a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002fa2:	e0c4      	b.n	800312e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d129      	bne.n	8003002 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fbc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d00a      	beq.n	8002fda <I2C_MasterReceive_BTF+0x86>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d007      	beq.n	8002fda <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fd8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003000:	e095      	b.n	800312e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d17d      	bne.n	8003108 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d002      	beq.n	8003018 <I2C_MasterReceive_BTF+0xc4>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b10      	cmp	r3, #16
 8003016:	d108      	bne.n	800302a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e016      	b.n	8003058 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b04      	cmp	r3, #4
 800302e:	d002      	beq.n	8003036 <I2C_MasterReceive_BTF+0xe2>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d108      	bne.n	8003048 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	e007      	b.n	8003058 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003056:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80030b2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b40      	cmp	r3, #64	@ 0x40
 80030c6:	d10a      	bne.n	80030de <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff fcaf 	bl	8002a3a <HAL_I2C_MemRxCpltCallback>
}
 80030dc:	e027      	b.n	800312e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d002      	beq.n	80030f2 <I2C_MasterReceive_BTF+0x19e>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	d103      	bne.n	80030fa <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80030f8:	e002      	b.n	8003100 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2212      	movs	r2, #18
 80030fe:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff fc60 	bl	80029c6 <HAL_I2C_MasterRxCpltCallback>
}
 8003106:	e012      	b.n	800312e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b40      	cmp	r3, #64	@ 0x40
 8003148:	d117      	bne.n	800317a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800314e:	2b00      	cmp	r3, #0
 8003150:	d109      	bne.n	8003166 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003156:	b2db      	uxtb	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003162:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003164:	e067      	b.n	8003236 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	b2da      	uxtb	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	611a      	str	r2, [r3, #16]
}
 8003178:	e05d      	b.n	8003236 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003182:	d133      	bne.n	80031ec <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b21      	cmp	r3, #33	@ 0x21
 800318e:	d109      	bne.n	80031a4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003194:	b2db      	uxtb	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031a0:	611a      	str	r2, [r3, #16]
 80031a2:	e008      	b.n	80031b6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d004      	beq.n	80031c8 <I2C_Master_SB+0x92>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d108      	bne.n	80031da <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d032      	beq.n	8003236 <I2C_Master_SB+0x100>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d02d      	beq.n	8003236 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031e8:	605a      	str	r2, [r3, #4]
}
 80031ea:	e024      	b.n	8003236 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10e      	bne.n	8003212 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	11db      	asrs	r3, r3, #7
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f003 0306 	and.w	r3, r3, #6
 8003202:	b2db      	uxtb	r3, r3
 8003204:	f063 030f 	orn	r3, r3, #15
 8003208:	b2da      	uxtb	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	611a      	str	r2, [r3, #16]
}
 8003210:	e011      	b.n	8003236 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003216:	2b01      	cmp	r3, #1
 8003218:	d10d      	bne.n	8003236 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	b29b      	uxth	r3, r3
 8003220:	11db      	asrs	r3, r3, #7
 8003222:	b2db      	uxtb	r3, r3
 8003224:	f003 0306 	and.w	r3, r3, #6
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f063 030e 	orn	r3, r3, #14
 800322e:	b2da      	uxtb	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	611a      	str	r2, [r3, #16]
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324c:	b2da      	uxtb	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003258:	2b00      	cmp	r3, #0
 800325a:	d004      	beq.n	8003266 <I2C_Master_ADD10+0x26>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003262:	2b00      	cmp	r3, #0
 8003264:	d108      	bne.n	8003278 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00c      	beq.n	8003288 <I2C_Master_ADD10+0x48>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003274:	2b00      	cmp	r3, #0
 8003276:	d007      	beq.n	8003288 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003286:	605a      	str	r2, [r3, #4]
  }
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003292:	b480      	push	{r7}
 8003294:	b091      	sub	sp, #68	@ 0x44
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ae:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b22      	cmp	r3, #34	@ 0x22
 80032ba:	f040 8174 	bne.w	80035a6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10f      	bne.n	80032e6 <I2C_Master_ADDR+0x54>
 80032c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80032ca:	2b40      	cmp	r3, #64	@ 0x40
 80032cc:	d10b      	bne.n	80032e6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ce:	2300      	movs	r3, #0
 80032d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80032e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e4:	e16b      	b.n	80035be <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d11d      	bne.n	800332a <I2C_Master_ADDR+0x98>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80032f6:	d118      	bne.n	800332a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f8:	2300      	movs	r3, #0
 80032fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800330c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800331c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	651a      	str	r2, [r3, #80]	@ 0x50
 8003328:	e149      	b.n	80035be <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d113      	bne.n	800335c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003334:	2300      	movs	r3, #0
 8003336:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003348:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	e120      	b.n	800359e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b01      	cmp	r3, #1
 8003364:	f040 808a 	bne.w	800347c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800336a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800336e:	d137      	bne.n	80033e0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800337e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800338a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800338e:	d113      	bne.n	80033b8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800339e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a0:	2300      	movs	r3, #0
 80033a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b6:	e0f2      	b.n	800359e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b8:	2300      	movs	r3, #0
 80033ba:	623b      	str	r3, [r7, #32]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	623b      	str	r3, [r7, #32]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	623b      	str	r3, [r7, #32]
 80033cc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	e0de      	b.n	800359e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80033e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d02e      	beq.n	8003444 <I2C_Master_ADDR+0x1b2>
 80033e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d02b      	beq.n	8003444 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80033ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ee:	2b12      	cmp	r3, #18
 80033f0:	d102      	bne.n	80033f8 <I2C_Master_ADDR+0x166>
 80033f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d125      	bne.n	8003444 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80033f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d00e      	beq.n	800341c <I2C_Master_ADDR+0x18a>
 80033fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003400:	2b02      	cmp	r3, #2
 8003402:	d00b      	beq.n	800341c <I2C_Master_ADDR+0x18a>
 8003404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003406:	2b10      	cmp	r3, #16
 8003408:	d008      	beq.n	800341c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	e007      	b.n	800342c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800342a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800342c:	2300      	movs	r3, #0
 800342e:	61fb      	str	r3, [r7, #28]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	61fb      	str	r3, [r7, #28]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	61fb      	str	r3, [r7, #28]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	e0ac      	b.n	800359e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003452:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003454:	2300      	movs	r3, #0
 8003456:	61bb      	str	r3, [r7, #24]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	61bb      	str	r3, [r7, #24]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	e090      	b.n	800359e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d158      	bne.n	8003538 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003488:	2b04      	cmp	r3, #4
 800348a:	d021      	beq.n	80034d0 <I2C_Master_ADDR+0x23e>
 800348c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800348e:	2b02      	cmp	r3, #2
 8003490:	d01e      	beq.n	80034d0 <I2C_Master_ADDR+0x23e>
 8003492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003494:	2b10      	cmp	r3, #16
 8003496:	d01b      	beq.n	80034d0 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034a6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	e012      	b.n	80034f6 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034de:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003500:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003504:	d14b      	bne.n	800359e <I2C_Master_ADDR+0x30c>
 8003506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003508:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800350c:	d00b      	beq.n	8003526 <I2C_Master_ADDR+0x294>
 800350e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003510:	2b01      	cmp	r3, #1
 8003512:	d008      	beq.n	8003526 <I2C_Master_ADDR+0x294>
 8003514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003516:	2b08      	cmp	r3, #8
 8003518:	d005      	beq.n	8003526 <I2C_Master_ADDR+0x294>
 800351a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800351c:	2b10      	cmp	r3, #16
 800351e:	d002      	beq.n	8003526 <I2C_Master_ADDR+0x294>
 8003520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003522:	2b20      	cmp	r3, #32
 8003524:	d13b      	bne.n	800359e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	e032      	b.n	800359e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003546:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003552:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003556:	d117      	bne.n	8003588 <I2C_Master_ADDR+0x2f6>
 8003558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800355a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800355e:	d00b      	beq.n	8003578 <I2C_Master_ADDR+0x2e6>
 8003560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003562:	2b01      	cmp	r3, #1
 8003564:	d008      	beq.n	8003578 <I2C_Master_ADDR+0x2e6>
 8003566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003568:	2b08      	cmp	r3, #8
 800356a:	d005      	beq.n	8003578 <I2C_Master_ADDR+0x2e6>
 800356c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800356e:	2b10      	cmp	r3, #16
 8003570:	d002      	beq.n	8003578 <I2C_Master_ADDR+0x2e6>
 8003572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003574:	2b20      	cmp	r3, #32
 8003576:	d107      	bne.n	8003588 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003586:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80035a4:	e00b      	b.n	80035be <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a6:	2300      	movs	r3, #0
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	68bb      	ldr	r3, [r7, #8]
}
 80035bc:	e7ff      	b.n	80035be <I2C_Master_ADDR+0x32c>
 80035be:	bf00      	nop
 80035c0:	3744      	adds	r7, #68	@ 0x44
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d02b      	beq.n	800363a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e6:	781a      	ldrb	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d114      	bne.n	800363a <I2C_SlaveTransmit_TXE+0x72>
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	2b29      	cmp	r3, #41	@ 0x29
 8003614:	d111      	bne.n	800363a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003624:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2221      	movs	r2, #33	@ 0x21
 800362a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2228      	movs	r2, #40	@ 0x28
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff f9cf 	bl	80029d8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d011      	beq.n	8003678 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003658:	781a      	ldrb	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr

08003682 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003690:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d02c      	beq.n	80036f6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d114      	bne.n	80036f6 <I2C_SlaveReceive_RXNE+0x74>
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80036d0:	d111      	bne.n	80036f6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036e0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2222      	movs	r2, #34	@ 0x22
 80036e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2228      	movs	r2, #40	@ 0x28
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff f97a 	bl	80029ea <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d012      	beq.n	8003736 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800374a:	2300      	movs	r3, #0
 800374c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800375a:	2b28      	cmp	r3, #40	@ 0x28
 800375c:	d127      	bne.n	80037ae <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800376c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	089b      	lsrs	r3, r3, #2
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	09db      	lsrs	r3, r3, #7
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d103      	bne.n	8003792 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	81bb      	strh	r3, [r7, #12]
 8003790:	e002      	b.n	8003798 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80037a0:	89ba      	ldrh	r2, [r7, #12]
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	4619      	mov	r1, r3
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff f928 	bl	80029fc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80037ac:	e00e      	b.n	80037cc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ae:	2300      	movs	r3, #0
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037f2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80037f4:	2300      	movs	r3, #0
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003820:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800382c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003830:	d172      	bne.n	8003918 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	2b22      	cmp	r3, #34	@ 0x22
 8003836:	d002      	beq.n	800383e <I2C_Slave_STOPF+0x6a>
 8003838:	7bfb      	ldrb	r3, [r7, #15]
 800383a:	2b2a      	cmp	r3, #42	@ 0x2a
 800383c:	d135      	bne.n	80038aa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	b29a      	uxth	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	f043 0204 	orr.w	r2, r3, #4
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003870:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe fb58 	bl	8001f2c <HAL_DMA_GetState>
 800387c:	4603      	mov	r3, r0
 800387e:	2b01      	cmp	r3, #1
 8003880:	d049      	beq.n	8003916 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003886:	4a69      	ldr	r2, [pc, #420]	@ (8003a2c <I2C_Slave_STOPF+0x258>)
 8003888:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe fad4 	bl	8001e3c <HAL_DMA_Abort_IT>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d03d      	beq.n	8003916 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038a4:	4610      	mov	r0, r2
 80038a6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038a8:	e035      	b.n	8003916 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d005      	beq.n	80038ce <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	f043 0204 	orr.w	r2, r3, #4
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe fb22 	bl	8001f2c <HAL_DMA_GetState>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d014      	beq.n	8003918 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f2:	4a4e      	ldr	r2, [pc, #312]	@ (8003a2c <I2C_Slave_STOPF+0x258>)
 80038f4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fe fa9e 	bl	8001e3c <HAL_DMA_Abort_IT>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d008      	beq.n	8003918 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800390a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003910:	4610      	mov	r0, r2
 8003912:	4798      	blx	r3
 8003914:	e000      	b.n	8003918 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003916:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d03e      	beq.n	80039a0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b04      	cmp	r3, #4
 800392e:	d112      	bne.n	8003956 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003960:	2b40      	cmp	r3, #64	@ 0x40
 8003962:	d112      	bne.n	800398a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003998:	f043 0204 	orr.w	r2, r3, #4
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f8b7 	bl	8003b1c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80039ae:	e039      	b.n	8003a24 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80039b4:	d109      	bne.n	80039ca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2228      	movs	r2, #40	@ 0x28
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff f810 	bl	80029ea <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b28      	cmp	r3, #40	@ 0x28
 80039d4:	d111      	bne.n	80039fa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a15      	ldr	r2, [pc, #84]	@ (8003a30 <I2C_Slave_STOPF+0x25c>)
 80039da:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff f80f 	bl	8002a16 <HAL_I2C_ListenCpltCallback>
}
 80039f8:	e014      	b.n	8003a24 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fe:	2b22      	cmp	r3, #34	@ 0x22
 8003a00:	d002      	beq.n	8003a08 <I2C_Slave_STOPF+0x234>
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	2b22      	cmp	r3, #34	@ 0x22
 8003a06:	d10d      	bne.n	8003a24 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fe ffe3 	bl	80029ea <HAL_I2C_SlaveRxCpltCallback>
}
 8003a24:	bf00      	nop
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	08003d81 	.word	0x08003d81
 8003a30:	ffff0000 	.word	0xffff0000

08003a34 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a42:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a48:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d002      	beq.n	8003a56 <I2C_Slave_AF+0x22>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	d129      	bne.n	8003aaa <I2C_Slave_AF+0x76>
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	2b28      	cmp	r3, #40	@ 0x28
 8003a5a:	d126      	bne.n	8003aaa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a2e      	ldr	r2, [pc, #184]	@ (8003b18 <I2C_Slave_AF+0xe4>)
 8003a60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a70:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a7a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a8a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fe ffb7 	bl	8002a16 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003aa8:	e031      	b.n	8003b0e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	2b21      	cmp	r3, #33	@ 0x21
 8003aae:	d129      	bne.n	8003b04 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a19      	ldr	r2, [pc, #100]	@ (8003b18 <I2C_Slave_AF+0xe4>)
 8003ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2221      	movs	r2, #33	@ 0x21
 8003aba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ada:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ae4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003af4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fe fd28 	bl	800254c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7fe ff6b 	bl	80029d8 <HAL_I2C_SlaveTxCpltCallback>
}
 8003b02:	e004      	b.n	8003b0e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b0c:	615a      	str	r2, [r3, #20]
}
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	ffff0000 	.word	0xffff0000

08003b1c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b2a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b32:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003b34:	7bbb      	ldrb	r3, [r7, #14]
 8003b36:	2b10      	cmp	r3, #16
 8003b38:	d002      	beq.n	8003b40 <I2C_ITError+0x24>
 8003b3a:	7bbb      	ldrb	r3, [r7, #14]
 8003b3c:	2b40      	cmp	r3, #64	@ 0x40
 8003b3e:	d10a      	bne.n	8003b56 <I2C_ITError+0x3a>
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b22      	cmp	r3, #34	@ 0x22
 8003b44:	d107      	bne.n	8003b56 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b54:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b5c:	2b28      	cmp	r3, #40	@ 0x28
 8003b5e:	d107      	bne.n	8003b70 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2228      	movs	r2, #40	@ 0x28
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003b6e:	e015      	b.n	8003b9c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b7e:	d00a      	beq.n	8003b96 <I2C_ITError+0x7a>
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	2b60      	cmp	r3, #96	@ 0x60
 8003b84:	d007      	beq.n	8003b96 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ba6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003baa:	d162      	bne.n	8003c72 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d020      	beq.n	8003c0c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bce:	4a6a      	ldr	r2, [pc, #424]	@ (8003d78 <I2C_ITError+0x25c>)
 8003bd0:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe f930 	bl	8001e3c <HAL_DMA_Abort_IT>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 8089 	beq.w	8003cf6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c06:	4610      	mov	r0, r2
 8003c08:	4798      	blx	r3
 8003c0a:	e074      	b.n	8003cf6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c10:	4a59      	ldr	r2, [pc, #356]	@ (8003d78 <I2C_ITError+0x25c>)
 8003c12:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fe f90f 	bl	8001e3c <HAL_DMA_Abort_IT>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d068      	beq.n	8003cf6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c2e:	2b40      	cmp	r3, #64	@ 0x40
 8003c30:	d10b      	bne.n	8003c4a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0201 	bic.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	4798      	blx	r3
 8003c70:	e041      	b.n	8003cf6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b60      	cmp	r3, #96	@ 0x60
 8003c7c:	d125      	bne.n	8003cca <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c96:	2b40      	cmp	r3, #64	@ 0x40
 8003c98:	d10b      	bne.n	8003cb2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fe fecb 	bl	8002a5e <HAL_I2C_AbortCpltCallback>
 8003cc8:	e015      	b.n	8003cf6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd4:	2b40      	cmp	r3, #64	@ 0x40
 8003cd6:	d10b      	bne.n	8003cf0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691a      	ldr	r2, [r3, #16]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7fe feab 	bl	8002a4c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10e      	bne.n	8003d24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d109      	bne.n	8003d24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d104      	bne.n	8003d24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d32:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d3a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d113      	bne.n	8003d70 <I2C_ITError+0x254>
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	2b28      	cmp	r3, #40	@ 0x28
 8003d4c:	d110      	bne.n	8003d70 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a0a      	ldr	r2, [pc, #40]	@ (8003d7c <I2C_ITError+0x260>)
 8003d52:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fe fe53 	bl	8002a16 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d70:	bf00      	nop
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	08003d81 	.word	0x08003d81
 8003d7c:	ffff0000 	.word	0xffff0000

08003d80 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d98:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8003ec8 <I2C_DMAAbort+0x148>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	08db      	lsrs	r3, r3, #3
 8003da0:	4a4a      	ldr	r2, [pc, #296]	@ (8003ecc <I2C_DMAAbort+0x14c>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	0a1a      	lsrs	r2, r3, #8
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	00da      	lsls	r2, r3, #3
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	f043 0220 	orr.w	r2, r3, #32
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003dc6:	e00a      	b.n	8003dde <I2C_DMAAbort+0x5e>
    }
    count--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ddc:	d0ea      	beq.n	8003db4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dea:	2200      	movs	r2, #0
 8003dec:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e0c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2200      	movs	r2, #0
 8003e12:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e20:	2200      	movs	r2, #0
 8003e22:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e30:	2200      	movs	r2, #0
 8003e32:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0201 	bic.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b60      	cmp	r3, #96	@ 0x60
 8003e4e:	d10e      	bne.n	8003e6e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2200      	movs	r2, #0
 8003e64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003e66:	6978      	ldr	r0, [r7, #20]
 8003e68:	f7fe fdf9 	bl	8002a5e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e6c:	e027      	b.n	8003ebe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e6e:	7cfb      	ldrb	r3, [r7, #19]
 8003e70:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e74:	2b28      	cmp	r3, #40	@ 0x28
 8003e76:	d117      	bne.n	8003ea8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e96:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2228      	movs	r2, #40	@ 0x28
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003ea6:	e007      	b.n	8003eb8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003eb8:	6978      	ldr	r0, [r7, #20]
 8003eba:	f7fe fdc7 	bl	8002a4c <HAL_I2C_ErrorCallback>
}
 8003ebe:	bf00      	nop
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000000 	.word	0x20000000
 8003ecc:	14f8b589 	.word	0x14f8b589

08003ed0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003edc:	4b13      	ldr	r3, [pc, #76]	@ (8003f2c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	08db      	lsrs	r3, r3, #3
 8003ee2:	4a13      	ldr	r2, [pc, #76]	@ (8003f30 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee8:	0a1a      	lsrs	r2, r3, #8
 8003eea:	4613      	mov	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d107      	bne.n	8003f0e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	f043 0220 	orr.w	r2, r3, #32
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e008      	b.n	8003f20 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f1c:	d0e9      	beq.n	8003ef2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	20000000 	.word	0x20000000
 8003f30:	14f8b589 	.word	0x14f8b589

08003f34 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f40:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003f44:	d103      	bne.n	8003f4e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f4c:	e007      	b.n	8003f5e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003f56:	d102      	bne.n	8003f5e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2208      	movs	r2, #8
 8003f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003f6c:	4b03      	ldr	r3, [pc, #12]	@ (8003f7c <HAL_PWR_EnableBkUpAccess+0x14>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	601a      	str	r2, [r3, #0]
}
 8003f72:	bf00      	nop
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	420e0020 	.word	0x420e0020

08003f80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e272      	b.n	8004478 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 8087 	beq.w	80040ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fa0:	4b92      	ldr	r3, [pc, #584]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 030c 	and.w	r3, r3, #12
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d00c      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fac:	4b8f      	ldr	r3, [pc, #572]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 030c 	and.w	r3, r3, #12
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d112      	bne.n	8003fde <HAL_RCC_OscConfig+0x5e>
 8003fb8:	4b8c      	ldr	r3, [pc, #560]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fc4:	d10b      	bne.n	8003fde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc6:	4b89      	ldr	r3, [pc, #548]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d06c      	beq.n	80040ac <HAL_RCC_OscConfig+0x12c>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d168      	bne.n	80040ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e24c      	b.n	8004478 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x76>
 8003fe8:	4b80      	ldr	r3, [pc, #512]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a7f      	ldr	r2, [pc, #508]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8003fee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	e02e      	b.n	8004054 <HAL_RCC_OscConfig+0xd4>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0x98>
 8003ffe:	4b7b      	ldr	r3, [pc, #492]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a7a      	ldr	r2, [pc, #488]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8004004:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	4b78      	ldr	r3, [pc, #480]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a77      	ldr	r2, [pc, #476]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8004010:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e01d      	b.n	8004054 <HAL_RCC_OscConfig+0xd4>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004020:	d10c      	bne.n	800403c <HAL_RCC_OscConfig+0xbc>
 8004022:	4b72      	ldr	r3, [pc, #456]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a71      	ldr	r2, [pc, #452]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8004028:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	4b6f      	ldr	r3, [pc, #444]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a6e      	ldr	r2, [pc, #440]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8004034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e00b      	b.n	8004054 <HAL_RCC_OscConfig+0xd4>
 800403c:	4b6b      	ldr	r3, [pc, #428]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a6a      	ldr	r2, [pc, #424]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8004042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	4b68      	ldr	r3, [pc, #416]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a67      	ldr	r2, [pc, #412]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 800404e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004052:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d013      	beq.n	8004084 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405c:	f7fd fd78 	bl	8001b50 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004064:	f7fd fd74 	bl	8001b50 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	@ 0x64
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e200      	b.n	8004478 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004076:	4b5d      	ldr	r3, [pc, #372]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0xe4>
 8004082:	e014      	b.n	80040ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fd fd64 	bl	8001b50 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800408c:	f7fd fd60 	bl	8001b50 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	@ 0x64
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e1ec      	b.n	8004478 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800409e:	4b53      	ldr	r3, [pc, #332]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x10c>
 80040aa:	e000      	b.n	80040ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d063      	beq.n	8004182 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040ba:	4b4c      	ldr	r3, [pc, #304]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00b      	beq.n	80040de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040c6:	4b49      	ldr	r3, [pc, #292]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f003 030c 	and.w	r3, r3, #12
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d11c      	bne.n	800410c <HAL_RCC_OscConfig+0x18c>
 80040d2:	4b46      	ldr	r3, [pc, #280]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d116      	bne.n	800410c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040de:	4b43      	ldr	r3, [pc, #268]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d005      	beq.n	80040f6 <HAL_RCC_OscConfig+0x176>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d001      	beq.n	80040f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e1c0      	b.n	8004478 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f6:	4b3d      	ldr	r3, [pc, #244]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	4939      	ldr	r1, [pc, #228]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8004106:	4313      	orrs	r3, r2
 8004108:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800410a:	e03a      	b.n	8004182 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d020      	beq.n	8004156 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004114:	4b36      	ldr	r3, [pc, #216]	@ (80041f0 <HAL_RCC_OscConfig+0x270>)
 8004116:	2201      	movs	r2, #1
 8004118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411a:	f7fd fd19 	bl	8001b50 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004122:	f7fd fd15 	bl	8001b50 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e1a1      	b.n	8004478 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004134:	4b2d      	ldr	r3, [pc, #180]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0f0      	beq.n	8004122 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004140:	4b2a      	ldr	r3, [pc, #168]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	4927      	ldr	r1, [pc, #156]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8004150:	4313      	orrs	r3, r2
 8004152:	600b      	str	r3, [r1, #0]
 8004154:	e015      	b.n	8004182 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004156:	4b26      	ldr	r3, [pc, #152]	@ (80041f0 <HAL_RCC_OscConfig+0x270>)
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415c:	f7fd fcf8 	bl	8001b50 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004164:	f7fd fcf4 	bl	8001b50 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e180      	b.n	8004478 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004176:	4b1d      	ldr	r3, [pc, #116]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d03a      	beq.n	8004204 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d019      	beq.n	80041ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004196:	4b17      	ldr	r3, [pc, #92]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 8004198:	2201      	movs	r2, #1
 800419a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800419c:	f7fd fcd8 	bl	8001b50 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041a4:	f7fd fcd4 	bl	8001b50 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e160      	b.n	8004478 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b6:	4b0d      	ldr	r3, [pc, #52]	@ (80041ec <HAL_RCC_OscConfig+0x26c>)
 80041b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041c2:	2001      	movs	r0, #1
 80041c4:	f000 face 	bl	8004764 <RCC_Delay>
 80041c8:	e01c      	b.n	8004204 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ca:	4b0a      	ldr	r3, [pc, #40]	@ (80041f4 <HAL_RCC_OscConfig+0x274>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d0:	f7fd fcbe 	bl	8001b50 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d6:	e00f      	b.n	80041f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d8:	f7fd fcba 	bl	8001b50 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d908      	bls.n	80041f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e146      	b.n	8004478 <HAL_RCC_OscConfig+0x4f8>
 80041ea:	bf00      	nop
 80041ec:	40021000 	.word	0x40021000
 80041f0:	42420000 	.word	0x42420000
 80041f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f8:	4b92      	ldr	r3, [pc, #584]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e9      	bne.n	80041d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b00      	cmp	r3, #0
 800420e:	f000 80a6 	beq.w	800435e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004212:	2300      	movs	r3, #0
 8004214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004216:	4b8b      	ldr	r3, [pc, #556]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10d      	bne.n	800423e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004222:	4b88      	ldr	r3, [pc, #544]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	4a87      	ldr	r2, [pc, #540]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 8004228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800422c:	61d3      	str	r3, [r2, #28]
 800422e:	4b85      	ldr	r3, [pc, #532]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800423a:	2301      	movs	r3, #1
 800423c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423e:	4b82      	ldr	r3, [pc, #520]	@ (8004448 <HAL_RCC_OscConfig+0x4c8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d118      	bne.n	800427c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800424a:	4b7f      	ldr	r3, [pc, #508]	@ (8004448 <HAL_RCC_OscConfig+0x4c8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a7e      	ldr	r2, [pc, #504]	@ (8004448 <HAL_RCC_OscConfig+0x4c8>)
 8004250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004256:	f7fd fc7b 	bl	8001b50 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425e:	f7fd fc77 	bl	8001b50 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b64      	cmp	r3, #100	@ 0x64
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e103      	b.n	8004478 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004270:	4b75      	ldr	r3, [pc, #468]	@ (8004448 <HAL_RCC_OscConfig+0x4c8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f0      	beq.n	800425e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d106      	bne.n	8004292 <HAL_RCC_OscConfig+0x312>
 8004284:	4b6f      	ldr	r3, [pc, #444]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	4a6e      	ldr	r2, [pc, #440]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	6213      	str	r3, [r2, #32]
 8004290:	e02d      	b.n	80042ee <HAL_RCC_OscConfig+0x36e>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10c      	bne.n	80042b4 <HAL_RCC_OscConfig+0x334>
 800429a:	4b6a      	ldr	r3, [pc, #424]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	4a69      	ldr	r2, [pc, #420]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 80042a0:	f023 0301 	bic.w	r3, r3, #1
 80042a4:	6213      	str	r3, [r2, #32]
 80042a6:	4b67      	ldr	r3, [pc, #412]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	4a66      	ldr	r2, [pc, #408]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 80042ac:	f023 0304 	bic.w	r3, r3, #4
 80042b0:	6213      	str	r3, [r2, #32]
 80042b2:	e01c      	b.n	80042ee <HAL_RCC_OscConfig+0x36e>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	2b05      	cmp	r3, #5
 80042ba:	d10c      	bne.n	80042d6 <HAL_RCC_OscConfig+0x356>
 80042bc:	4b61      	ldr	r3, [pc, #388]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	4a60      	ldr	r2, [pc, #384]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 80042c2:	f043 0304 	orr.w	r3, r3, #4
 80042c6:	6213      	str	r3, [r2, #32]
 80042c8:	4b5e      	ldr	r3, [pc, #376]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	4a5d      	ldr	r2, [pc, #372]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	6213      	str	r3, [r2, #32]
 80042d4:	e00b      	b.n	80042ee <HAL_RCC_OscConfig+0x36e>
 80042d6:	4b5b      	ldr	r3, [pc, #364]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	4a5a      	ldr	r2, [pc, #360]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 80042dc:	f023 0301 	bic.w	r3, r3, #1
 80042e0:	6213      	str	r3, [r2, #32]
 80042e2:	4b58      	ldr	r3, [pc, #352]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	4a57      	ldr	r2, [pc, #348]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 80042e8:	f023 0304 	bic.w	r3, r3, #4
 80042ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d015      	beq.n	8004322 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f6:	f7fd fc2b 	bl	8001b50 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fc:	e00a      	b.n	8004314 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fe:	f7fd fc27 	bl	8001b50 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800430c:	4293      	cmp	r3, r2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e0b1      	b.n	8004478 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004314:	4b4b      	ldr	r3, [pc, #300]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0ee      	beq.n	80042fe <HAL_RCC_OscConfig+0x37e>
 8004320:	e014      	b.n	800434c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004322:	f7fd fc15 	bl	8001b50 <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004328:	e00a      	b.n	8004340 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432a:	f7fd fc11 	bl	8001b50 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004338:	4293      	cmp	r3, r2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e09b      	b.n	8004478 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004340:	4b40      	ldr	r3, [pc, #256]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1ee      	bne.n	800432a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800434c:	7dfb      	ldrb	r3, [r7, #23]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d105      	bne.n	800435e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004352:	4b3c      	ldr	r3, [pc, #240]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	4a3b      	ldr	r2, [pc, #236]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 8004358:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800435c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 8087 	beq.w	8004476 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004368:	4b36      	ldr	r3, [pc, #216]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f003 030c 	and.w	r3, r3, #12
 8004370:	2b08      	cmp	r3, #8
 8004372:	d061      	beq.n	8004438 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d146      	bne.n	800440a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437c:	4b33      	ldr	r3, [pc, #204]	@ (800444c <HAL_RCC_OscConfig+0x4cc>)
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004382:	f7fd fbe5 	bl	8001b50 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438a:	f7fd fbe1 	bl	8001b50 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e06d      	b.n	8004478 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800439c:	4b29      	ldr	r3, [pc, #164]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f0      	bne.n	800438a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b0:	d108      	bne.n	80043c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043b2:	4b24      	ldr	r3, [pc, #144]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	4921      	ldr	r1, [pc, #132]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a19      	ldr	r1, [r3, #32]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	430b      	orrs	r3, r1
 80043d6:	491b      	ldr	r1, [pc, #108]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043dc:	4b1b      	ldr	r3, [pc, #108]	@ (800444c <HAL_RCC_OscConfig+0x4cc>)
 80043de:	2201      	movs	r2, #1
 80043e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e2:	f7fd fbb5 	bl	8001b50 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ea:	f7fd fbb1 	bl	8001b50 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e03d      	b.n	8004478 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043fc:	4b11      	ldr	r3, [pc, #68]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f0      	beq.n	80043ea <HAL_RCC_OscConfig+0x46a>
 8004408:	e035      	b.n	8004476 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440a:	4b10      	ldr	r3, [pc, #64]	@ (800444c <HAL_RCC_OscConfig+0x4cc>)
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004410:	f7fd fb9e 	bl	8001b50 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004418:	f7fd fb9a 	bl	8001b50 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e026      	b.n	8004478 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800442a:	4b06      	ldr	r3, [pc, #24]	@ (8004444 <HAL_RCC_OscConfig+0x4c4>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x498>
 8004436:	e01e      	b.n	8004476 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d107      	bne.n	8004450 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e019      	b.n	8004478 <HAL_RCC_OscConfig+0x4f8>
 8004444:	40021000 	.word	0x40021000
 8004448:	40007000 	.word	0x40007000
 800444c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004450:	4b0b      	ldr	r3, [pc, #44]	@ (8004480 <HAL_RCC_OscConfig+0x500>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	429a      	cmp	r2, r3
 8004462:	d106      	bne.n	8004472 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446e:	429a      	cmp	r2, r3
 8004470:	d001      	beq.n	8004476 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40021000 	.word	0x40021000

08004484 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0d0      	b.n	800463a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004498:	4b6a      	ldr	r3, [pc, #424]	@ (8004644 <HAL_RCC_ClockConfig+0x1c0>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d910      	bls.n	80044c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a6:	4b67      	ldr	r3, [pc, #412]	@ (8004644 <HAL_RCC_ClockConfig+0x1c0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f023 0207 	bic.w	r2, r3, #7
 80044ae:	4965      	ldr	r1, [pc, #404]	@ (8004644 <HAL_RCC_ClockConfig+0x1c0>)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b6:	4b63      	ldr	r3, [pc, #396]	@ (8004644 <HAL_RCC_ClockConfig+0x1c0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d001      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0b8      	b.n	800463a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d020      	beq.n	8004516 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044e0:	4b59      	ldr	r3, [pc, #356]	@ (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	4a58      	ldr	r2, [pc, #352]	@ (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 80044e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80044ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044f8:	4b53      	ldr	r3, [pc, #332]	@ (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	4a52      	ldr	r2, [pc, #328]	@ (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 80044fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004502:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004504:	4b50      	ldr	r3, [pc, #320]	@ (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	494d      	ldr	r1, [pc, #308]	@ (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 8004512:	4313      	orrs	r3, r2
 8004514:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d040      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d107      	bne.n	800453a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452a:	4b47      	ldr	r3, [pc, #284]	@ (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d115      	bne.n	8004562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e07f      	b.n	800463a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d107      	bne.n	8004552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004542:	4b41      	ldr	r3, [pc, #260]	@ (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e073      	b.n	800463a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004552:	4b3d      	ldr	r3, [pc, #244]	@ (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e06b      	b.n	800463a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004562:	4b39      	ldr	r3, [pc, #228]	@ (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f023 0203 	bic.w	r2, r3, #3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	4936      	ldr	r1, [pc, #216]	@ (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 8004570:	4313      	orrs	r3, r2
 8004572:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004574:	f7fd faec 	bl	8001b50 <HAL_GetTick>
 8004578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457a:	e00a      	b.n	8004592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800457c:	f7fd fae8 	bl	8001b50 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800458a:	4293      	cmp	r3, r2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e053      	b.n	800463a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004592:	4b2d      	ldr	r3, [pc, #180]	@ (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 020c 	and.w	r2, r3, #12
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d1eb      	bne.n	800457c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045a4:	4b27      	ldr	r3, [pc, #156]	@ (8004644 <HAL_RCC_ClockConfig+0x1c0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d210      	bcs.n	80045d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b2:	4b24      	ldr	r3, [pc, #144]	@ (8004644 <HAL_RCC_ClockConfig+0x1c0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f023 0207 	bic.w	r2, r3, #7
 80045ba:	4922      	ldr	r1, [pc, #136]	@ (8004644 <HAL_RCC_ClockConfig+0x1c0>)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	4313      	orrs	r3, r2
 80045c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c2:	4b20      	ldr	r3, [pc, #128]	@ (8004644 <HAL_RCC_ClockConfig+0x1c0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d001      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e032      	b.n	800463a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045e0:	4b19      	ldr	r3, [pc, #100]	@ (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	4916      	ldr	r1, [pc, #88]	@ (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d009      	beq.n	8004612 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045fe:	4b12      	ldr	r3, [pc, #72]	@ (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	490e      	ldr	r1, [pc, #56]	@ (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 800460e:	4313      	orrs	r3, r2
 8004610:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004612:	f000 f821 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 8004616:	4602      	mov	r2, r0
 8004618:	4b0b      	ldr	r3, [pc, #44]	@ (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	091b      	lsrs	r3, r3, #4
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	490a      	ldr	r1, [pc, #40]	@ (800464c <HAL_RCC_ClockConfig+0x1c8>)
 8004624:	5ccb      	ldrb	r3, [r1, r3]
 8004626:	fa22 f303 	lsr.w	r3, r2, r3
 800462a:	4a09      	ldr	r2, [pc, #36]	@ (8004650 <HAL_RCC_ClockConfig+0x1cc>)
 800462c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800462e:	4b09      	ldr	r3, [pc, #36]	@ (8004654 <HAL_RCC_ClockConfig+0x1d0>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f7fd fa4a 	bl	8001acc <HAL_InitTick>

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40022000 	.word	0x40022000
 8004648:	40021000 	.word	0x40021000
 800464c:	08009024 	.word	0x08009024
 8004650:	20000000 	.word	0x20000000
 8004654:	20000004 	.word	0x20000004

08004658 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	2300      	movs	r3, #0
 8004664:	60bb      	str	r3, [r7, #8]
 8004666:	2300      	movs	r3, #0
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	2300      	movs	r3, #0
 800466c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004672:	4b1e      	ldr	r3, [pc, #120]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x94>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 030c 	and.w	r3, r3, #12
 800467e:	2b04      	cmp	r3, #4
 8004680:	d002      	beq.n	8004688 <HAL_RCC_GetSysClockFreq+0x30>
 8004682:	2b08      	cmp	r3, #8
 8004684:	d003      	beq.n	800468e <HAL_RCC_GetSysClockFreq+0x36>
 8004686:	e027      	b.n	80046d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004688:	4b19      	ldr	r3, [pc, #100]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800468a:	613b      	str	r3, [r7, #16]
      break;
 800468c:	e027      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	0c9b      	lsrs	r3, r3, #18
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	4a17      	ldr	r2, [pc, #92]	@ (80046f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004698:	5cd3      	ldrb	r3, [r2, r3]
 800469a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d010      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046a6:	4b11      	ldr	r3, [pc, #68]	@ (80046ec <HAL_RCC_GetSysClockFreq+0x94>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	0c5b      	lsrs	r3, r3, #17
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	4a11      	ldr	r2, [pc, #68]	@ (80046f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80046b2:	5cd3      	ldrb	r3, [r2, r3]
 80046b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a0d      	ldr	r2, [pc, #52]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80046ba:	fb03 f202 	mul.w	r2, r3, r2
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	e004      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a0c      	ldr	r2, [pc, #48]	@ (80046fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80046cc:	fb02 f303 	mul.w	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	613b      	str	r3, [r7, #16]
      break;
 80046d6:	e002      	b.n	80046de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046d8:	4b05      	ldr	r3, [pc, #20]	@ (80046f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80046da:	613b      	str	r3, [r7, #16]
      break;
 80046dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046de:	693b      	ldr	r3, [r7, #16]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	371c      	adds	r7, #28
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bc80      	pop	{r7}
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40021000 	.word	0x40021000
 80046f0:	007a1200 	.word	0x007a1200
 80046f4:	0800903c 	.word	0x0800903c
 80046f8:	0800904c 	.word	0x0800904c
 80046fc:	003d0900 	.word	0x003d0900

08004700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004704:	4b02      	ldr	r3, [pc, #8]	@ (8004710 <HAL_RCC_GetHCLKFreq+0x10>)
 8004706:	681b      	ldr	r3, [r3, #0]
}
 8004708:	4618      	mov	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr
 8004710:	20000000 	.word	0x20000000

08004714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004718:	f7ff fff2 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 800471c:	4602      	mov	r2, r0
 800471e:	4b05      	ldr	r3, [pc, #20]	@ (8004734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	0a1b      	lsrs	r3, r3, #8
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	4903      	ldr	r1, [pc, #12]	@ (8004738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800472a:	5ccb      	ldrb	r3, [r1, r3]
 800472c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004730:	4618      	mov	r0, r3
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40021000 	.word	0x40021000
 8004738:	08009034 	.word	0x08009034

0800473c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004740:	f7ff ffde 	bl	8004700 <HAL_RCC_GetHCLKFreq>
 8004744:	4602      	mov	r2, r0
 8004746:	4b05      	ldr	r3, [pc, #20]	@ (800475c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	0adb      	lsrs	r3, r3, #11
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	4903      	ldr	r1, [pc, #12]	@ (8004760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004752:	5ccb      	ldrb	r3, [r1, r3]
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004758:	4618      	mov	r0, r3
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40021000 	.word	0x40021000
 8004760:	08009034 	.word	0x08009034

08004764 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800476c:	4b0a      	ldr	r3, [pc, #40]	@ (8004798 <RCC_Delay+0x34>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a0a      	ldr	r2, [pc, #40]	@ (800479c <RCC_Delay+0x38>)
 8004772:	fba2 2303 	umull	r2, r3, r2, r3
 8004776:	0a5b      	lsrs	r3, r3, #9
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	fb02 f303 	mul.w	r3, r2, r3
 800477e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004780:	bf00      	nop
  }
  while (Delay --);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	1e5a      	subs	r2, r3, #1
 8004786:	60fa      	str	r2, [r7, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1f9      	bne.n	8004780 <RCC_Delay+0x1c>
}
 800478c:	bf00      	nop
 800478e:	bf00      	nop
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr
 8004798:	20000000 	.word	0x20000000
 800479c:	10624dd3 	.word	0x10624dd3

080047a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	2300      	movs	r3, #0
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d07d      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80047bc:	2300      	movs	r3, #0
 80047be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c0:	4b4f      	ldr	r3, [pc, #316]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10d      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047cc:	4b4c      	ldr	r3, [pc, #304]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	4a4b      	ldr	r2, [pc, #300]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d6:	61d3      	str	r3, [r2, #28]
 80047d8:	4b49      	ldr	r3, [pc, #292]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e4:	2301      	movs	r3, #1
 80047e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e8:	4b46      	ldr	r3, [pc, #280]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d118      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047f4:	4b43      	ldr	r3, [pc, #268]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a42      	ldr	r2, [pc, #264]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004800:	f7fd f9a6 	bl	8001b50 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004806:	e008      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004808:	f7fd f9a2 	bl	8001b50 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b64      	cmp	r3, #100	@ 0x64
 8004814:	d901      	bls.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e06d      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481a:	4b3a      	ldr	r3, [pc, #232]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004826:	4b36      	ldr	r3, [pc, #216]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800482e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d02e      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	429a      	cmp	r2, r3
 8004842:	d027      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004844:	4b2e      	ldr	r3, [pc, #184]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800484c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800484e:	4b2e      	ldr	r3, [pc, #184]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004850:	2201      	movs	r2, #1
 8004852:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004854:	4b2c      	ldr	r3, [pc, #176]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800485a:	4a29      	ldr	r2, [pc, #164]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d014      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486a:	f7fd f971 	bl	8001b50 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004870:	e00a      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004872:	f7fd f96d 	bl	8001b50 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004880:	4293      	cmp	r3, r2
 8004882:	d901      	bls.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e036      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004888:	4b1d      	ldr	r3, [pc, #116]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ee      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004894:	4b1a      	ldr	r3, [pc, #104]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	4917      	ldr	r1, [pc, #92]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048a6:	7dfb      	ldrb	r3, [r7, #23]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d105      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ac:	4b14      	ldr	r3, [pc, #80]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	4a13      	ldr	r2, [pc, #76]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d008      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	490b      	ldr	r1, [pc, #44]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0310 	and.w	r3, r3, #16
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d008      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048e2:	4b07      	ldr	r3, [pc, #28]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	4904      	ldr	r1, [pc, #16]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40021000 	.word	0x40021000
 8004904:	40007000 	.word	0x40007000
 8004908:	42420440 	.word	0x42420440

0800490c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	2300      	movs	r3, #0
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	2300      	movs	r3, #0
 800491e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	2300      	movs	r3, #0
 8004926:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b10      	cmp	r3, #16
 800492c:	d00a      	beq.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b10      	cmp	r3, #16
 8004932:	f200 808a 	bhi.w	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d045      	beq.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d075      	beq.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004942:	e082      	b.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004944:	4b46      	ldr	r3, [pc, #280]	@ (8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800494a:	4b45      	ldr	r3, [pc, #276]	@ (8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d07b      	beq.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	0c9b      	lsrs	r3, r3, #18
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	4a41      	ldr	r2, [pc, #260]	@ (8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004960:	5cd3      	ldrb	r3, [r2, r3]
 8004962:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d015      	beq.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800496e:	4b3c      	ldr	r3, [pc, #240]	@ (8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	0c5b      	lsrs	r3, r3, #17
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	4a3b      	ldr	r2, [pc, #236]	@ (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800497a:	5cd3      	ldrb	r3, [r2, r3]
 800497c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00d      	beq.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004988:	4a38      	ldr	r2, [pc, #224]	@ (8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	fb02 f303 	mul.w	r3, r2, r3
 8004996:	61fb      	str	r3, [r7, #28]
 8004998:	e004      	b.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	4a34      	ldr	r2, [pc, #208]	@ (8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800499e:	fb02 f303 	mul.w	r3, r2, r3
 80049a2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80049a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049b0:	d102      	bne.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	61bb      	str	r3, [r7, #24]
      break;
 80049b6:	e04a      	b.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	4a2d      	ldr	r2, [pc, #180]	@ (8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80049be:	fba2 2303 	umull	r2, r3, r2, r3
 80049c2:	085b      	lsrs	r3, r3, #1
 80049c4:	61bb      	str	r3, [r7, #24]
      break;
 80049c6:	e042      	b.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80049c8:	4b25      	ldr	r3, [pc, #148]	@ (8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049d8:	d108      	bne.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80049e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049e8:	61bb      	str	r3, [r7, #24]
 80049ea:	e01f      	b.n	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049f6:	d109      	bne.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80049f8:	4b19      	ldr	r3, [pc, #100]	@ (8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d003      	beq.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004a04:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	e00f      	b.n	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a16:	d11c      	bne.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004a18:	4b11      	ldr	r3, [pc, #68]	@ (8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d016      	beq.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004a24:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004a28:	61bb      	str	r3, [r7, #24]
      break;
 8004a2a:	e012      	b.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004a2c:	e011      	b.n	8004a52 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004a2e:	f7ff fe85 	bl	800473c <HAL_RCC_GetPCLK2Freq>
 8004a32:	4602      	mov	r2, r0
 8004a34:	4b0a      	ldr	r3, [pc, #40]	@ (8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	0b9b      	lsrs	r3, r3, #14
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a46:	61bb      	str	r3, [r7, #24]
      break;
 8004a48:	e004      	b.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004a4a:	bf00      	nop
 8004a4c:	e002      	b.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004a4e:	bf00      	nop
 8004a50:	e000      	b.n	8004a54 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004a52:	bf00      	nop
    }
  }
  return (frequency);
 8004a54:	69bb      	ldr	r3, [r7, #24]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40021000 	.word	0x40021000
 8004a64:	08009050 	.word	0x08009050
 8004a68:	08009060 	.word	0x08009060
 8004a6c:	007a1200 	.word	0x007a1200
 8004a70:	003d0900 	.word	0x003d0900
 8004a74:	aaaaaaab 	.word	0xaaaaaaab

08004a78 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e07a      	b.n	8004b84 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	7c5b      	ldrb	r3, [r3, #17]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d105      	bne.n	8004aa4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fc fe04 	bl	80016ac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 faea 	bl	8005084 <HAL_RTC_WaitForSynchro>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d004      	beq.n	8004ac0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2204      	movs	r2, #4
 8004aba:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e061      	b.n	8004b84 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fba3 	bl	800520c <RTC_EnterInitMode>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d004      	beq.n	8004ad6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2204      	movs	r2, #4
 8004ad0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e056      	b.n	8004b84 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0207 	bic.w	r2, r2, #7
 8004ae4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d005      	beq.n	8004afa <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004aee:	4b27      	ldr	r3, [pc, #156]	@ (8004b8c <HAL_RTC_Init+0x114>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af2:	4a26      	ldr	r2, [pc, #152]	@ (8004b8c <HAL_RTC_Init+0x114>)
 8004af4:	f023 0301 	bic.w	r3, r3, #1
 8004af8:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004afa:	4b24      	ldr	r3, [pc, #144]	@ (8004b8c <HAL_RTC_Init+0x114>)
 8004afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afe:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	4921      	ldr	r1, [pc, #132]	@ (8004b8c <HAL_RTC_Init+0x114>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d003      	beq.n	8004b1e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	e00e      	b.n	8004b3c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004b1e:	2001      	movs	r0, #1
 8004b20:	f7ff fef4 	bl	800490c <HAL_RCCEx_GetPeriphCLKFreq>
 8004b24:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d104      	bne.n	8004b36 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2204      	movs	r2, #4
 8004b30:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e026      	b.n	8004b84 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	0c1a      	lsrs	r2, r3, #16
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f002 020f 	and.w	r2, r2, #15
 8004b48:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	b292      	uxth	r2, r2
 8004b52:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fb81 	bl	800525c <RTC_ExitInitMode>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d004      	beq.n	8004b6a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2204      	movs	r2, #4
 8004b64:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e00c      	b.n	8004b84 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004b82:	2300      	movs	r3, #0
  }
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40006c00 	.word	0x40006c00

08004b90 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b90:	b590      	push	{r4, r7, lr}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_RTC_SetTime+0x20>
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e080      	b.n	8004cb6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	7c1b      	ldrb	r3, [r3, #16]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_RTC_SetTime+0x30>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e07a      	b.n	8004cb6 <HAL_RTC_SetTime+0x126>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d113      	bne.n	8004bfa <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004bdc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	785b      	ldrb	r3, [r3, #1]
 8004be4:	4619      	mov	r1, r3
 8004be6:	460b      	mov	r3, r1
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	1a5b      	subs	r3, r3, r1
 8004bec:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004bee:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004bf4:	4413      	add	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	e01e      	b.n	8004c38 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fb71 	bl	80052e6 <RTC_Bcd2ToByte>
 8004c04:	4603      	mov	r3, r0
 8004c06:	461a      	mov	r2, r3
 8004c08:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8004c0c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	785b      	ldrb	r3, [r3, #1]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f000 fb66 	bl	80052e6 <RTC_Bcd2ToByte>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4613      	mov	r3, r2
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	1a9b      	subs	r3, r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004c26:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	789b      	ldrb	r3, [r3, #2]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 fb5a 	bl	80052e6 <RTC_Bcd2ToByte>
 8004c32:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004c34:	4423      	add	r3, r4
 8004c36:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004c38:	6979      	ldr	r1, [r7, #20]
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fa7f 	bl	800513e <RTC_WriteTimeCounter>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d007      	beq.n	8004c56 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2204      	movs	r2, #4
 8004c4a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e02f      	b.n	8004cb6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0205 	bic.w	r2, r2, #5
 8004c64:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 fa90 	bl	800518c <RTC_ReadAlarmCounter>
 8004c6c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d018      	beq.n	8004ca8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d214      	bcs.n	8004ca8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8004c84:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004c88:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004c8a:	6939      	ldr	r1, [r7, #16]
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 fa96 	bl	80051be <RTC_WriteAlarmCounter>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d007      	beq.n	8004ca8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2204      	movs	r2, #4
 8004c9c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e006      	b.n	8004cb6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
  }
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd90      	pop	{r4, r7, pc}
	...

08004cc0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61fb      	str	r3, [r7, #28]
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	2300      	movs	r3, #0
 8004cda:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <HAL_RTC_GetTime+0x28>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0b5      	b.n	8004e58 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e0ac      	b.n	8004e58 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 f9ed 	bl	80050de <RTC_ReadTimeCounter>
 8004d04:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	4a55      	ldr	r2, [pc, #340]	@ (8004e60 <HAL_RTC_GetTime+0x1a0>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	0adb      	lsrs	r3, r3, #11
 8004d10:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4b52      	ldr	r3, [pc, #328]	@ (8004e60 <HAL_RTC_GetTime+0x1a0>)
 8004d16:	fba3 1302 	umull	r1, r3, r3, r2
 8004d1a:	0adb      	lsrs	r3, r3, #11
 8004d1c:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8004d20:	fb01 f303 	mul.w	r3, r1, r3
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	4a4f      	ldr	r2, [pc, #316]	@ (8004e64 <HAL_RTC_GetTime+0x1a4>)
 8004d28:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2c:	095b      	lsrs	r3, r3, #5
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	4a4a      	ldr	r2, [pc, #296]	@ (8004e60 <HAL_RTC_GetTime+0x1a0>)
 8004d38:	fba2 1203 	umull	r1, r2, r2, r3
 8004d3c:	0ad2      	lsrs	r2, r2, #11
 8004d3e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8004d42:	fb01 f202 	mul.w	r2, r1, r2
 8004d46:	1a9a      	subs	r2, r3, r2
 8004d48:	4b46      	ldr	r3, [pc, #280]	@ (8004e64 <HAL_RTC_GetTime+0x1a4>)
 8004d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d4e:	0959      	lsrs	r1, r3, #5
 8004d50:	460b      	mov	r3, r1
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	1a5b      	subs	r3, r3, r1
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	1ad1      	subs	r1, r2, r3
 8004d5a:	b2ca      	uxtb	r2, r1
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b17      	cmp	r3, #23
 8004d64:	d955      	bls.n	8004e12 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4a3f      	ldr	r2, [pc, #252]	@ (8004e68 <HAL_RTC_GetTime+0x1a8>)
 8004d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6e:	091b      	lsrs	r3, r3, #4
 8004d70:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004d72:	6939      	ldr	r1, [r7, #16]
 8004d74:	4b3c      	ldr	r3, [pc, #240]	@ (8004e68 <HAL_RTC_GetTime+0x1a8>)
 8004d76:	fba3 2301 	umull	r2, r3, r3, r1
 8004d7a:	091a      	lsrs	r2, r3, #4
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	4413      	add	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	1aca      	subs	r2, r1, r3
 8004d86:	b2d2      	uxtb	r2, r2
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f9fd 	bl	800518c <RTC_ReadAlarmCounter>
 8004d92:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d008      	beq.n	8004dae <HAL_RTC_GetTime+0xee>
 8004d9c:	69fa      	ldr	r2, [r7, #28]
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d904      	bls.n	8004dae <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	e002      	b.n	8004db4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004dae:	f04f 33ff 	mov.w	r3, #4294967295
 8004db2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	4a2d      	ldr	r2, [pc, #180]	@ (8004e6c <HAL_RTC_GetTime+0x1ac>)
 8004db8:	fb02 f303 	mul.w	r3, r2, r3
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004dc2:	69b9      	ldr	r1, [r7, #24]
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f9ba 	bl	800513e <RTC_WriteTimeCounter>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e041      	b.n	8004e58 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dda:	d00c      	beq.n	8004df6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004ddc:	69fa      	ldr	r2, [r7, #28]
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	4413      	add	r3, r2
 8004de2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004de4:	69f9      	ldr	r1, [r7, #28]
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f9e9 	bl	80051be <RTC_WriteAlarmCounter>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e030      	b.n	8004e58 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004df6:	69f9      	ldr	r1, [r7, #28]
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f9e0 	bl	80051be <RTC_WriteAlarmCounter>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e027      	b.n	8004e58 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004e08:	6979      	ldr	r1, [r7, #20]
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 fa88 	bl	8005320 <RTC_DateUpdate>
 8004e10:	e003      	b.n	8004e1a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d01a      	beq.n	8004e56 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fa41 	bl	80052ac <RTC_ByteToBcd2>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	785b      	ldrb	r3, [r3, #1]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fa38 	bl	80052ac <RTC_ByteToBcd2>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	461a      	mov	r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	789b      	ldrb	r3, [r3, #2]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fa2f 	bl	80052ac <RTC_ByteToBcd2>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	461a      	mov	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3720      	adds	r7, #32
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	91a2b3c5 	.word	0x91a2b3c5
 8004e64:	88888889 	.word	0x88888889
 8004e68:	aaaaaaab 	.word	0xaaaaaaab
 8004e6c:	00015180 	.word	0x00015180

08004e70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	61fb      	str	r3, [r7, #28]
 8004e80:	2300      	movs	r3, #0
 8004e82:	61bb      	str	r3, [r7, #24]
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_RTC_SetDate+0x24>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e097      	b.n	8004fc8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	7c1b      	ldrb	r3, [r3, #16]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_RTC_SetDate+0x34>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e091      	b.n	8004fc8 <HAL_RTC_SetDate+0x158>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2202      	movs	r2, #2
 8004eae:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	78da      	ldrb	r2, [r3, #3]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	785a      	ldrb	r2, [r3, #1]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	789a      	ldrb	r2, [r3, #2]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	739a      	strb	r2, [r3, #14]
 8004ece:	e01a      	b.n	8004f06 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	78db      	ldrb	r3, [r3, #3]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 fa06 	bl	80052e6 <RTC_Bcd2ToByte>
 8004eda:	4603      	mov	r3, r0
 8004edc:	461a      	mov	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 f9fd 	bl	80052e6 <RTC_Bcd2ToByte>
 8004eec:	4603      	mov	r3, r0
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	789b      	ldrb	r3, [r3, #2]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 f9f4 	bl	80052e6 <RTC_Bcd2ToByte>
 8004efe:	4603      	mov	r3, r0
 8004f00:	461a      	mov	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	7bdb      	ldrb	r3, [r3, #15]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	7b59      	ldrb	r1, [r3, #13]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	7b9b      	ldrb	r3, [r3, #14]
 8004f14:	461a      	mov	r2, r3
 8004f16:	f000 fadf 	bl	80054d8 <RTC_WeekDayNum>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	7b1a      	ldrb	r2, [r3, #12]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f8d7 	bl	80050de <RTC_ReadTimeCounter>
 8004f30:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	4a26      	ldr	r2, [pc, #152]	@ (8004fd0 <HAL_RTC_SetDate+0x160>)
 8004f36:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3a:	0adb      	lsrs	r3, r3, #11
 8004f3c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b18      	cmp	r3, #24
 8004f42:	d93a      	bls.n	8004fba <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4a23      	ldr	r2, [pc, #140]	@ (8004fd4 <HAL_RTC_SetDate+0x164>)
 8004f48:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4c:	091b      	lsrs	r3, r3, #4
 8004f4e:	4a22      	ldr	r2, [pc, #136]	@ (8004fd8 <HAL_RTC_SetDate+0x168>)
 8004f50:	fb02 f303 	mul.w	r3, r2, r3
 8004f54:	69fa      	ldr	r2, [r7, #28]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004f5a:	69f9      	ldr	r1, [r7, #28]
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f8ee 	bl	800513e <RTC_WriteTimeCounter>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d007      	beq.n	8004f78 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2204      	movs	r2, #4
 8004f6c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e027      	b.n	8004fc8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 f907 	bl	800518c <RTC_ReadAlarmCounter>
 8004f7e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f86:	d018      	beq.n	8004fba <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d214      	bcs.n	8004fba <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8004f96:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8004f9a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004f9c:	69b9      	ldr	r1, [r7, #24]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 f90d 	bl	80051be <RTC_WriteAlarmCounter>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2204      	movs	r2, #4
 8004fae:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e006      	b.n	8004fc8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3720      	adds	r7, #32
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	91a2b3c5 	.word	0x91a2b3c5
 8004fd4:	aaaaaaab 	.word	0xaaaaaaab
 8004fd8:	00015180 	.word	0x00015180

08004fdc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004fe8:	f107 0314 	add.w	r3, r7, #20
 8004fec:	2100      	movs	r1, #0
 8004fee:	460a      	mov	r2, r1
 8004ff0:	801a      	strh	r2, [r3, #0]
 8004ff2:	460a      	mov	r2, r1
 8004ff4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_RTC_GetDate+0x26>
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e03a      	b.n	800507c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005006:	f107 0314 	add.w	r3, r7, #20
 800500a:	2200      	movs	r2, #0
 800500c:	4619      	mov	r1, r3
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f7ff fe56 	bl	8004cc0 <HAL_RTC_GetTime>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e02e      	b.n	800507c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	7b1a      	ldrb	r2, [r3, #12]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	7bda      	ldrb	r2, [r3, #15]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	7b5a      	ldrb	r2, [r3, #13]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	7b9a      	ldrb	r2, [r3, #14]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01a      	beq.n	800507a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	78db      	ldrb	r3, [r3, #3]
 8005048:	4618      	mov	r0, r3
 800504a:	f000 f92f 	bl	80052ac <RTC_ByteToBcd2>
 800504e:	4603      	mov	r3, r0
 8005050:	461a      	mov	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	785b      	ldrb	r3, [r3, #1]
 800505a:	4618      	mov	r0, r3
 800505c:	f000 f926 	bl	80052ac <RTC_ByteToBcd2>
 8005060:	4603      	mov	r3, r0
 8005062:	461a      	mov	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	789b      	ldrb	r3, [r3, #2]
 800506c:	4618      	mov	r0, r3
 800506e:	f000 f91d 	bl	80052ac <RTC_ByteToBcd2>
 8005072:	4603      	mov	r3, r0
 8005074:	461a      	mov	r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e01d      	b.n	80050d6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0208 	bic.w	r2, r2, #8
 80050a8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80050aa:	f7fc fd51 	bl	8001b50 <HAL_GetTick>
 80050ae:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80050b0:	e009      	b.n	80050c6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80050b2:	f7fc fd4d 	bl	8001b50 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80050c0:	d901      	bls.n	80050c6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e007      	b.n	80050d6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f003 0308 	and.w	r3, r3, #8
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0ee      	beq.n	80050b2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80050de:	b480      	push	{r7}
 80050e0:	b087      	sub	sp, #28
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	827b      	strh	r3, [r7, #18]
 80050ea:	2300      	movs	r3, #0
 80050ec:	823b      	strh	r3, [r7, #16]
 80050ee:	2300      	movs	r3, #0
 80050f0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800510e:	8a7a      	ldrh	r2, [r7, #18]
 8005110:	8a3b      	ldrh	r3, [r7, #16]
 8005112:	429a      	cmp	r2, r3
 8005114:	d008      	beq.n	8005128 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005116:	8a3b      	ldrh	r3, [r7, #16]
 8005118:	041a      	lsls	r2, r3, #16
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	b29b      	uxth	r3, r3
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	e004      	b.n	8005132 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005128:	8a7b      	ldrh	r3, [r7, #18]
 800512a:	041a      	lsls	r2, r3, #16
 800512c:	89fb      	ldrh	r3, [r7, #14]
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005132:	697b      	ldr	r3, [r7, #20]
}
 8005134:	4618      	mov	r0, r3
 8005136:	371c      	adds	r7, #28
 8005138:	46bd      	mov	sp, r7
 800513a:	bc80      	pop	{r7}
 800513c:	4770      	bx	lr

0800513e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f85d 	bl	800520c <RTC_EnterInitMode>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	73fb      	strb	r3, [r7, #15]
 800515c:	e011      	b.n	8005182 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	0c12      	lsrs	r2, r2, #16
 8005166:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	b292      	uxth	r2, r2
 8005170:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f872 	bl	800525c <RTC_ExitInitMode>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005182:	7bfb      	ldrb	r3, [r7, #15]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	81fb      	strh	r3, [r7, #14]
 8005198:	2300      	movs	r3, #0
 800519a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051aa:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80051ac:	89fb      	ldrh	r3, [r7, #14]
 80051ae:	041a      	lsls	r2, r3, #16
 80051b0:	89bb      	ldrh	r3, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr

080051be <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b084      	sub	sp, #16
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f81d 	bl	800520c <RTC_EnterInitMode>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	73fb      	strb	r3, [r7, #15]
 80051dc:	e011      	b.n	8005202 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	0c12      	lsrs	r2, r2, #16
 80051e6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	b292      	uxth	r2, r2
 80051f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f832 	bl	800525c <RTC_ExitInitMode>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005202:	7bfb      	ldrb	r3, [r7, #15]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005218:	f7fc fc9a 	bl	8001b50 <HAL_GetTick>
 800521c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800521e:	e009      	b.n	8005234 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005220:	f7fc fc96 	bl	8001b50 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800522e:	d901      	bls.n	8005234 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e00f      	b.n	8005254 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0ee      	beq.n	8005220 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f042 0210 	orr.w	r2, r2, #16
 8005250:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0210 	bic.w	r2, r2, #16
 8005276:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005278:	f7fc fc6a 	bl	8001b50 <HAL_GetTick>
 800527c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800527e:	e009      	b.n	8005294 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005280:	f7fc fc66 	bl	8001b50 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800528e:	d901      	bls.n	8005294 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e007      	b.n	80052a4 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f003 0320 	and.w	r3, r3, #32
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0ee      	beq.n	8005280 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80052ba:	e005      	b.n	80052c8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3301      	adds	r3, #1
 80052c0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	3b0a      	subs	r3, #10
 80052c6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80052c8:	79fb      	ldrb	r3, [r7, #7]
 80052ca:	2b09      	cmp	r3, #9
 80052cc:	d8f6      	bhi.n	80052bc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	79fb      	ldrb	r3, [r7, #7]
 80052d8:	4313      	orrs	r3, r2
 80052da:	b2db      	uxtb	r3, r3
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bc80      	pop	{r7}
 80052e4:	4770      	bx	lr

080052e6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b085      	sub	sp, #20
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	4603      	mov	r3, r0
 80052ee:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	091b      	lsrs	r3, r3, #4
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	461a      	mov	r2, r3
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	b2da      	uxtb	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	4413      	add	r3, r2
 8005314:	b2db      	uxtb	r3, r3
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr

08005320 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	2300      	movs	r3, #0
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	7bdb      	ldrb	r3, [r3, #15]
 800533e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	7b5b      	ldrb	r3, [r3, #13]
 8005344:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	7b9b      	ldrb	r3, [r3, #14]
 800534a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800534c:	2300      	movs	r3, #0
 800534e:	60bb      	str	r3, [r7, #8]
 8005350:	e06f      	b.n	8005432 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d011      	beq.n	800537c <RTC_DateUpdate+0x5c>
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	2b03      	cmp	r3, #3
 800535c:	d00e      	beq.n	800537c <RTC_DateUpdate+0x5c>
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	2b05      	cmp	r3, #5
 8005362:	d00b      	beq.n	800537c <RTC_DateUpdate+0x5c>
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	2b07      	cmp	r3, #7
 8005368:	d008      	beq.n	800537c <RTC_DateUpdate+0x5c>
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d005      	beq.n	800537c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b0a      	cmp	r3, #10
 8005374:	d002      	beq.n	800537c <RTC_DateUpdate+0x5c>
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b0c      	cmp	r3, #12
 800537a:	d117      	bne.n	80053ac <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b1e      	cmp	r3, #30
 8005380:	d803      	bhi.n	800538a <RTC_DateUpdate+0x6a>
      {
        day++;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	3301      	adds	r3, #1
 8005386:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005388:	e050      	b.n	800542c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b0c      	cmp	r3, #12
 800538e:	d005      	beq.n	800539c <RTC_DateUpdate+0x7c>
        {
          month++;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	3301      	adds	r3, #1
 8005394:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005396:	2301      	movs	r3, #1
 8005398:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800539a:	e047      	b.n	800542c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800539c:	2301      	movs	r3, #1
 800539e:	613b      	str	r3, [r7, #16]
          day = 1U;
 80053a0:	2301      	movs	r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]
          year++;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	3301      	adds	r3, #1
 80053a8:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80053aa:	e03f      	b.n	800542c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d008      	beq.n	80053c4 <RTC_DateUpdate+0xa4>
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	2b06      	cmp	r3, #6
 80053b6:	d005      	beq.n	80053c4 <RTC_DateUpdate+0xa4>
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	2b09      	cmp	r3, #9
 80053bc:	d002      	beq.n	80053c4 <RTC_DateUpdate+0xa4>
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b0b      	cmp	r3, #11
 80053c2:	d10c      	bne.n	80053de <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b1d      	cmp	r3, #29
 80053c8:	d803      	bhi.n	80053d2 <RTC_DateUpdate+0xb2>
      {
        day++;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3301      	adds	r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80053d0:	e02c      	b.n	800542c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	3301      	adds	r3, #1
 80053d6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80053d8:	2301      	movs	r3, #1
 80053da:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80053dc:	e026      	b.n	800542c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d123      	bne.n	800542c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b1b      	cmp	r3, #27
 80053e8:	d803      	bhi.n	80053f2 <RTC_DateUpdate+0xd2>
      {
        day++;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	3301      	adds	r3, #1
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	e01c      	b.n	800542c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b1c      	cmp	r3, #28
 80053f6:	d111      	bne.n	800541c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 f839 	bl	8005474 <RTC_IsLeapYear>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3301      	adds	r3, #1
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	e00d      	b.n	800542c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	3301      	adds	r3, #1
 8005414:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005416:	2301      	movs	r3, #1
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	e007      	b.n	800542c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b1d      	cmp	r3, #29
 8005420:	d104      	bne.n	800542c <RTC_DateUpdate+0x10c>
      {
        month++;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	3301      	adds	r3, #1
 8005426:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005428:	2301      	movs	r3, #1
 800542a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	3301      	adds	r3, #1
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d38b      	bcc.n	8005352 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	b2da      	uxtb	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	b2da      	uxtb	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	b2da      	uxtb	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	4619      	mov	r1, r3
 800545c:	6978      	ldr	r0, [r7, #20]
 800545e:	f000 f83b 	bl	80054d8 <RTC_WeekDayNum>
 8005462:	4603      	mov	r3, r0
 8005464:	461a      	mov	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	731a      	strb	r2, [r3, #12]
}
 800546a:	bf00      	nop
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	4603      	mov	r3, r0
 800547c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800547e:	88fb      	ldrh	r3, [r7, #6]
 8005480:	f003 0303 	and.w	r3, r3, #3
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	e01d      	b.n	80054ca <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800548e:	88fb      	ldrh	r3, [r7, #6]
 8005490:	4a10      	ldr	r2, [pc, #64]	@ (80054d4 <RTC_IsLeapYear+0x60>)
 8005492:	fba2 1203 	umull	r1, r2, r2, r3
 8005496:	0952      	lsrs	r2, r2, #5
 8005498:	2164      	movs	r1, #100	@ 0x64
 800549a:	fb01 f202 	mul.w	r2, r1, r2
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e00f      	b.n	80054ca <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80054aa:	88fb      	ldrh	r3, [r7, #6]
 80054ac:	4a09      	ldr	r2, [pc, #36]	@ (80054d4 <RTC_IsLeapYear+0x60>)
 80054ae:	fba2 1203 	umull	r1, r2, r2, r3
 80054b2:	09d2      	lsrs	r2, r2, #7
 80054b4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80054b8:	fb01 f202 	mul.w	r2, r1, r2
 80054bc:	1a9b      	subs	r3, r3, r2
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e000      	b.n	80054ca <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80054c8:	2300      	movs	r3, #0
  }
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr
 80054d4:	51eb851f 	.word	0x51eb851f

080054d8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	70fb      	strb	r3, [r7, #3]
 80054e4:	4613      	mov	r3, r2
 80054e6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60bb      	str	r3, [r7, #8]
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80054f6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80054f8:	78fb      	ldrb	r3, [r7, #3]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d82d      	bhi.n	800555a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80054fe:	78fa      	ldrb	r2, [r7, #3]
 8005500:	4613      	mov	r3, r2
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	4413      	add	r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	1a9b      	subs	r3, r3, r2
 800550a:	4a2c      	ldr	r2, [pc, #176]	@ (80055bc <RTC_WeekDayNum+0xe4>)
 800550c:	fba2 2303 	umull	r2, r3, r2, r3
 8005510:	085a      	lsrs	r2, r3, #1
 8005512:	78bb      	ldrb	r3, [r7, #2]
 8005514:	441a      	add	r2, r3
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	441a      	add	r2, r3
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	3b01      	subs	r3, #1
 800551e:	089b      	lsrs	r3, r3, #2
 8005520:	441a      	add	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	3b01      	subs	r3, #1
 8005526:	4926      	ldr	r1, [pc, #152]	@ (80055c0 <RTC_WeekDayNum+0xe8>)
 8005528:	fba1 1303 	umull	r1, r3, r1, r3
 800552c:	095b      	lsrs	r3, r3, #5
 800552e:	1ad2      	subs	r2, r2, r3
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	3b01      	subs	r3, #1
 8005534:	4922      	ldr	r1, [pc, #136]	@ (80055c0 <RTC_WeekDayNum+0xe8>)
 8005536:	fba1 1303 	umull	r1, r3, r1, r3
 800553a:	09db      	lsrs	r3, r3, #7
 800553c:	4413      	add	r3, r2
 800553e:	1d1a      	adds	r2, r3, #4
 8005540:	4b20      	ldr	r3, [pc, #128]	@ (80055c4 <RTC_WeekDayNum+0xec>)
 8005542:	fba3 1302 	umull	r1, r3, r3, r2
 8005546:	1ad1      	subs	r1, r2, r3
 8005548:	0849      	lsrs	r1, r1, #1
 800554a:	440b      	add	r3, r1
 800554c:	0899      	lsrs	r1, r3, #2
 800554e:	460b      	mov	r3, r1
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	1a5b      	subs	r3, r3, r1
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e029      	b.n	80055ae <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800555a:	78fa      	ldrb	r2, [r7, #3]
 800555c:	4613      	mov	r3, r2
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	4413      	add	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	1a9b      	subs	r3, r3, r2
 8005566:	4a15      	ldr	r2, [pc, #84]	@ (80055bc <RTC_WeekDayNum+0xe4>)
 8005568:	fba2 2303 	umull	r2, r3, r2, r3
 800556c:	085a      	lsrs	r2, r3, #1
 800556e:	78bb      	ldrb	r3, [r7, #2]
 8005570:	441a      	add	r2, r3
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	441a      	add	r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	089b      	lsrs	r3, r3, #2
 800557a:	441a      	add	r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4910      	ldr	r1, [pc, #64]	@ (80055c0 <RTC_WeekDayNum+0xe8>)
 8005580:	fba1 1303 	umull	r1, r3, r1, r3
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	1ad2      	subs	r2, r2, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	490d      	ldr	r1, [pc, #52]	@ (80055c0 <RTC_WeekDayNum+0xe8>)
 800558c:	fba1 1303 	umull	r1, r3, r1, r3
 8005590:	09db      	lsrs	r3, r3, #7
 8005592:	4413      	add	r3, r2
 8005594:	1c9a      	adds	r2, r3, #2
 8005596:	4b0b      	ldr	r3, [pc, #44]	@ (80055c4 <RTC_WeekDayNum+0xec>)
 8005598:	fba3 1302 	umull	r1, r3, r3, r2
 800559c:	1ad1      	subs	r1, r2, r3
 800559e:	0849      	lsrs	r1, r1, #1
 80055a0:	440b      	add	r3, r1
 80055a2:	0899      	lsrs	r1, r3, #2
 80055a4:	460b      	mov	r3, r1
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	1a5b      	subs	r3, r3, r1
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	b2db      	uxtb	r3, r3
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bc80      	pop	{r7}
 80055ba:	4770      	bx	lr
 80055bc:	38e38e39 	.word	0x38e38e39
 80055c0:	51eb851f 	.word	0x51eb851f
 80055c4:	24924925 	.word	0x24924925

080055c8 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register (depending devices).
  * @param  Data: Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	617b      	str	r3, [r7, #20]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)BKP_BASE;
 80055d8:	4b07      	ldr	r3, [pc, #28]	@ (80055f8 <HAL_RTCEx_BKUPWrite+0x30>)
 80055da:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4413      	add	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	b292      	uxth	r2, r2
 80055ec:	601a      	str	r2, [r3, #0]
}
 80055ee:	bf00      	nop
 80055f0:	371c      	adds	r7, #28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr
 80055f8:	40006c00 	.word	0x40006c00

080055fc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 1 to 10 (or 42) to
  *                                 specify the register (depending devices).
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t backupregister = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
  uint32_t pvalue = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	60bb      	str	r3, [r7, #8]
  UNUSED(hrtc);

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE;
 800560e:	4b08      	ldr	r3, [pc, #32]	@ (8005630 <HAL_RTCEx_BKUPRead+0x34>)
 8005610:	60fb      	str	r3, [r7, #12]
  backupregister += (BackupRegister * 4U);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	4413      	add	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]

  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return pvalue;
 8005624:	68bb      	ldr	r3, [r7, #8]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr
 8005630:	40006c00 	.word	0x40006c00

08005634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e042      	b.n	80056cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fc f84a 	bl	80016f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2224      	movs	r2, #36	@ 0x24
 8005664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005676:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fd63 	bl	8006144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800568c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695a      	ldr	r2, [r3, #20]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800569c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2220      	movs	r2, #32
 80056b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08a      	sub	sp, #40	@ 0x28
 80056d8:	af02      	add	r7, sp, #8
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	4613      	mov	r3, r2
 80056e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d175      	bne.n	80057e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <HAL_UART_Transmit+0x2c>
 80056fa:	88fb      	ldrh	r3, [r7, #6]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e06e      	b.n	80057e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2221      	movs	r2, #33	@ 0x21
 800570e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005712:	f7fc fa1d 	bl	8001b50 <HAL_GetTick>
 8005716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	88fa      	ldrh	r2, [r7, #6]
 800571c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	88fa      	ldrh	r2, [r7, #6]
 8005722:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800572c:	d108      	bne.n	8005740 <HAL_UART_Transmit+0x6c>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d104      	bne.n	8005740 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005736:	2300      	movs	r3, #0
 8005738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	e003      	b.n	8005748 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005744:	2300      	movs	r3, #0
 8005746:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005748:	e02e      	b.n	80057a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2200      	movs	r2, #0
 8005752:	2180      	movs	r1, #128	@ 0x80
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 fb01 	bl	8005d5c <UART_WaitOnFlagUntilTimeout>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e03a      	b.n	80057e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10b      	bne.n	800578a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005780:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	3302      	adds	r3, #2
 8005786:	61bb      	str	r3, [r7, #24]
 8005788:	e007      	b.n	800579a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	781a      	ldrb	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	3301      	adds	r3, #1
 8005798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1cb      	bne.n	800574a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2200      	movs	r2, #0
 80057ba:	2140      	movs	r1, #64	@ 0x40
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 facd 	bl	8005d5c <UART_WaitOnFlagUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d005      	beq.n	80057d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e006      	b.n	80057e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	e000      	b.n	80057e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80057e0:	2302      	movs	r3, #2
  }
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3720      	adds	r7, #32
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b0ba      	sub	sp, #232	@ 0xe8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005812:	2300      	movs	r3, #0
 8005814:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005818:	2300      	movs	r3, #0
 800581a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800581e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800582a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10f      	bne.n	8005852 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b00      	cmp	r3, #0
 800583c:	d009      	beq.n	8005852 <HAL_UART_IRQHandler+0x66>
 800583e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005842:	f003 0320 	and.w	r3, r3, #32
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fbbc 	bl	8005fc8 <UART_Receive_IT>
      return;
 8005850:	e25b      	b.n	8005d0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 80de 	beq.w	8005a18 <HAL_UART_IRQHandler+0x22c>
 800585c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b00      	cmp	r3, #0
 8005866:	d106      	bne.n	8005876 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800586c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 80d1 	beq.w	8005a18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00b      	beq.n	800589a <HAL_UART_IRQHandler+0xae>
 8005882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588a:	2b00      	cmp	r3, #0
 800588c:	d005      	beq.n	800589a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005892:	f043 0201 	orr.w	r2, r3, #1
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800589a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <HAL_UART_IRQHandler+0xd2>
 80058a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d005      	beq.n	80058be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b6:	f043 0202 	orr.w	r2, r3, #2
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00b      	beq.n	80058e2 <HAL_UART_IRQHandler+0xf6>
 80058ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d005      	beq.n	80058e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058da:	f043 0204 	orr.w	r2, r3, #4
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80058e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d011      	beq.n	8005912 <HAL_UART_IRQHandler+0x126>
 80058ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f2:	f003 0320 	and.w	r3, r3, #32
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d105      	bne.n	8005906 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80058fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d005      	beq.n	8005912 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590a:	f043 0208 	orr.w	r2, r3, #8
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 81f2 	beq.w	8005d00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800591c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <HAL_UART_IRQHandler+0x14e>
 8005928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800592c:	f003 0320 	and.w	r3, r3, #32
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fb47 	bl	8005fc8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005944:	2b00      	cmp	r3, #0
 8005946:	bf14      	ite	ne
 8005948:	2301      	movne	r3, #1
 800594a:	2300      	moveq	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005956:	f003 0308 	and.w	r3, r3, #8
 800595a:	2b00      	cmp	r3, #0
 800595c:	d103      	bne.n	8005966 <HAL_UART_IRQHandler+0x17a>
 800595e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005962:	2b00      	cmp	r3, #0
 8005964:	d04f      	beq.n	8005a06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fa51 	bl	8005e0e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	d041      	beq.n	80059fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3314      	adds	r3, #20
 8005980:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005990:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3314      	adds	r3, #20
 80059a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80059a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80059aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80059b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80059be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1d9      	bne.n	800597a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d013      	beq.n	80059f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d2:	4a7e      	ldr	r2, [pc, #504]	@ (8005bcc <HAL_UART_IRQHandler+0x3e0>)
 80059d4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fc fa2e 	bl	8001e3c <HAL_DMA_Abort_IT>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d016      	beq.n	8005a14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80059f0:	4610      	mov	r0, r2
 80059f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f4:	e00e      	b.n	8005a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f99c 	bl	8005d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059fc:	e00a      	b.n	8005a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f998 	bl	8005d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a04:	e006      	b.n	8005a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f994 	bl	8005d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005a12:	e175      	b.n	8005d00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a14:	bf00      	nop
    return;
 8005a16:	e173      	b.n	8005d00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	f040 814f 	bne.w	8005cc0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a26:	f003 0310 	and.w	r3, r3, #16
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 8148 	beq.w	8005cc0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 8141 	beq.w	8005cc0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60bb      	str	r3, [r7, #8]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	60bb      	str	r3, [r7, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	60bb      	str	r3, [r7, #8]
 8005a52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 80b6 	beq.w	8005bd0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8145 	beq.w	8005d04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a82:	429a      	cmp	r2, r3
 8005a84:	f080 813e 	bcs.w	8005d04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	2b20      	cmp	r3, #32
 8005a98:	f000 8088 	beq.w	8005bac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	330c      	adds	r3, #12
 8005aa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005aaa:	e853 3f00 	ldrex	r3, [r3]
 8005aae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ab2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ab6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005aba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	330c      	adds	r3, #12
 8005ac4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005ac8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005acc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ad4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1d9      	bne.n	8005a9c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3314      	adds	r3, #20
 8005aee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005af8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005afa:	f023 0301 	bic.w	r3, r3, #1
 8005afe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3314      	adds	r3, #20
 8005b08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b0c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b10:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b12:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b14:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e1      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3314      	adds	r3, #20
 8005b2a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b2e:	e853 3f00 	ldrex	r3, [r3]
 8005b32:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3314      	adds	r3, #20
 8005b44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b48:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b4a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b4e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e3      	bne.n	8005b24 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	330c      	adds	r3, #12
 8005b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b7c:	f023 0310 	bic.w	r3, r3, #16
 8005b80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	330c      	adds	r3, #12
 8005b8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b8e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b90:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e3      	bne.n	8005b6a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fc f90d 	bl	8001dc6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f8bf 	bl	8005d46 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bc8:	e09c      	b.n	8005d04 <HAL_UART_IRQHandler+0x518>
 8005bca:	bf00      	nop
 8005bcc:	08005ed3 	.word	0x08005ed3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 808e 	beq.w	8005d08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005bec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 8089 	beq.w	8005d08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	330c      	adds	r3, #12
 8005bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	330c      	adds	r3, #12
 8005c16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005c1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e3      	bne.n	8005bf6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3314      	adds	r3, #20
 8005c34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	f023 0301 	bic.w	r3, r3, #1
 8005c44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3314      	adds	r3, #20
 8005c4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c52:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e3      	bne.n	8005c2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	330c      	adds	r3, #12
 8005c7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	e853 3f00 	ldrex	r3, [r3]
 8005c82:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0310 	bic.w	r3, r3, #16
 8005c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	330c      	adds	r3, #12
 8005c94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005c98:	61fa      	str	r2, [r7, #28]
 8005c9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	69b9      	ldr	r1, [r7, #24]
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	e841 2300 	strex	r3, r2, [r1]
 8005ca4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1e3      	bne.n	8005c74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f844 	bl	8005d46 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cbe:	e023      	b.n	8005d08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d009      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x4f4>
 8005ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f90e 	bl	8005efa <UART_Transmit_IT>
    return;
 8005cde:	e014      	b.n	8005d0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00e      	beq.n	8005d0a <HAL_UART_IRQHandler+0x51e>
 8005cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d008      	beq.n	8005d0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f94d 	bl	8005f98 <UART_EndTransmit_IT>
    return;
 8005cfe:	e004      	b.n	8005d0a <HAL_UART_IRQHandler+0x51e>
    return;
 8005d00:	bf00      	nop
 8005d02:	e002      	b.n	8005d0a <HAL_UART_IRQHandler+0x51e>
      return;
 8005d04:	bf00      	nop
 8005d06:	e000      	b.n	8005d0a <HAL_UART_IRQHandler+0x51e>
      return;
 8005d08:	bf00      	nop
  }
}
 8005d0a:	37e8      	adds	r7, #232	@ 0xe8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bc80      	pop	{r7}
 8005d20:	4770      	bx	lr

08005d22 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr

08005d34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bc80      	pop	{r7}
 8005d44:	4770      	bx	lr

08005d46 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr

08005d5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	603b      	str	r3, [r7, #0]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d6c:	e03b      	b.n	8005de6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d74:	d037      	beq.n	8005de6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d76:	f7fb feeb 	bl	8001b50 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	6a3a      	ldr	r2, [r7, #32]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d302      	bcc.n	8005d8c <UART_WaitOnFlagUntilTimeout+0x30>
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e03a      	b.n	8005e06 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f003 0304 	and.w	r3, r3, #4
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d023      	beq.n	8005de6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	2b80      	cmp	r3, #128	@ 0x80
 8005da2:	d020      	beq.n	8005de6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b40      	cmp	r3, #64	@ 0x40
 8005da8:	d01d      	beq.n	8005de6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0308 	and.w	r3, r3, #8
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d116      	bne.n	8005de6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f81d 	bl	8005e0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2208      	movs	r2, #8
 8005dd8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e00f      	b.n	8005e06 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	4013      	ands	r3, r2
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	bf0c      	ite	eq
 8005df6:	2301      	moveq	r3, #1
 8005df8:	2300      	movne	r3, #0
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	79fb      	ldrb	r3, [r7, #7]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d0b4      	beq.n	8005d6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b095      	sub	sp, #84	@ 0x54
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	330c      	adds	r3, #12
 8005e1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	330c      	adds	r3, #12
 8005e34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e36:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e5      	bne.n	8005e16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3314      	adds	r3, #20
 8005e50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	f023 0301 	bic.w	r3, r3, #1
 8005e60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3314      	adds	r3, #20
 8005e68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e5      	bne.n	8005e4a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d119      	bne.n	8005eba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	330c      	adds	r3, #12
 8005e8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f023 0310 	bic.w	r3, r3, #16
 8005e9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	330c      	adds	r3, #12
 8005ea4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ea6:	61ba      	str	r2, [r7, #24]
 8005ea8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eaa:	6979      	ldr	r1, [r7, #20]
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1e5      	bne.n	8005e86 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ec8:	bf00      	nop
 8005eca:	3754      	adds	r7, #84	@ 0x54
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bc80      	pop	{r7}
 8005ed0:	4770      	bx	lr

08005ed2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ede:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f7ff ff21 	bl	8005d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ef2:	bf00      	nop
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b085      	sub	sp, #20
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b21      	cmp	r3, #33	@ 0x21
 8005f0c:	d13e      	bne.n	8005f8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f16:	d114      	bne.n	8005f42 <UART_Transmit_IT+0x48>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d110      	bne.n	8005f42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	1c9a      	adds	r2, r3, #2
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	621a      	str	r2, [r3, #32]
 8005f40:	e008      	b.n	8005f54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	1c59      	adds	r1, r3, #1
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6211      	str	r1, [r2, #32]
 8005f4c:	781a      	ldrb	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	4619      	mov	r1, r3
 8005f62:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10f      	bne.n	8005f88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	e000      	b.n	8005f8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f8c:	2302      	movs	r3, #2
  }
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bc80      	pop	{r7}
 8005f96:	4770      	bx	lr

08005f98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff fea9 	bl	8005d10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08c      	sub	sp, #48	@ 0x30
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b22      	cmp	r3, #34	@ 0x22
 8005fda:	f040 80ae 	bne.w	800613a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fe6:	d117      	bne.n	8006018 <UART_Receive_IT+0x50>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d113      	bne.n	8006018 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	b29b      	uxth	r3, r3
 8006002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006006:	b29a      	uxth	r2, r3
 8006008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006010:	1c9a      	adds	r2, r3, #2
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	629a      	str	r2, [r3, #40]	@ 0x28
 8006016:	e026      	b.n	8006066 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800601c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800601e:	2300      	movs	r3, #0
 8006020:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800602a:	d007      	beq.n	800603c <UART_Receive_IT+0x74>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10a      	bne.n	800604a <UART_Receive_IT+0x82>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d106      	bne.n	800604a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	b2da      	uxtb	r2, r3
 8006044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006046:	701a      	strb	r2, [r3, #0]
 8006048:	e008      	b.n	800605c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006056:	b2da      	uxtb	r2, r3
 8006058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800606a:	b29b      	uxth	r3, r3
 800606c:	3b01      	subs	r3, #1
 800606e:	b29b      	uxth	r3, r3
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	4619      	mov	r1, r3
 8006074:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006076:	2b00      	cmp	r3, #0
 8006078:	d15d      	bne.n	8006136 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0220 	bic.w	r2, r2, #32
 8006088:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006098:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695a      	ldr	r2, [r3, #20]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0201 	bic.w	r2, r2, #1
 80060a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d135      	bne.n	800612c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	330c      	adds	r3, #12
 80060cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	613b      	str	r3, [r7, #16]
   return(result);
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f023 0310 	bic.w	r3, r3, #16
 80060dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	330c      	adds	r3, #12
 80060e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060e6:	623a      	str	r2, [r7, #32]
 80060e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ea:	69f9      	ldr	r1, [r7, #28]
 80060ec:	6a3a      	ldr	r2, [r7, #32]
 80060ee:	e841 2300 	strex	r3, r2, [r1]
 80060f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1e5      	bne.n	80060c6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0310 	and.w	r3, r3, #16
 8006104:	2b10      	cmp	r3, #16
 8006106:	d10a      	bne.n	800611e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006108:	2300      	movs	r3, #0
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7ff fe0e 	bl	8005d46 <HAL_UARTEx_RxEventCallback>
 800612a:	e002      	b.n	8006132 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff fdf8 	bl	8005d22 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	e002      	b.n	800613c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	e000      	b.n	800613c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800613a:	2302      	movs	r3, #2
  }
}
 800613c:	4618      	mov	r0, r3
 800613e:	3730      	adds	r7, #48	@ 0x30
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689a      	ldr	r2, [r3, #8]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800617e:	f023 030c 	bic.w	r3, r3, #12
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6812      	ldr	r2, [r2, #0]
 8006186:	68b9      	ldr	r1, [r7, #8]
 8006188:	430b      	orrs	r3, r1
 800618a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	699a      	ldr	r2, [r3, #24]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a2c      	ldr	r2, [pc, #176]	@ (8006258 <UART_SetConfig+0x114>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d103      	bne.n	80061b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80061ac:	f7fe fac6 	bl	800473c <HAL_RCC_GetPCLK2Freq>
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	e002      	b.n	80061ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80061b4:	f7fe faae 	bl	8004714 <HAL_RCC_GetPCLK1Freq>
 80061b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	009a      	lsls	r2, r3, #2
 80061c4:	441a      	add	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d0:	4a22      	ldr	r2, [pc, #136]	@ (800625c <UART_SetConfig+0x118>)
 80061d2:	fba2 2303 	umull	r2, r3, r2, r3
 80061d6:	095b      	lsrs	r3, r3, #5
 80061d8:	0119      	lsls	r1, r3, #4
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	4613      	mov	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	009a      	lsls	r2, r3, #2
 80061e4:	441a      	add	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80061f0:	4b1a      	ldr	r3, [pc, #104]	@ (800625c <UART_SetConfig+0x118>)
 80061f2:	fba3 0302 	umull	r0, r3, r3, r2
 80061f6:	095b      	lsrs	r3, r3, #5
 80061f8:	2064      	movs	r0, #100	@ 0x64
 80061fa:	fb00 f303 	mul.w	r3, r0, r3
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	3332      	adds	r3, #50	@ 0x32
 8006204:	4a15      	ldr	r2, [pc, #84]	@ (800625c <UART_SetConfig+0x118>)
 8006206:	fba2 2303 	umull	r2, r3, r2, r3
 800620a:	095b      	lsrs	r3, r3, #5
 800620c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006210:	4419      	add	r1, r3
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	009a      	lsls	r2, r3, #2
 800621c:	441a      	add	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	fbb2 f2f3 	udiv	r2, r2, r3
 8006228:	4b0c      	ldr	r3, [pc, #48]	@ (800625c <UART_SetConfig+0x118>)
 800622a:	fba3 0302 	umull	r0, r3, r3, r2
 800622e:	095b      	lsrs	r3, r3, #5
 8006230:	2064      	movs	r0, #100	@ 0x64
 8006232:	fb00 f303 	mul.w	r3, r0, r3
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	3332      	adds	r3, #50	@ 0x32
 800623c:	4a07      	ldr	r2, [pc, #28]	@ (800625c <UART_SetConfig+0x118>)
 800623e:	fba2 2303 	umull	r2, r3, r2, r3
 8006242:	095b      	lsrs	r3, r3, #5
 8006244:	f003 020f 	and.w	r2, r3, #15
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	440a      	add	r2, r1
 800624e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006250:	bf00      	nop
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40013800 	.word	0x40013800
 800625c:	51eb851f 	.word	0x51eb851f

08006260 <rand>:
 8006260:	4b16      	ldr	r3, [pc, #88]	@ (80062bc <rand+0x5c>)
 8006262:	b510      	push	{r4, lr}
 8006264:	681c      	ldr	r4, [r3, #0]
 8006266:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006268:	b9b3      	cbnz	r3, 8006298 <rand+0x38>
 800626a:	2018      	movs	r0, #24
 800626c:	f001 fd08 	bl	8007c80 <malloc>
 8006270:	4602      	mov	r2, r0
 8006272:	6320      	str	r0, [r4, #48]	@ 0x30
 8006274:	b920      	cbnz	r0, 8006280 <rand+0x20>
 8006276:	2152      	movs	r1, #82	@ 0x52
 8006278:	4b11      	ldr	r3, [pc, #68]	@ (80062c0 <rand+0x60>)
 800627a:	4812      	ldr	r0, [pc, #72]	@ (80062c4 <rand+0x64>)
 800627c:	f000 fe3e 	bl	8006efc <__assert_func>
 8006280:	4911      	ldr	r1, [pc, #68]	@ (80062c8 <rand+0x68>)
 8006282:	4b12      	ldr	r3, [pc, #72]	@ (80062cc <rand+0x6c>)
 8006284:	e9c0 1300 	strd	r1, r3, [r0]
 8006288:	4b11      	ldr	r3, [pc, #68]	@ (80062d0 <rand+0x70>)
 800628a:	2100      	movs	r1, #0
 800628c:	6083      	str	r3, [r0, #8]
 800628e:	230b      	movs	r3, #11
 8006290:	8183      	strh	r3, [r0, #12]
 8006292:	2001      	movs	r0, #1
 8006294:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006298:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800629a:	480e      	ldr	r0, [pc, #56]	@ (80062d4 <rand+0x74>)
 800629c:	690b      	ldr	r3, [r1, #16]
 800629e:	694c      	ldr	r4, [r1, #20]
 80062a0:	4358      	muls	r0, r3
 80062a2:	4a0d      	ldr	r2, [pc, #52]	@ (80062d8 <rand+0x78>)
 80062a4:	fb02 0004 	mla	r0, r2, r4, r0
 80062a8:	fba3 3202 	umull	r3, r2, r3, r2
 80062ac:	3301      	adds	r3, #1
 80062ae:	eb40 0002 	adc.w	r0, r0, r2
 80062b2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80062b6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80062ba:	bd10      	pop	{r4, pc}
 80062bc:	20000018 	.word	0x20000018
 80062c0:	08009062 	.word	0x08009062
 80062c4:	08009079 	.word	0x08009079
 80062c8:	abcd330e 	.word	0xabcd330e
 80062cc:	e66d1234 	.word	0xe66d1234
 80062d0:	0005deec 	.word	0x0005deec
 80062d4:	5851f42d 	.word	0x5851f42d
 80062d8:	4c957f2d 	.word	0x4c957f2d

080062dc <__cvt>:
 80062dc:	2b00      	cmp	r3, #0
 80062de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062e2:	461d      	mov	r5, r3
 80062e4:	bfbb      	ittet	lt
 80062e6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80062ea:	461d      	movlt	r5, r3
 80062ec:	2300      	movge	r3, #0
 80062ee:	232d      	movlt	r3, #45	@ 0x2d
 80062f0:	b088      	sub	sp, #32
 80062f2:	4614      	mov	r4, r2
 80062f4:	bfb8      	it	lt
 80062f6:	4614      	movlt	r4, r2
 80062f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80062fa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80062fc:	7013      	strb	r3, [r2, #0]
 80062fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006300:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006304:	f023 0820 	bic.w	r8, r3, #32
 8006308:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800630c:	d005      	beq.n	800631a <__cvt+0x3e>
 800630e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006312:	d100      	bne.n	8006316 <__cvt+0x3a>
 8006314:	3601      	adds	r6, #1
 8006316:	2302      	movs	r3, #2
 8006318:	e000      	b.n	800631c <__cvt+0x40>
 800631a:	2303      	movs	r3, #3
 800631c:	aa07      	add	r2, sp, #28
 800631e:	9204      	str	r2, [sp, #16]
 8006320:	aa06      	add	r2, sp, #24
 8006322:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006326:	e9cd 3600 	strd	r3, r6, [sp]
 800632a:	4622      	mov	r2, r4
 800632c:	462b      	mov	r3, r5
 800632e:	f000 fe8b 	bl	8007048 <_dtoa_r>
 8006332:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006336:	4607      	mov	r7, r0
 8006338:	d119      	bne.n	800636e <__cvt+0x92>
 800633a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800633c:	07db      	lsls	r3, r3, #31
 800633e:	d50e      	bpl.n	800635e <__cvt+0x82>
 8006340:	eb00 0906 	add.w	r9, r0, r6
 8006344:	2200      	movs	r2, #0
 8006346:	2300      	movs	r3, #0
 8006348:	4620      	mov	r0, r4
 800634a:	4629      	mov	r1, r5
 800634c:	f7fa fb2c 	bl	80009a8 <__aeabi_dcmpeq>
 8006350:	b108      	cbz	r0, 8006356 <__cvt+0x7a>
 8006352:	f8cd 901c 	str.w	r9, [sp, #28]
 8006356:	2230      	movs	r2, #48	@ 0x30
 8006358:	9b07      	ldr	r3, [sp, #28]
 800635a:	454b      	cmp	r3, r9
 800635c:	d31e      	bcc.n	800639c <__cvt+0xc0>
 800635e:	4638      	mov	r0, r7
 8006360:	9b07      	ldr	r3, [sp, #28]
 8006362:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006364:	1bdb      	subs	r3, r3, r7
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	b008      	add	sp, #32
 800636a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006372:	eb00 0906 	add.w	r9, r0, r6
 8006376:	d1e5      	bne.n	8006344 <__cvt+0x68>
 8006378:	7803      	ldrb	r3, [r0, #0]
 800637a:	2b30      	cmp	r3, #48	@ 0x30
 800637c:	d10a      	bne.n	8006394 <__cvt+0xb8>
 800637e:	2200      	movs	r2, #0
 8006380:	2300      	movs	r3, #0
 8006382:	4620      	mov	r0, r4
 8006384:	4629      	mov	r1, r5
 8006386:	f7fa fb0f 	bl	80009a8 <__aeabi_dcmpeq>
 800638a:	b918      	cbnz	r0, 8006394 <__cvt+0xb8>
 800638c:	f1c6 0601 	rsb	r6, r6, #1
 8006390:	f8ca 6000 	str.w	r6, [sl]
 8006394:	f8da 3000 	ldr.w	r3, [sl]
 8006398:	4499      	add	r9, r3
 800639a:	e7d3      	b.n	8006344 <__cvt+0x68>
 800639c:	1c59      	adds	r1, r3, #1
 800639e:	9107      	str	r1, [sp, #28]
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	e7d9      	b.n	8006358 <__cvt+0x7c>

080063a4 <__exponent>:
 80063a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063a6:	2900      	cmp	r1, #0
 80063a8:	bfb6      	itet	lt
 80063aa:	232d      	movlt	r3, #45	@ 0x2d
 80063ac:	232b      	movge	r3, #43	@ 0x2b
 80063ae:	4249      	neglt	r1, r1
 80063b0:	2909      	cmp	r1, #9
 80063b2:	7002      	strb	r2, [r0, #0]
 80063b4:	7043      	strb	r3, [r0, #1]
 80063b6:	dd29      	ble.n	800640c <__exponent+0x68>
 80063b8:	f10d 0307 	add.w	r3, sp, #7
 80063bc:	461d      	mov	r5, r3
 80063be:	270a      	movs	r7, #10
 80063c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80063c4:	461a      	mov	r2, r3
 80063c6:	fb07 1416 	mls	r4, r7, r6, r1
 80063ca:	3430      	adds	r4, #48	@ 0x30
 80063cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80063d0:	460c      	mov	r4, r1
 80063d2:	2c63      	cmp	r4, #99	@ 0x63
 80063d4:	4631      	mov	r1, r6
 80063d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80063da:	dcf1      	bgt.n	80063c0 <__exponent+0x1c>
 80063dc:	3130      	adds	r1, #48	@ 0x30
 80063de:	1e94      	subs	r4, r2, #2
 80063e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80063e4:	4623      	mov	r3, r4
 80063e6:	1c41      	adds	r1, r0, #1
 80063e8:	42ab      	cmp	r3, r5
 80063ea:	d30a      	bcc.n	8006402 <__exponent+0x5e>
 80063ec:	f10d 0309 	add.w	r3, sp, #9
 80063f0:	1a9b      	subs	r3, r3, r2
 80063f2:	42ac      	cmp	r4, r5
 80063f4:	bf88      	it	hi
 80063f6:	2300      	movhi	r3, #0
 80063f8:	3302      	adds	r3, #2
 80063fa:	4403      	add	r3, r0
 80063fc:	1a18      	subs	r0, r3, r0
 80063fe:	b003      	add	sp, #12
 8006400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006402:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006406:	f801 6f01 	strb.w	r6, [r1, #1]!
 800640a:	e7ed      	b.n	80063e8 <__exponent+0x44>
 800640c:	2330      	movs	r3, #48	@ 0x30
 800640e:	3130      	adds	r1, #48	@ 0x30
 8006410:	7083      	strb	r3, [r0, #2]
 8006412:	70c1      	strb	r1, [r0, #3]
 8006414:	1d03      	adds	r3, r0, #4
 8006416:	e7f1      	b.n	80063fc <__exponent+0x58>

08006418 <_printf_float>:
 8006418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641c:	b091      	sub	sp, #68	@ 0x44
 800641e:	460c      	mov	r4, r1
 8006420:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006424:	4616      	mov	r6, r2
 8006426:	461f      	mov	r7, r3
 8006428:	4605      	mov	r5, r0
 800642a:	f000 fce1 	bl	8006df0 <_localeconv_r>
 800642e:	6803      	ldr	r3, [r0, #0]
 8006430:	4618      	mov	r0, r3
 8006432:	9308      	str	r3, [sp, #32]
 8006434:	f7f9 fe8c 	bl	8000150 <strlen>
 8006438:	2300      	movs	r3, #0
 800643a:	930e      	str	r3, [sp, #56]	@ 0x38
 800643c:	f8d8 3000 	ldr.w	r3, [r8]
 8006440:	9009      	str	r0, [sp, #36]	@ 0x24
 8006442:	3307      	adds	r3, #7
 8006444:	f023 0307 	bic.w	r3, r3, #7
 8006448:	f103 0208 	add.w	r2, r3, #8
 800644c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006450:	f8d4 b000 	ldr.w	fp, [r4]
 8006454:	f8c8 2000 	str.w	r2, [r8]
 8006458:	e9d3 8900 	ldrd	r8, r9, [r3]
 800645c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006460:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006462:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006466:	f04f 32ff 	mov.w	r2, #4294967295
 800646a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800646e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006472:	4b9c      	ldr	r3, [pc, #624]	@ (80066e4 <_printf_float+0x2cc>)
 8006474:	f7fa faca 	bl	8000a0c <__aeabi_dcmpun>
 8006478:	bb70      	cbnz	r0, 80064d8 <_printf_float+0xc0>
 800647a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800647e:	f04f 32ff 	mov.w	r2, #4294967295
 8006482:	4b98      	ldr	r3, [pc, #608]	@ (80066e4 <_printf_float+0x2cc>)
 8006484:	f7fa faa4 	bl	80009d0 <__aeabi_dcmple>
 8006488:	bb30      	cbnz	r0, 80064d8 <_printf_float+0xc0>
 800648a:	2200      	movs	r2, #0
 800648c:	2300      	movs	r3, #0
 800648e:	4640      	mov	r0, r8
 8006490:	4649      	mov	r1, r9
 8006492:	f7fa fa93 	bl	80009bc <__aeabi_dcmplt>
 8006496:	b110      	cbz	r0, 800649e <_printf_float+0x86>
 8006498:	232d      	movs	r3, #45	@ 0x2d
 800649a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800649e:	4a92      	ldr	r2, [pc, #584]	@ (80066e8 <_printf_float+0x2d0>)
 80064a0:	4b92      	ldr	r3, [pc, #584]	@ (80066ec <_printf_float+0x2d4>)
 80064a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80064a6:	bf8c      	ite	hi
 80064a8:	4690      	movhi	r8, r2
 80064aa:	4698      	movls	r8, r3
 80064ac:	2303      	movs	r3, #3
 80064ae:	f04f 0900 	mov.w	r9, #0
 80064b2:	6123      	str	r3, [r4, #16]
 80064b4:	f02b 0304 	bic.w	r3, fp, #4
 80064b8:	6023      	str	r3, [r4, #0]
 80064ba:	4633      	mov	r3, r6
 80064bc:	4621      	mov	r1, r4
 80064be:	4628      	mov	r0, r5
 80064c0:	9700      	str	r7, [sp, #0]
 80064c2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80064c4:	f000 f9d4 	bl	8006870 <_printf_common>
 80064c8:	3001      	adds	r0, #1
 80064ca:	f040 8090 	bne.w	80065ee <_printf_float+0x1d6>
 80064ce:	f04f 30ff 	mov.w	r0, #4294967295
 80064d2:	b011      	add	sp, #68	@ 0x44
 80064d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d8:	4642      	mov	r2, r8
 80064da:	464b      	mov	r3, r9
 80064dc:	4640      	mov	r0, r8
 80064de:	4649      	mov	r1, r9
 80064e0:	f7fa fa94 	bl	8000a0c <__aeabi_dcmpun>
 80064e4:	b148      	cbz	r0, 80064fa <_printf_float+0xe2>
 80064e6:	464b      	mov	r3, r9
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	bfb8      	it	lt
 80064ec:	232d      	movlt	r3, #45	@ 0x2d
 80064ee:	4a80      	ldr	r2, [pc, #512]	@ (80066f0 <_printf_float+0x2d8>)
 80064f0:	bfb8      	it	lt
 80064f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80064f6:	4b7f      	ldr	r3, [pc, #508]	@ (80066f4 <_printf_float+0x2dc>)
 80064f8:	e7d3      	b.n	80064a2 <_printf_float+0x8a>
 80064fa:	6863      	ldr	r3, [r4, #4]
 80064fc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	d13f      	bne.n	8006584 <_printf_float+0x16c>
 8006504:	2306      	movs	r3, #6
 8006506:	6063      	str	r3, [r4, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800650e:	6023      	str	r3, [r4, #0]
 8006510:	9206      	str	r2, [sp, #24]
 8006512:	aa0e      	add	r2, sp, #56	@ 0x38
 8006514:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006518:	aa0d      	add	r2, sp, #52	@ 0x34
 800651a:	9203      	str	r2, [sp, #12]
 800651c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006520:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006524:	6863      	ldr	r3, [r4, #4]
 8006526:	4642      	mov	r2, r8
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	4628      	mov	r0, r5
 800652c:	464b      	mov	r3, r9
 800652e:	910a      	str	r1, [sp, #40]	@ 0x28
 8006530:	f7ff fed4 	bl	80062dc <__cvt>
 8006534:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006536:	4680      	mov	r8, r0
 8006538:	2947      	cmp	r1, #71	@ 0x47
 800653a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800653c:	d128      	bne.n	8006590 <_printf_float+0x178>
 800653e:	1cc8      	adds	r0, r1, #3
 8006540:	db02      	blt.n	8006548 <_printf_float+0x130>
 8006542:	6863      	ldr	r3, [r4, #4]
 8006544:	4299      	cmp	r1, r3
 8006546:	dd40      	ble.n	80065ca <_printf_float+0x1b2>
 8006548:	f1aa 0a02 	sub.w	sl, sl, #2
 800654c:	fa5f fa8a 	uxtb.w	sl, sl
 8006550:	4652      	mov	r2, sl
 8006552:	3901      	subs	r1, #1
 8006554:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006558:	910d      	str	r1, [sp, #52]	@ 0x34
 800655a:	f7ff ff23 	bl	80063a4 <__exponent>
 800655e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006560:	4681      	mov	r9, r0
 8006562:	1813      	adds	r3, r2, r0
 8006564:	2a01      	cmp	r2, #1
 8006566:	6123      	str	r3, [r4, #16]
 8006568:	dc02      	bgt.n	8006570 <_printf_float+0x158>
 800656a:	6822      	ldr	r2, [r4, #0]
 800656c:	07d2      	lsls	r2, r2, #31
 800656e:	d501      	bpl.n	8006574 <_printf_float+0x15c>
 8006570:	3301      	adds	r3, #1
 8006572:	6123      	str	r3, [r4, #16]
 8006574:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006578:	2b00      	cmp	r3, #0
 800657a:	d09e      	beq.n	80064ba <_printf_float+0xa2>
 800657c:	232d      	movs	r3, #45	@ 0x2d
 800657e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006582:	e79a      	b.n	80064ba <_printf_float+0xa2>
 8006584:	2947      	cmp	r1, #71	@ 0x47
 8006586:	d1bf      	bne.n	8006508 <_printf_float+0xf0>
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1bd      	bne.n	8006508 <_printf_float+0xf0>
 800658c:	2301      	movs	r3, #1
 800658e:	e7ba      	b.n	8006506 <_printf_float+0xee>
 8006590:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006594:	d9dc      	bls.n	8006550 <_printf_float+0x138>
 8006596:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800659a:	d118      	bne.n	80065ce <_printf_float+0x1b6>
 800659c:	2900      	cmp	r1, #0
 800659e:	6863      	ldr	r3, [r4, #4]
 80065a0:	dd0b      	ble.n	80065ba <_printf_float+0x1a2>
 80065a2:	6121      	str	r1, [r4, #16]
 80065a4:	b913      	cbnz	r3, 80065ac <_printf_float+0x194>
 80065a6:	6822      	ldr	r2, [r4, #0]
 80065a8:	07d0      	lsls	r0, r2, #31
 80065aa:	d502      	bpl.n	80065b2 <_printf_float+0x19a>
 80065ac:	3301      	adds	r3, #1
 80065ae:	440b      	add	r3, r1
 80065b0:	6123      	str	r3, [r4, #16]
 80065b2:	f04f 0900 	mov.w	r9, #0
 80065b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80065b8:	e7dc      	b.n	8006574 <_printf_float+0x15c>
 80065ba:	b913      	cbnz	r3, 80065c2 <_printf_float+0x1aa>
 80065bc:	6822      	ldr	r2, [r4, #0]
 80065be:	07d2      	lsls	r2, r2, #31
 80065c0:	d501      	bpl.n	80065c6 <_printf_float+0x1ae>
 80065c2:	3302      	adds	r3, #2
 80065c4:	e7f4      	b.n	80065b0 <_printf_float+0x198>
 80065c6:	2301      	movs	r3, #1
 80065c8:	e7f2      	b.n	80065b0 <_printf_float+0x198>
 80065ca:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80065ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065d0:	4299      	cmp	r1, r3
 80065d2:	db05      	blt.n	80065e0 <_printf_float+0x1c8>
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	6121      	str	r1, [r4, #16]
 80065d8:	07d8      	lsls	r0, r3, #31
 80065da:	d5ea      	bpl.n	80065b2 <_printf_float+0x19a>
 80065dc:	1c4b      	adds	r3, r1, #1
 80065de:	e7e7      	b.n	80065b0 <_printf_float+0x198>
 80065e0:	2900      	cmp	r1, #0
 80065e2:	bfcc      	ite	gt
 80065e4:	2201      	movgt	r2, #1
 80065e6:	f1c1 0202 	rsble	r2, r1, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	e7e0      	b.n	80065b0 <_printf_float+0x198>
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	055a      	lsls	r2, r3, #21
 80065f2:	d407      	bmi.n	8006604 <_printf_float+0x1ec>
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	4642      	mov	r2, r8
 80065f8:	4631      	mov	r1, r6
 80065fa:	4628      	mov	r0, r5
 80065fc:	47b8      	blx	r7
 80065fe:	3001      	adds	r0, #1
 8006600:	d12b      	bne.n	800665a <_printf_float+0x242>
 8006602:	e764      	b.n	80064ce <_printf_float+0xb6>
 8006604:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006608:	f240 80dc 	bls.w	80067c4 <_printf_float+0x3ac>
 800660c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006610:	2200      	movs	r2, #0
 8006612:	2300      	movs	r3, #0
 8006614:	f7fa f9c8 	bl	80009a8 <__aeabi_dcmpeq>
 8006618:	2800      	cmp	r0, #0
 800661a:	d033      	beq.n	8006684 <_printf_float+0x26c>
 800661c:	2301      	movs	r3, #1
 800661e:	4631      	mov	r1, r6
 8006620:	4628      	mov	r0, r5
 8006622:	4a35      	ldr	r2, [pc, #212]	@ (80066f8 <_printf_float+0x2e0>)
 8006624:	47b8      	blx	r7
 8006626:	3001      	adds	r0, #1
 8006628:	f43f af51 	beq.w	80064ce <_printf_float+0xb6>
 800662c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006630:	4543      	cmp	r3, r8
 8006632:	db02      	blt.n	800663a <_printf_float+0x222>
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	07d8      	lsls	r0, r3, #31
 8006638:	d50f      	bpl.n	800665a <_printf_float+0x242>
 800663a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800663e:	4631      	mov	r1, r6
 8006640:	4628      	mov	r0, r5
 8006642:	47b8      	blx	r7
 8006644:	3001      	adds	r0, #1
 8006646:	f43f af42 	beq.w	80064ce <_printf_float+0xb6>
 800664a:	f04f 0900 	mov.w	r9, #0
 800664e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006652:	f104 0a1a 	add.w	sl, r4, #26
 8006656:	45c8      	cmp	r8, r9
 8006658:	dc09      	bgt.n	800666e <_printf_float+0x256>
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	079b      	lsls	r3, r3, #30
 800665e:	f100 8102 	bmi.w	8006866 <_printf_float+0x44e>
 8006662:	68e0      	ldr	r0, [r4, #12]
 8006664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006666:	4298      	cmp	r0, r3
 8006668:	bfb8      	it	lt
 800666a:	4618      	movlt	r0, r3
 800666c:	e731      	b.n	80064d2 <_printf_float+0xba>
 800666e:	2301      	movs	r3, #1
 8006670:	4652      	mov	r2, sl
 8006672:	4631      	mov	r1, r6
 8006674:	4628      	mov	r0, r5
 8006676:	47b8      	blx	r7
 8006678:	3001      	adds	r0, #1
 800667a:	f43f af28 	beq.w	80064ce <_printf_float+0xb6>
 800667e:	f109 0901 	add.w	r9, r9, #1
 8006682:	e7e8      	b.n	8006656 <_printf_float+0x23e>
 8006684:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006686:	2b00      	cmp	r3, #0
 8006688:	dc38      	bgt.n	80066fc <_printf_float+0x2e4>
 800668a:	2301      	movs	r3, #1
 800668c:	4631      	mov	r1, r6
 800668e:	4628      	mov	r0, r5
 8006690:	4a19      	ldr	r2, [pc, #100]	@ (80066f8 <_printf_float+0x2e0>)
 8006692:	47b8      	blx	r7
 8006694:	3001      	adds	r0, #1
 8006696:	f43f af1a 	beq.w	80064ce <_printf_float+0xb6>
 800669a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800669e:	ea59 0303 	orrs.w	r3, r9, r3
 80066a2:	d102      	bne.n	80066aa <_printf_float+0x292>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	07d9      	lsls	r1, r3, #31
 80066a8:	d5d7      	bpl.n	800665a <_printf_float+0x242>
 80066aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066ae:	4631      	mov	r1, r6
 80066b0:	4628      	mov	r0, r5
 80066b2:	47b8      	blx	r7
 80066b4:	3001      	adds	r0, #1
 80066b6:	f43f af0a 	beq.w	80064ce <_printf_float+0xb6>
 80066ba:	f04f 0a00 	mov.w	sl, #0
 80066be:	f104 0b1a 	add.w	fp, r4, #26
 80066c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066c4:	425b      	negs	r3, r3
 80066c6:	4553      	cmp	r3, sl
 80066c8:	dc01      	bgt.n	80066ce <_printf_float+0x2b6>
 80066ca:	464b      	mov	r3, r9
 80066cc:	e793      	b.n	80065f6 <_printf_float+0x1de>
 80066ce:	2301      	movs	r3, #1
 80066d0:	465a      	mov	r2, fp
 80066d2:	4631      	mov	r1, r6
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b8      	blx	r7
 80066d8:	3001      	adds	r0, #1
 80066da:	f43f aef8 	beq.w	80064ce <_printf_float+0xb6>
 80066de:	f10a 0a01 	add.w	sl, sl, #1
 80066e2:	e7ee      	b.n	80066c2 <_printf_float+0x2aa>
 80066e4:	7fefffff 	.word	0x7fefffff
 80066e8:	080090d5 	.word	0x080090d5
 80066ec:	080090d1 	.word	0x080090d1
 80066f0:	080090dd 	.word	0x080090dd
 80066f4:	080090d9 	.word	0x080090d9
 80066f8:	080090e1 	.word	0x080090e1
 80066fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80066fe:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006702:	4553      	cmp	r3, sl
 8006704:	bfa8      	it	ge
 8006706:	4653      	movge	r3, sl
 8006708:	2b00      	cmp	r3, #0
 800670a:	4699      	mov	r9, r3
 800670c:	dc36      	bgt.n	800677c <_printf_float+0x364>
 800670e:	f04f 0b00 	mov.w	fp, #0
 8006712:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006716:	f104 021a 	add.w	r2, r4, #26
 800671a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800671c:	930a      	str	r3, [sp, #40]	@ 0x28
 800671e:	eba3 0309 	sub.w	r3, r3, r9
 8006722:	455b      	cmp	r3, fp
 8006724:	dc31      	bgt.n	800678a <_printf_float+0x372>
 8006726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006728:	459a      	cmp	sl, r3
 800672a:	dc3a      	bgt.n	80067a2 <_printf_float+0x38a>
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	07da      	lsls	r2, r3, #31
 8006730:	d437      	bmi.n	80067a2 <_printf_float+0x38a>
 8006732:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006734:	ebaa 0903 	sub.w	r9, sl, r3
 8006738:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800673a:	ebaa 0303 	sub.w	r3, sl, r3
 800673e:	4599      	cmp	r9, r3
 8006740:	bfa8      	it	ge
 8006742:	4699      	movge	r9, r3
 8006744:	f1b9 0f00 	cmp.w	r9, #0
 8006748:	dc33      	bgt.n	80067b2 <_printf_float+0x39a>
 800674a:	f04f 0800 	mov.w	r8, #0
 800674e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006752:	f104 0b1a 	add.w	fp, r4, #26
 8006756:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006758:	ebaa 0303 	sub.w	r3, sl, r3
 800675c:	eba3 0309 	sub.w	r3, r3, r9
 8006760:	4543      	cmp	r3, r8
 8006762:	f77f af7a 	ble.w	800665a <_printf_float+0x242>
 8006766:	2301      	movs	r3, #1
 8006768:	465a      	mov	r2, fp
 800676a:	4631      	mov	r1, r6
 800676c:	4628      	mov	r0, r5
 800676e:	47b8      	blx	r7
 8006770:	3001      	adds	r0, #1
 8006772:	f43f aeac 	beq.w	80064ce <_printf_float+0xb6>
 8006776:	f108 0801 	add.w	r8, r8, #1
 800677a:	e7ec      	b.n	8006756 <_printf_float+0x33e>
 800677c:	4642      	mov	r2, r8
 800677e:	4631      	mov	r1, r6
 8006780:	4628      	mov	r0, r5
 8006782:	47b8      	blx	r7
 8006784:	3001      	adds	r0, #1
 8006786:	d1c2      	bne.n	800670e <_printf_float+0x2f6>
 8006788:	e6a1      	b.n	80064ce <_printf_float+0xb6>
 800678a:	2301      	movs	r3, #1
 800678c:	4631      	mov	r1, r6
 800678e:	4628      	mov	r0, r5
 8006790:	920a      	str	r2, [sp, #40]	@ 0x28
 8006792:	47b8      	blx	r7
 8006794:	3001      	adds	r0, #1
 8006796:	f43f ae9a 	beq.w	80064ce <_printf_float+0xb6>
 800679a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800679c:	f10b 0b01 	add.w	fp, fp, #1
 80067a0:	e7bb      	b.n	800671a <_printf_float+0x302>
 80067a2:	4631      	mov	r1, r6
 80067a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067a8:	4628      	mov	r0, r5
 80067aa:	47b8      	blx	r7
 80067ac:	3001      	adds	r0, #1
 80067ae:	d1c0      	bne.n	8006732 <_printf_float+0x31a>
 80067b0:	e68d      	b.n	80064ce <_printf_float+0xb6>
 80067b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067b4:	464b      	mov	r3, r9
 80067b6:	4631      	mov	r1, r6
 80067b8:	4628      	mov	r0, r5
 80067ba:	4442      	add	r2, r8
 80067bc:	47b8      	blx	r7
 80067be:	3001      	adds	r0, #1
 80067c0:	d1c3      	bne.n	800674a <_printf_float+0x332>
 80067c2:	e684      	b.n	80064ce <_printf_float+0xb6>
 80067c4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80067c8:	f1ba 0f01 	cmp.w	sl, #1
 80067cc:	dc01      	bgt.n	80067d2 <_printf_float+0x3ba>
 80067ce:	07db      	lsls	r3, r3, #31
 80067d0:	d536      	bpl.n	8006840 <_printf_float+0x428>
 80067d2:	2301      	movs	r3, #1
 80067d4:	4642      	mov	r2, r8
 80067d6:	4631      	mov	r1, r6
 80067d8:	4628      	mov	r0, r5
 80067da:	47b8      	blx	r7
 80067dc:	3001      	adds	r0, #1
 80067de:	f43f ae76 	beq.w	80064ce <_printf_float+0xb6>
 80067e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067e6:	4631      	mov	r1, r6
 80067e8:	4628      	mov	r0, r5
 80067ea:	47b8      	blx	r7
 80067ec:	3001      	adds	r0, #1
 80067ee:	f43f ae6e 	beq.w	80064ce <_printf_float+0xb6>
 80067f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067f6:	2200      	movs	r2, #0
 80067f8:	2300      	movs	r3, #0
 80067fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067fe:	f7fa f8d3 	bl	80009a8 <__aeabi_dcmpeq>
 8006802:	b9c0      	cbnz	r0, 8006836 <_printf_float+0x41e>
 8006804:	4653      	mov	r3, sl
 8006806:	f108 0201 	add.w	r2, r8, #1
 800680a:	4631      	mov	r1, r6
 800680c:	4628      	mov	r0, r5
 800680e:	47b8      	blx	r7
 8006810:	3001      	adds	r0, #1
 8006812:	d10c      	bne.n	800682e <_printf_float+0x416>
 8006814:	e65b      	b.n	80064ce <_printf_float+0xb6>
 8006816:	2301      	movs	r3, #1
 8006818:	465a      	mov	r2, fp
 800681a:	4631      	mov	r1, r6
 800681c:	4628      	mov	r0, r5
 800681e:	47b8      	blx	r7
 8006820:	3001      	adds	r0, #1
 8006822:	f43f ae54 	beq.w	80064ce <_printf_float+0xb6>
 8006826:	f108 0801 	add.w	r8, r8, #1
 800682a:	45d0      	cmp	r8, sl
 800682c:	dbf3      	blt.n	8006816 <_printf_float+0x3fe>
 800682e:	464b      	mov	r3, r9
 8006830:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006834:	e6e0      	b.n	80065f8 <_printf_float+0x1e0>
 8006836:	f04f 0800 	mov.w	r8, #0
 800683a:	f104 0b1a 	add.w	fp, r4, #26
 800683e:	e7f4      	b.n	800682a <_printf_float+0x412>
 8006840:	2301      	movs	r3, #1
 8006842:	4642      	mov	r2, r8
 8006844:	e7e1      	b.n	800680a <_printf_float+0x3f2>
 8006846:	2301      	movs	r3, #1
 8006848:	464a      	mov	r2, r9
 800684a:	4631      	mov	r1, r6
 800684c:	4628      	mov	r0, r5
 800684e:	47b8      	blx	r7
 8006850:	3001      	adds	r0, #1
 8006852:	f43f ae3c 	beq.w	80064ce <_printf_float+0xb6>
 8006856:	f108 0801 	add.w	r8, r8, #1
 800685a:	68e3      	ldr	r3, [r4, #12]
 800685c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800685e:	1a5b      	subs	r3, r3, r1
 8006860:	4543      	cmp	r3, r8
 8006862:	dcf0      	bgt.n	8006846 <_printf_float+0x42e>
 8006864:	e6fd      	b.n	8006662 <_printf_float+0x24a>
 8006866:	f04f 0800 	mov.w	r8, #0
 800686a:	f104 0919 	add.w	r9, r4, #25
 800686e:	e7f4      	b.n	800685a <_printf_float+0x442>

08006870 <_printf_common>:
 8006870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006874:	4616      	mov	r6, r2
 8006876:	4698      	mov	r8, r3
 8006878:	688a      	ldr	r2, [r1, #8]
 800687a:	690b      	ldr	r3, [r1, #16]
 800687c:	4607      	mov	r7, r0
 800687e:	4293      	cmp	r3, r2
 8006880:	bfb8      	it	lt
 8006882:	4613      	movlt	r3, r2
 8006884:	6033      	str	r3, [r6, #0]
 8006886:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800688a:	460c      	mov	r4, r1
 800688c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006890:	b10a      	cbz	r2, 8006896 <_printf_common+0x26>
 8006892:	3301      	adds	r3, #1
 8006894:	6033      	str	r3, [r6, #0]
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	0699      	lsls	r1, r3, #26
 800689a:	bf42      	ittt	mi
 800689c:	6833      	ldrmi	r3, [r6, #0]
 800689e:	3302      	addmi	r3, #2
 80068a0:	6033      	strmi	r3, [r6, #0]
 80068a2:	6825      	ldr	r5, [r4, #0]
 80068a4:	f015 0506 	ands.w	r5, r5, #6
 80068a8:	d106      	bne.n	80068b8 <_printf_common+0x48>
 80068aa:	f104 0a19 	add.w	sl, r4, #25
 80068ae:	68e3      	ldr	r3, [r4, #12]
 80068b0:	6832      	ldr	r2, [r6, #0]
 80068b2:	1a9b      	subs	r3, r3, r2
 80068b4:	42ab      	cmp	r3, r5
 80068b6:	dc2b      	bgt.n	8006910 <_printf_common+0xa0>
 80068b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068bc:	6822      	ldr	r2, [r4, #0]
 80068be:	3b00      	subs	r3, #0
 80068c0:	bf18      	it	ne
 80068c2:	2301      	movne	r3, #1
 80068c4:	0692      	lsls	r2, r2, #26
 80068c6:	d430      	bmi.n	800692a <_printf_common+0xba>
 80068c8:	4641      	mov	r1, r8
 80068ca:	4638      	mov	r0, r7
 80068cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068d0:	47c8      	blx	r9
 80068d2:	3001      	adds	r0, #1
 80068d4:	d023      	beq.n	800691e <_printf_common+0xae>
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	6922      	ldr	r2, [r4, #16]
 80068da:	f003 0306 	and.w	r3, r3, #6
 80068de:	2b04      	cmp	r3, #4
 80068e0:	bf14      	ite	ne
 80068e2:	2500      	movne	r5, #0
 80068e4:	6833      	ldreq	r3, [r6, #0]
 80068e6:	f04f 0600 	mov.w	r6, #0
 80068ea:	bf08      	it	eq
 80068ec:	68e5      	ldreq	r5, [r4, #12]
 80068ee:	f104 041a 	add.w	r4, r4, #26
 80068f2:	bf08      	it	eq
 80068f4:	1aed      	subeq	r5, r5, r3
 80068f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80068fa:	bf08      	it	eq
 80068fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006900:	4293      	cmp	r3, r2
 8006902:	bfc4      	itt	gt
 8006904:	1a9b      	subgt	r3, r3, r2
 8006906:	18ed      	addgt	r5, r5, r3
 8006908:	42b5      	cmp	r5, r6
 800690a:	d11a      	bne.n	8006942 <_printf_common+0xd2>
 800690c:	2000      	movs	r0, #0
 800690e:	e008      	b.n	8006922 <_printf_common+0xb2>
 8006910:	2301      	movs	r3, #1
 8006912:	4652      	mov	r2, sl
 8006914:	4641      	mov	r1, r8
 8006916:	4638      	mov	r0, r7
 8006918:	47c8      	blx	r9
 800691a:	3001      	adds	r0, #1
 800691c:	d103      	bne.n	8006926 <_printf_common+0xb6>
 800691e:	f04f 30ff 	mov.w	r0, #4294967295
 8006922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006926:	3501      	adds	r5, #1
 8006928:	e7c1      	b.n	80068ae <_printf_common+0x3e>
 800692a:	2030      	movs	r0, #48	@ 0x30
 800692c:	18e1      	adds	r1, r4, r3
 800692e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006938:	4422      	add	r2, r4
 800693a:	3302      	adds	r3, #2
 800693c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006940:	e7c2      	b.n	80068c8 <_printf_common+0x58>
 8006942:	2301      	movs	r3, #1
 8006944:	4622      	mov	r2, r4
 8006946:	4641      	mov	r1, r8
 8006948:	4638      	mov	r0, r7
 800694a:	47c8      	blx	r9
 800694c:	3001      	adds	r0, #1
 800694e:	d0e6      	beq.n	800691e <_printf_common+0xae>
 8006950:	3601      	adds	r6, #1
 8006952:	e7d9      	b.n	8006908 <_printf_common+0x98>

08006954 <_printf_i>:
 8006954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006958:	7e0f      	ldrb	r7, [r1, #24]
 800695a:	4691      	mov	r9, r2
 800695c:	2f78      	cmp	r7, #120	@ 0x78
 800695e:	4680      	mov	r8, r0
 8006960:	460c      	mov	r4, r1
 8006962:	469a      	mov	sl, r3
 8006964:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006966:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800696a:	d807      	bhi.n	800697c <_printf_i+0x28>
 800696c:	2f62      	cmp	r7, #98	@ 0x62
 800696e:	d80a      	bhi.n	8006986 <_printf_i+0x32>
 8006970:	2f00      	cmp	r7, #0
 8006972:	f000 80d1 	beq.w	8006b18 <_printf_i+0x1c4>
 8006976:	2f58      	cmp	r7, #88	@ 0x58
 8006978:	f000 80b8 	beq.w	8006aec <_printf_i+0x198>
 800697c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006980:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006984:	e03a      	b.n	80069fc <_printf_i+0xa8>
 8006986:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800698a:	2b15      	cmp	r3, #21
 800698c:	d8f6      	bhi.n	800697c <_printf_i+0x28>
 800698e:	a101      	add	r1, pc, #4	@ (adr r1, 8006994 <_printf_i+0x40>)
 8006990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006994:	080069ed 	.word	0x080069ed
 8006998:	08006a01 	.word	0x08006a01
 800699c:	0800697d 	.word	0x0800697d
 80069a0:	0800697d 	.word	0x0800697d
 80069a4:	0800697d 	.word	0x0800697d
 80069a8:	0800697d 	.word	0x0800697d
 80069ac:	08006a01 	.word	0x08006a01
 80069b0:	0800697d 	.word	0x0800697d
 80069b4:	0800697d 	.word	0x0800697d
 80069b8:	0800697d 	.word	0x0800697d
 80069bc:	0800697d 	.word	0x0800697d
 80069c0:	08006aff 	.word	0x08006aff
 80069c4:	08006a2b 	.word	0x08006a2b
 80069c8:	08006ab9 	.word	0x08006ab9
 80069cc:	0800697d 	.word	0x0800697d
 80069d0:	0800697d 	.word	0x0800697d
 80069d4:	08006b21 	.word	0x08006b21
 80069d8:	0800697d 	.word	0x0800697d
 80069dc:	08006a2b 	.word	0x08006a2b
 80069e0:	0800697d 	.word	0x0800697d
 80069e4:	0800697d 	.word	0x0800697d
 80069e8:	08006ac1 	.word	0x08006ac1
 80069ec:	6833      	ldr	r3, [r6, #0]
 80069ee:	1d1a      	adds	r2, r3, #4
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6032      	str	r2, [r6, #0]
 80069f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069fc:	2301      	movs	r3, #1
 80069fe:	e09c      	b.n	8006b3a <_printf_i+0x1e6>
 8006a00:	6833      	ldr	r3, [r6, #0]
 8006a02:	6820      	ldr	r0, [r4, #0]
 8006a04:	1d19      	adds	r1, r3, #4
 8006a06:	6031      	str	r1, [r6, #0]
 8006a08:	0606      	lsls	r6, r0, #24
 8006a0a:	d501      	bpl.n	8006a10 <_printf_i+0xbc>
 8006a0c:	681d      	ldr	r5, [r3, #0]
 8006a0e:	e003      	b.n	8006a18 <_printf_i+0xc4>
 8006a10:	0645      	lsls	r5, r0, #25
 8006a12:	d5fb      	bpl.n	8006a0c <_printf_i+0xb8>
 8006a14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a18:	2d00      	cmp	r5, #0
 8006a1a:	da03      	bge.n	8006a24 <_printf_i+0xd0>
 8006a1c:	232d      	movs	r3, #45	@ 0x2d
 8006a1e:	426d      	negs	r5, r5
 8006a20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a24:	230a      	movs	r3, #10
 8006a26:	4858      	ldr	r0, [pc, #352]	@ (8006b88 <_printf_i+0x234>)
 8006a28:	e011      	b.n	8006a4e <_printf_i+0xfa>
 8006a2a:	6821      	ldr	r1, [r4, #0]
 8006a2c:	6833      	ldr	r3, [r6, #0]
 8006a2e:	0608      	lsls	r0, r1, #24
 8006a30:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a34:	d402      	bmi.n	8006a3c <_printf_i+0xe8>
 8006a36:	0649      	lsls	r1, r1, #25
 8006a38:	bf48      	it	mi
 8006a3a:	b2ad      	uxthmi	r5, r5
 8006a3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a3e:	6033      	str	r3, [r6, #0]
 8006a40:	bf14      	ite	ne
 8006a42:	230a      	movne	r3, #10
 8006a44:	2308      	moveq	r3, #8
 8006a46:	4850      	ldr	r0, [pc, #320]	@ (8006b88 <_printf_i+0x234>)
 8006a48:	2100      	movs	r1, #0
 8006a4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a4e:	6866      	ldr	r6, [r4, #4]
 8006a50:	2e00      	cmp	r6, #0
 8006a52:	60a6      	str	r6, [r4, #8]
 8006a54:	db05      	blt.n	8006a62 <_printf_i+0x10e>
 8006a56:	6821      	ldr	r1, [r4, #0]
 8006a58:	432e      	orrs	r6, r5
 8006a5a:	f021 0104 	bic.w	r1, r1, #4
 8006a5e:	6021      	str	r1, [r4, #0]
 8006a60:	d04b      	beq.n	8006afa <_printf_i+0x1a6>
 8006a62:	4616      	mov	r6, r2
 8006a64:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a68:	fb03 5711 	mls	r7, r3, r1, r5
 8006a6c:	5dc7      	ldrb	r7, [r0, r7]
 8006a6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a72:	462f      	mov	r7, r5
 8006a74:	42bb      	cmp	r3, r7
 8006a76:	460d      	mov	r5, r1
 8006a78:	d9f4      	bls.n	8006a64 <_printf_i+0x110>
 8006a7a:	2b08      	cmp	r3, #8
 8006a7c:	d10b      	bne.n	8006a96 <_printf_i+0x142>
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	07df      	lsls	r7, r3, #31
 8006a82:	d508      	bpl.n	8006a96 <_printf_i+0x142>
 8006a84:	6923      	ldr	r3, [r4, #16]
 8006a86:	6861      	ldr	r1, [r4, #4]
 8006a88:	4299      	cmp	r1, r3
 8006a8a:	bfde      	ittt	le
 8006a8c:	2330      	movle	r3, #48	@ 0x30
 8006a8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a96:	1b92      	subs	r2, r2, r6
 8006a98:	6122      	str	r2, [r4, #16]
 8006a9a:	464b      	mov	r3, r9
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	4640      	mov	r0, r8
 8006aa0:	f8cd a000 	str.w	sl, [sp]
 8006aa4:	aa03      	add	r2, sp, #12
 8006aa6:	f7ff fee3 	bl	8006870 <_printf_common>
 8006aaa:	3001      	adds	r0, #1
 8006aac:	d14a      	bne.n	8006b44 <_printf_i+0x1f0>
 8006aae:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab2:	b004      	add	sp, #16
 8006ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	f043 0320 	orr.w	r3, r3, #32
 8006abe:	6023      	str	r3, [r4, #0]
 8006ac0:	2778      	movs	r7, #120	@ 0x78
 8006ac2:	4832      	ldr	r0, [pc, #200]	@ (8006b8c <_printf_i+0x238>)
 8006ac4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	6831      	ldr	r1, [r6, #0]
 8006acc:	061f      	lsls	r7, r3, #24
 8006ace:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ad2:	d402      	bmi.n	8006ada <_printf_i+0x186>
 8006ad4:	065f      	lsls	r7, r3, #25
 8006ad6:	bf48      	it	mi
 8006ad8:	b2ad      	uxthmi	r5, r5
 8006ada:	6031      	str	r1, [r6, #0]
 8006adc:	07d9      	lsls	r1, r3, #31
 8006ade:	bf44      	itt	mi
 8006ae0:	f043 0320 	orrmi.w	r3, r3, #32
 8006ae4:	6023      	strmi	r3, [r4, #0]
 8006ae6:	b11d      	cbz	r5, 8006af0 <_printf_i+0x19c>
 8006ae8:	2310      	movs	r3, #16
 8006aea:	e7ad      	b.n	8006a48 <_printf_i+0xf4>
 8006aec:	4826      	ldr	r0, [pc, #152]	@ (8006b88 <_printf_i+0x234>)
 8006aee:	e7e9      	b.n	8006ac4 <_printf_i+0x170>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	f023 0320 	bic.w	r3, r3, #32
 8006af6:	6023      	str	r3, [r4, #0]
 8006af8:	e7f6      	b.n	8006ae8 <_printf_i+0x194>
 8006afa:	4616      	mov	r6, r2
 8006afc:	e7bd      	b.n	8006a7a <_printf_i+0x126>
 8006afe:	6833      	ldr	r3, [r6, #0]
 8006b00:	6825      	ldr	r5, [r4, #0]
 8006b02:	1d18      	adds	r0, r3, #4
 8006b04:	6961      	ldr	r1, [r4, #20]
 8006b06:	6030      	str	r0, [r6, #0]
 8006b08:	062e      	lsls	r6, r5, #24
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	d501      	bpl.n	8006b12 <_printf_i+0x1be>
 8006b0e:	6019      	str	r1, [r3, #0]
 8006b10:	e002      	b.n	8006b18 <_printf_i+0x1c4>
 8006b12:	0668      	lsls	r0, r5, #25
 8006b14:	d5fb      	bpl.n	8006b0e <_printf_i+0x1ba>
 8006b16:	8019      	strh	r1, [r3, #0]
 8006b18:	2300      	movs	r3, #0
 8006b1a:	4616      	mov	r6, r2
 8006b1c:	6123      	str	r3, [r4, #16]
 8006b1e:	e7bc      	b.n	8006a9a <_printf_i+0x146>
 8006b20:	6833      	ldr	r3, [r6, #0]
 8006b22:	2100      	movs	r1, #0
 8006b24:	1d1a      	adds	r2, r3, #4
 8006b26:	6032      	str	r2, [r6, #0]
 8006b28:	681e      	ldr	r6, [r3, #0]
 8006b2a:	6862      	ldr	r2, [r4, #4]
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	f000 f9d6 	bl	8006ede <memchr>
 8006b32:	b108      	cbz	r0, 8006b38 <_printf_i+0x1e4>
 8006b34:	1b80      	subs	r0, r0, r6
 8006b36:	6060      	str	r0, [r4, #4]
 8006b38:	6863      	ldr	r3, [r4, #4]
 8006b3a:	6123      	str	r3, [r4, #16]
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b42:	e7aa      	b.n	8006a9a <_printf_i+0x146>
 8006b44:	4632      	mov	r2, r6
 8006b46:	4649      	mov	r1, r9
 8006b48:	4640      	mov	r0, r8
 8006b4a:	6923      	ldr	r3, [r4, #16]
 8006b4c:	47d0      	blx	sl
 8006b4e:	3001      	adds	r0, #1
 8006b50:	d0ad      	beq.n	8006aae <_printf_i+0x15a>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	079b      	lsls	r3, r3, #30
 8006b56:	d413      	bmi.n	8006b80 <_printf_i+0x22c>
 8006b58:	68e0      	ldr	r0, [r4, #12]
 8006b5a:	9b03      	ldr	r3, [sp, #12]
 8006b5c:	4298      	cmp	r0, r3
 8006b5e:	bfb8      	it	lt
 8006b60:	4618      	movlt	r0, r3
 8006b62:	e7a6      	b.n	8006ab2 <_printf_i+0x15e>
 8006b64:	2301      	movs	r3, #1
 8006b66:	4632      	mov	r2, r6
 8006b68:	4649      	mov	r1, r9
 8006b6a:	4640      	mov	r0, r8
 8006b6c:	47d0      	blx	sl
 8006b6e:	3001      	adds	r0, #1
 8006b70:	d09d      	beq.n	8006aae <_printf_i+0x15a>
 8006b72:	3501      	adds	r5, #1
 8006b74:	68e3      	ldr	r3, [r4, #12]
 8006b76:	9903      	ldr	r1, [sp, #12]
 8006b78:	1a5b      	subs	r3, r3, r1
 8006b7a:	42ab      	cmp	r3, r5
 8006b7c:	dcf2      	bgt.n	8006b64 <_printf_i+0x210>
 8006b7e:	e7eb      	b.n	8006b58 <_printf_i+0x204>
 8006b80:	2500      	movs	r5, #0
 8006b82:	f104 0619 	add.w	r6, r4, #25
 8006b86:	e7f5      	b.n	8006b74 <_printf_i+0x220>
 8006b88:	080090e3 	.word	0x080090e3
 8006b8c:	080090f4 	.word	0x080090f4

08006b90 <std>:
 8006b90:	2300      	movs	r3, #0
 8006b92:	b510      	push	{r4, lr}
 8006b94:	4604      	mov	r4, r0
 8006b96:	e9c0 3300 	strd	r3, r3, [r0]
 8006b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b9e:	6083      	str	r3, [r0, #8]
 8006ba0:	8181      	strh	r1, [r0, #12]
 8006ba2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ba4:	81c2      	strh	r2, [r0, #14]
 8006ba6:	6183      	str	r3, [r0, #24]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	2208      	movs	r2, #8
 8006bac:	305c      	adds	r0, #92	@ 0x5c
 8006bae:	f000 f916 	bl	8006dde <memset>
 8006bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006be8 <std+0x58>)
 8006bb4:	6224      	str	r4, [r4, #32]
 8006bb6:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8006bec <std+0x5c>)
 8006bba:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf0 <std+0x60>)
 8006bbe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf4 <std+0x64>)
 8006bc2:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf8 <std+0x68>)
 8006bc6:	429c      	cmp	r4, r3
 8006bc8:	d006      	beq.n	8006bd8 <std+0x48>
 8006bca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bce:	4294      	cmp	r4, r2
 8006bd0:	d002      	beq.n	8006bd8 <std+0x48>
 8006bd2:	33d0      	adds	r3, #208	@ 0xd0
 8006bd4:	429c      	cmp	r4, r3
 8006bd6:	d105      	bne.n	8006be4 <std+0x54>
 8006bd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be0:	f000 b97a 	b.w	8006ed8 <__retarget_lock_init_recursive>
 8006be4:	bd10      	pop	{r4, pc}
 8006be6:	bf00      	nop
 8006be8:	08006d59 	.word	0x08006d59
 8006bec:	08006d7b 	.word	0x08006d7b
 8006bf0:	08006db3 	.word	0x08006db3
 8006bf4:	08006dd7 	.word	0x08006dd7
 8006bf8:	20000450 	.word	0x20000450

08006bfc <stdio_exit_handler>:
 8006bfc:	4a02      	ldr	r2, [pc, #8]	@ (8006c08 <stdio_exit_handler+0xc>)
 8006bfe:	4903      	ldr	r1, [pc, #12]	@ (8006c0c <stdio_exit_handler+0x10>)
 8006c00:	4803      	ldr	r0, [pc, #12]	@ (8006c10 <stdio_exit_handler+0x14>)
 8006c02:	f000 b869 	b.w	8006cd8 <_fwalk_sglue>
 8006c06:	bf00      	nop
 8006c08:	2000000c 	.word	0x2000000c
 8006c0c:	08008891 	.word	0x08008891
 8006c10:	2000001c 	.word	0x2000001c

08006c14 <cleanup_stdio>:
 8006c14:	6841      	ldr	r1, [r0, #4]
 8006c16:	4b0c      	ldr	r3, [pc, #48]	@ (8006c48 <cleanup_stdio+0x34>)
 8006c18:	b510      	push	{r4, lr}
 8006c1a:	4299      	cmp	r1, r3
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	d001      	beq.n	8006c24 <cleanup_stdio+0x10>
 8006c20:	f001 fe36 	bl	8008890 <_fflush_r>
 8006c24:	68a1      	ldr	r1, [r4, #8]
 8006c26:	4b09      	ldr	r3, [pc, #36]	@ (8006c4c <cleanup_stdio+0x38>)
 8006c28:	4299      	cmp	r1, r3
 8006c2a:	d002      	beq.n	8006c32 <cleanup_stdio+0x1e>
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f001 fe2f 	bl	8008890 <_fflush_r>
 8006c32:	68e1      	ldr	r1, [r4, #12]
 8006c34:	4b06      	ldr	r3, [pc, #24]	@ (8006c50 <cleanup_stdio+0x3c>)
 8006c36:	4299      	cmp	r1, r3
 8006c38:	d004      	beq.n	8006c44 <cleanup_stdio+0x30>
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c40:	f001 be26 	b.w	8008890 <_fflush_r>
 8006c44:	bd10      	pop	{r4, pc}
 8006c46:	bf00      	nop
 8006c48:	20000450 	.word	0x20000450
 8006c4c:	200004b8 	.word	0x200004b8
 8006c50:	20000520 	.word	0x20000520

08006c54 <global_stdio_init.part.0>:
 8006c54:	b510      	push	{r4, lr}
 8006c56:	4b0b      	ldr	r3, [pc, #44]	@ (8006c84 <global_stdio_init.part.0+0x30>)
 8006c58:	4c0b      	ldr	r4, [pc, #44]	@ (8006c88 <global_stdio_init.part.0+0x34>)
 8006c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8006c8c <global_stdio_init.part.0+0x38>)
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	2104      	movs	r1, #4
 8006c62:	2200      	movs	r2, #0
 8006c64:	f7ff ff94 	bl	8006b90 <std>
 8006c68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	2109      	movs	r1, #9
 8006c70:	f7ff ff8e 	bl	8006b90 <std>
 8006c74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c78:	2202      	movs	r2, #2
 8006c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c7e:	2112      	movs	r1, #18
 8006c80:	f7ff bf86 	b.w	8006b90 <std>
 8006c84:	20000588 	.word	0x20000588
 8006c88:	20000450 	.word	0x20000450
 8006c8c:	08006bfd 	.word	0x08006bfd

08006c90 <__sfp_lock_acquire>:
 8006c90:	4801      	ldr	r0, [pc, #4]	@ (8006c98 <__sfp_lock_acquire+0x8>)
 8006c92:	f000 b922 	b.w	8006eda <__retarget_lock_acquire_recursive>
 8006c96:	bf00      	nop
 8006c98:	20000591 	.word	0x20000591

08006c9c <__sfp_lock_release>:
 8006c9c:	4801      	ldr	r0, [pc, #4]	@ (8006ca4 <__sfp_lock_release+0x8>)
 8006c9e:	f000 b91d 	b.w	8006edc <__retarget_lock_release_recursive>
 8006ca2:	bf00      	nop
 8006ca4:	20000591 	.word	0x20000591

08006ca8 <__sinit>:
 8006ca8:	b510      	push	{r4, lr}
 8006caa:	4604      	mov	r4, r0
 8006cac:	f7ff fff0 	bl	8006c90 <__sfp_lock_acquire>
 8006cb0:	6a23      	ldr	r3, [r4, #32]
 8006cb2:	b11b      	cbz	r3, 8006cbc <__sinit+0x14>
 8006cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cb8:	f7ff bff0 	b.w	8006c9c <__sfp_lock_release>
 8006cbc:	4b04      	ldr	r3, [pc, #16]	@ (8006cd0 <__sinit+0x28>)
 8006cbe:	6223      	str	r3, [r4, #32]
 8006cc0:	4b04      	ldr	r3, [pc, #16]	@ (8006cd4 <__sinit+0x2c>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1f5      	bne.n	8006cb4 <__sinit+0xc>
 8006cc8:	f7ff ffc4 	bl	8006c54 <global_stdio_init.part.0>
 8006ccc:	e7f2      	b.n	8006cb4 <__sinit+0xc>
 8006cce:	bf00      	nop
 8006cd0:	08006c15 	.word	0x08006c15
 8006cd4:	20000588 	.word	0x20000588

08006cd8 <_fwalk_sglue>:
 8006cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cdc:	4607      	mov	r7, r0
 8006cde:	4688      	mov	r8, r1
 8006ce0:	4614      	mov	r4, r2
 8006ce2:	2600      	movs	r6, #0
 8006ce4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ce8:	f1b9 0901 	subs.w	r9, r9, #1
 8006cec:	d505      	bpl.n	8006cfa <_fwalk_sglue+0x22>
 8006cee:	6824      	ldr	r4, [r4, #0]
 8006cf0:	2c00      	cmp	r4, #0
 8006cf2:	d1f7      	bne.n	8006ce4 <_fwalk_sglue+0xc>
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cfa:	89ab      	ldrh	r3, [r5, #12]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d907      	bls.n	8006d10 <_fwalk_sglue+0x38>
 8006d00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d04:	3301      	adds	r3, #1
 8006d06:	d003      	beq.n	8006d10 <_fwalk_sglue+0x38>
 8006d08:	4629      	mov	r1, r5
 8006d0a:	4638      	mov	r0, r7
 8006d0c:	47c0      	blx	r8
 8006d0e:	4306      	orrs	r6, r0
 8006d10:	3568      	adds	r5, #104	@ 0x68
 8006d12:	e7e9      	b.n	8006ce8 <_fwalk_sglue+0x10>

08006d14 <siprintf>:
 8006d14:	b40e      	push	{r1, r2, r3}
 8006d16:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006d1a:	b510      	push	{r4, lr}
 8006d1c:	2400      	movs	r4, #0
 8006d1e:	b09d      	sub	sp, #116	@ 0x74
 8006d20:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006d22:	9002      	str	r0, [sp, #8]
 8006d24:	9006      	str	r0, [sp, #24]
 8006d26:	9107      	str	r1, [sp, #28]
 8006d28:	9104      	str	r1, [sp, #16]
 8006d2a:	4809      	ldr	r0, [pc, #36]	@ (8006d50 <siprintf+0x3c>)
 8006d2c:	4909      	ldr	r1, [pc, #36]	@ (8006d54 <siprintf+0x40>)
 8006d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d32:	9105      	str	r1, [sp, #20]
 8006d34:	6800      	ldr	r0, [r0, #0]
 8006d36:	a902      	add	r1, sp, #8
 8006d38:	9301      	str	r3, [sp, #4]
 8006d3a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006d3c:	f001 fc2c 	bl	8008598 <_svfiprintf_r>
 8006d40:	9b02      	ldr	r3, [sp, #8]
 8006d42:	701c      	strb	r4, [r3, #0]
 8006d44:	b01d      	add	sp, #116	@ 0x74
 8006d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d4a:	b003      	add	sp, #12
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	20000018 	.word	0x20000018
 8006d54:	ffff0208 	.word	0xffff0208

08006d58 <__sread>:
 8006d58:	b510      	push	{r4, lr}
 8006d5a:	460c      	mov	r4, r1
 8006d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d60:	f000 f86c 	bl	8006e3c <_read_r>
 8006d64:	2800      	cmp	r0, #0
 8006d66:	bfab      	itete	ge
 8006d68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d6a:	89a3      	ldrhlt	r3, [r4, #12]
 8006d6c:	181b      	addge	r3, r3, r0
 8006d6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d72:	bfac      	ite	ge
 8006d74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d76:	81a3      	strhlt	r3, [r4, #12]
 8006d78:	bd10      	pop	{r4, pc}

08006d7a <__swrite>:
 8006d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d7e:	461f      	mov	r7, r3
 8006d80:	898b      	ldrh	r3, [r1, #12]
 8006d82:	4605      	mov	r5, r0
 8006d84:	05db      	lsls	r3, r3, #23
 8006d86:	460c      	mov	r4, r1
 8006d88:	4616      	mov	r6, r2
 8006d8a:	d505      	bpl.n	8006d98 <__swrite+0x1e>
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d94:	f000 f840 	bl	8006e18 <_lseek_r>
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	4632      	mov	r2, r6
 8006d9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006da0:	81a3      	strh	r3, [r4, #12]
 8006da2:	4628      	mov	r0, r5
 8006da4:	463b      	mov	r3, r7
 8006da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dae:	f000 b857 	b.w	8006e60 <_write_r>

08006db2 <__sseek>:
 8006db2:	b510      	push	{r4, lr}
 8006db4:	460c      	mov	r4, r1
 8006db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dba:	f000 f82d 	bl	8006e18 <_lseek_r>
 8006dbe:	1c43      	adds	r3, r0, #1
 8006dc0:	89a3      	ldrh	r3, [r4, #12]
 8006dc2:	bf15      	itete	ne
 8006dc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006dc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006dca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006dce:	81a3      	strheq	r3, [r4, #12]
 8006dd0:	bf18      	it	ne
 8006dd2:	81a3      	strhne	r3, [r4, #12]
 8006dd4:	bd10      	pop	{r4, pc}

08006dd6 <__sclose>:
 8006dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dda:	f000 b80d 	b.w	8006df8 <_close_r>

08006dde <memset>:
 8006dde:	4603      	mov	r3, r0
 8006de0:	4402      	add	r2, r0
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d100      	bne.n	8006de8 <memset+0xa>
 8006de6:	4770      	bx	lr
 8006de8:	f803 1b01 	strb.w	r1, [r3], #1
 8006dec:	e7f9      	b.n	8006de2 <memset+0x4>
	...

08006df0 <_localeconv_r>:
 8006df0:	4800      	ldr	r0, [pc, #0]	@ (8006df4 <_localeconv_r+0x4>)
 8006df2:	4770      	bx	lr
 8006df4:	20000158 	.word	0x20000158

08006df8 <_close_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	4d05      	ldr	r5, [pc, #20]	@ (8006e14 <_close_r+0x1c>)
 8006dfe:	4604      	mov	r4, r0
 8006e00:	4608      	mov	r0, r1
 8006e02:	602b      	str	r3, [r5, #0]
 8006e04:	f7fa fdb9 	bl	800197a <_close>
 8006e08:	1c43      	adds	r3, r0, #1
 8006e0a:	d102      	bne.n	8006e12 <_close_r+0x1a>
 8006e0c:	682b      	ldr	r3, [r5, #0]
 8006e0e:	b103      	cbz	r3, 8006e12 <_close_r+0x1a>
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	bd38      	pop	{r3, r4, r5, pc}
 8006e14:	2000058c 	.word	0x2000058c

08006e18 <_lseek_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	4608      	mov	r0, r1
 8006e1e:	4611      	mov	r1, r2
 8006e20:	2200      	movs	r2, #0
 8006e22:	4d05      	ldr	r5, [pc, #20]	@ (8006e38 <_lseek_r+0x20>)
 8006e24:	602a      	str	r2, [r5, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	f7fa fdcb 	bl	80019c2 <_lseek>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d102      	bne.n	8006e36 <_lseek_r+0x1e>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	b103      	cbz	r3, 8006e36 <_lseek_r+0x1e>
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	2000058c 	.word	0x2000058c

08006e3c <_read_r>:
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	4604      	mov	r4, r0
 8006e40:	4608      	mov	r0, r1
 8006e42:	4611      	mov	r1, r2
 8006e44:	2200      	movs	r2, #0
 8006e46:	4d05      	ldr	r5, [pc, #20]	@ (8006e5c <_read_r+0x20>)
 8006e48:	602a      	str	r2, [r5, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	f7fa fd5c 	bl	8001908 <_read>
 8006e50:	1c43      	adds	r3, r0, #1
 8006e52:	d102      	bne.n	8006e5a <_read_r+0x1e>
 8006e54:	682b      	ldr	r3, [r5, #0]
 8006e56:	b103      	cbz	r3, 8006e5a <_read_r+0x1e>
 8006e58:	6023      	str	r3, [r4, #0]
 8006e5a:	bd38      	pop	{r3, r4, r5, pc}
 8006e5c:	2000058c 	.word	0x2000058c

08006e60 <_write_r>:
 8006e60:	b538      	push	{r3, r4, r5, lr}
 8006e62:	4604      	mov	r4, r0
 8006e64:	4608      	mov	r0, r1
 8006e66:	4611      	mov	r1, r2
 8006e68:	2200      	movs	r2, #0
 8006e6a:	4d05      	ldr	r5, [pc, #20]	@ (8006e80 <_write_r+0x20>)
 8006e6c:	602a      	str	r2, [r5, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	f7fa fd67 	bl	8001942 <_write>
 8006e74:	1c43      	adds	r3, r0, #1
 8006e76:	d102      	bne.n	8006e7e <_write_r+0x1e>
 8006e78:	682b      	ldr	r3, [r5, #0]
 8006e7a:	b103      	cbz	r3, 8006e7e <_write_r+0x1e>
 8006e7c:	6023      	str	r3, [r4, #0]
 8006e7e:	bd38      	pop	{r3, r4, r5, pc}
 8006e80:	2000058c 	.word	0x2000058c

08006e84 <__errno>:
 8006e84:	4b01      	ldr	r3, [pc, #4]	@ (8006e8c <__errno+0x8>)
 8006e86:	6818      	ldr	r0, [r3, #0]
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	20000018 	.word	0x20000018

08006e90 <__libc_init_array>:
 8006e90:	b570      	push	{r4, r5, r6, lr}
 8006e92:	2600      	movs	r6, #0
 8006e94:	4d0c      	ldr	r5, [pc, #48]	@ (8006ec8 <__libc_init_array+0x38>)
 8006e96:	4c0d      	ldr	r4, [pc, #52]	@ (8006ecc <__libc_init_array+0x3c>)
 8006e98:	1b64      	subs	r4, r4, r5
 8006e9a:	10a4      	asrs	r4, r4, #2
 8006e9c:	42a6      	cmp	r6, r4
 8006e9e:	d109      	bne.n	8006eb4 <__libc_init_array+0x24>
 8006ea0:	f002 f874 	bl	8008f8c <_init>
 8006ea4:	2600      	movs	r6, #0
 8006ea6:	4d0a      	ldr	r5, [pc, #40]	@ (8006ed0 <__libc_init_array+0x40>)
 8006ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8006ed4 <__libc_init_array+0x44>)
 8006eaa:	1b64      	subs	r4, r4, r5
 8006eac:	10a4      	asrs	r4, r4, #2
 8006eae:	42a6      	cmp	r6, r4
 8006eb0:	d105      	bne.n	8006ebe <__libc_init_array+0x2e>
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}
 8006eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb8:	4798      	blx	r3
 8006eba:	3601      	adds	r6, #1
 8006ebc:	e7ee      	b.n	8006e9c <__libc_init_array+0xc>
 8006ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec2:	4798      	blx	r3
 8006ec4:	3601      	adds	r6, #1
 8006ec6:	e7f2      	b.n	8006eae <__libc_init_array+0x1e>
 8006ec8:	08009434 	.word	0x08009434
 8006ecc:	08009434 	.word	0x08009434
 8006ed0:	08009434 	.word	0x08009434
 8006ed4:	08009438 	.word	0x08009438

08006ed8 <__retarget_lock_init_recursive>:
 8006ed8:	4770      	bx	lr

08006eda <__retarget_lock_acquire_recursive>:
 8006eda:	4770      	bx	lr

08006edc <__retarget_lock_release_recursive>:
 8006edc:	4770      	bx	lr

08006ede <memchr>:
 8006ede:	4603      	mov	r3, r0
 8006ee0:	b510      	push	{r4, lr}
 8006ee2:	b2c9      	uxtb	r1, r1
 8006ee4:	4402      	add	r2, r0
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	4618      	mov	r0, r3
 8006eea:	d101      	bne.n	8006ef0 <memchr+0x12>
 8006eec:	2000      	movs	r0, #0
 8006eee:	e003      	b.n	8006ef8 <memchr+0x1a>
 8006ef0:	7804      	ldrb	r4, [r0, #0]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	428c      	cmp	r4, r1
 8006ef6:	d1f6      	bne.n	8006ee6 <memchr+0x8>
 8006ef8:	bd10      	pop	{r4, pc}
	...

08006efc <__assert_func>:
 8006efc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006efe:	4614      	mov	r4, r2
 8006f00:	461a      	mov	r2, r3
 8006f02:	4b09      	ldr	r3, [pc, #36]	@ (8006f28 <__assert_func+0x2c>)
 8006f04:	4605      	mov	r5, r0
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68d8      	ldr	r0, [r3, #12]
 8006f0a:	b14c      	cbz	r4, 8006f20 <__assert_func+0x24>
 8006f0c:	4b07      	ldr	r3, [pc, #28]	@ (8006f2c <__assert_func+0x30>)
 8006f0e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f12:	9100      	str	r1, [sp, #0]
 8006f14:	462b      	mov	r3, r5
 8006f16:	4906      	ldr	r1, [pc, #24]	@ (8006f30 <__assert_func+0x34>)
 8006f18:	f001 fce2 	bl	80088e0 <fiprintf>
 8006f1c:	f001 fd2a 	bl	8008974 <abort>
 8006f20:	4b04      	ldr	r3, [pc, #16]	@ (8006f34 <__assert_func+0x38>)
 8006f22:	461c      	mov	r4, r3
 8006f24:	e7f3      	b.n	8006f0e <__assert_func+0x12>
 8006f26:	bf00      	nop
 8006f28:	20000018 	.word	0x20000018
 8006f2c:	08009105 	.word	0x08009105
 8006f30:	08009112 	.word	0x08009112
 8006f34:	08009140 	.word	0x08009140

08006f38 <quorem>:
 8006f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3c:	6903      	ldr	r3, [r0, #16]
 8006f3e:	690c      	ldr	r4, [r1, #16]
 8006f40:	4607      	mov	r7, r0
 8006f42:	42a3      	cmp	r3, r4
 8006f44:	db7e      	blt.n	8007044 <quorem+0x10c>
 8006f46:	3c01      	subs	r4, #1
 8006f48:	00a3      	lsls	r3, r4, #2
 8006f4a:	f100 0514 	add.w	r5, r0, #20
 8006f4e:	f101 0814 	add.w	r8, r1, #20
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f58:	9301      	str	r3, [sp, #4]
 8006f5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f62:	3301      	adds	r3, #1
 8006f64:	429a      	cmp	r2, r3
 8006f66:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f6a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f6e:	d32e      	bcc.n	8006fce <quorem+0x96>
 8006f70:	f04f 0a00 	mov.w	sl, #0
 8006f74:	46c4      	mov	ip, r8
 8006f76:	46ae      	mov	lr, r5
 8006f78:	46d3      	mov	fp, sl
 8006f7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f7e:	b298      	uxth	r0, r3
 8006f80:	fb06 a000 	mla	r0, r6, r0, sl
 8006f84:	0c1b      	lsrs	r3, r3, #16
 8006f86:	0c02      	lsrs	r2, r0, #16
 8006f88:	fb06 2303 	mla	r3, r6, r3, r2
 8006f8c:	f8de 2000 	ldr.w	r2, [lr]
 8006f90:	b280      	uxth	r0, r0
 8006f92:	b292      	uxth	r2, r2
 8006f94:	1a12      	subs	r2, r2, r0
 8006f96:	445a      	add	r2, fp
 8006f98:	f8de 0000 	ldr.w	r0, [lr]
 8006f9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006fa6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006faa:	b292      	uxth	r2, r2
 8006fac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006fb0:	45e1      	cmp	r9, ip
 8006fb2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006fb6:	f84e 2b04 	str.w	r2, [lr], #4
 8006fba:	d2de      	bcs.n	8006f7a <quorem+0x42>
 8006fbc:	9b00      	ldr	r3, [sp, #0]
 8006fbe:	58eb      	ldr	r3, [r5, r3]
 8006fc0:	b92b      	cbnz	r3, 8006fce <quorem+0x96>
 8006fc2:	9b01      	ldr	r3, [sp, #4]
 8006fc4:	3b04      	subs	r3, #4
 8006fc6:	429d      	cmp	r5, r3
 8006fc8:	461a      	mov	r2, r3
 8006fca:	d32f      	bcc.n	800702c <quorem+0xf4>
 8006fcc:	613c      	str	r4, [r7, #16]
 8006fce:	4638      	mov	r0, r7
 8006fd0:	f001 f97e 	bl	80082d0 <__mcmp>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	db25      	blt.n	8007024 <quorem+0xec>
 8006fd8:	4629      	mov	r1, r5
 8006fda:	2000      	movs	r0, #0
 8006fdc:	f858 2b04 	ldr.w	r2, [r8], #4
 8006fe0:	f8d1 c000 	ldr.w	ip, [r1]
 8006fe4:	fa1f fe82 	uxth.w	lr, r2
 8006fe8:	fa1f f38c 	uxth.w	r3, ip
 8006fec:	eba3 030e 	sub.w	r3, r3, lr
 8006ff0:	4403      	add	r3, r0
 8006ff2:	0c12      	lsrs	r2, r2, #16
 8006ff4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006ff8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007002:	45c1      	cmp	r9, r8
 8007004:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007008:	f841 3b04 	str.w	r3, [r1], #4
 800700c:	d2e6      	bcs.n	8006fdc <quorem+0xa4>
 800700e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007012:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007016:	b922      	cbnz	r2, 8007022 <quorem+0xea>
 8007018:	3b04      	subs	r3, #4
 800701a:	429d      	cmp	r5, r3
 800701c:	461a      	mov	r2, r3
 800701e:	d30b      	bcc.n	8007038 <quorem+0x100>
 8007020:	613c      	str	r4, [r7, #16]
 8007022:	3601      	adds	r6, #1
 8007024:	4630      	mov	r0, r6
 8007026:	b003      	add	sp, #12
 8007028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702c:	6812      	ldr	r2, [r2, #0]
 800702e:	3b04      	subs	r3, #4
 8007030:	2a00      	cmp	r2, #0
 8007032:	d1cb      	bne.n	8006fcc <quorem+0x94>
 8007034:	3c01      	subs	r4, #1
 8007036:	e7c6      	b.n	8006fc6 <quorem+0x8e>
 8007038:	6812      	ldr	r2, [r2, #0]
 800703a:	3b04      	subs	r3, #4
 800703c:	2a00      	cmp	r2, #0
 800703e:	d1ef      	bne.n	8007020 <quorem+0xe8>
 8007040:	3c01      	subs	r4, #1
 8007042:	e7ea      	b.n	800701a <quorem+0xe2>
 8007044:	2000      	movs	r0, #0
 8007046:	e7ee      	b.n	8007026 <quorem+0xee>

08007048 <_dtoa_r>:
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	4614      	mov	r4, r2
 800704e:	461d      	mov	r5, r3
 8007050:	69c7      	ldr	r7, [r0, #28]
 8007052:	b097      	sub	sp, #92	@ 0x5c
 8007054:	4681      	mov	r9, r0
 8007056:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800705a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800705c:	b97f      	cbnz	r7, 800707e <_dtoa_r+0x36>
 800705e:	2010      	movs	r0, #16
 8007060:	f000 fe0e 	bl	8007c80 <malloc>
 8007064:	4602      	mov	r2, r0
 8007066:	f8c9 001c 	str.w	r0, [r9, #28]
 800706a:	b920      	cbnz	r0, 8007076 <_dtoa_r+0x2e>
 800706c:	21ef      	movs	r1, #239	@ 0xef
 800706e:	4bac      	ldr	r3, [pc, #688]	@ (8007320 <_dtoa_r+0x2d8>)
 8007070:	48ac      	ldr	r0, [pc, #688]	@ (8007324 <_dtoa_r+0x2dc>)
 8007072:	f7ff ff43 	bl	8006efc <__assert_func>
 8007076:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800707a:	6007      	str	r7, [r0, #0]
 800707c:	60c7      	str	r7, [r0, #12]
 800707e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007082:	6819      	ldr	r1, [r3, #0]
 8007084:	b159      	cbz	r1, 800709e <_dtoa_r+0x56>
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	2301      	movs	r3, #1
 800708a:	4093      	lsls	r3, r2
 800708c:	604a      	str	r2, [r1, #4]
 800708e:	608b      	str	r3, [r1, #8]
 8007090:	4648      	mov	r0, r9
 8007092:	f000 feeb 	bl	8007e6c <_Bfree>
 8007096:	2200      	movs	r2, #0
 8007098:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	1e2b      	subs	r3, r5, #0
 80070a0:	bfaf      	iteee	ge
 80070a2:	2300      	movge	r3, #0
 80070a4:	2201      	movlt	r2, #1
 80070a6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80070aa:	9307      	strlt	r3, [sp, #28]
 80070ac:	bfa8      	it	ge
 80070ae:	6033      	strge	r3, [r6, #0]
 80070b0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80070b4:	4b9c      	ldr	r3, [pc, #624]	@ (8007328 <_dtoa_r+0x2e0>)
 80070b6:	bfb8      	it	lt
 80070b8:	6032      	strlt	r2, [r6, #0]
 80070ba:	ea33 0308 	bics.w	r3, r3, r8
 80070be:	d112      	bne.n	80070e6 <_dtoa_r+0x9e>
 80070c0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80070c4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80070c6:	6013      	str	r3, [r2, #0]
 80070c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80070cc:	4323      	orrs	r3, r4
 80070ce:	f000 855e 	beq.w	8007b8e <_dtoa_r+0xb46>
 80070d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80070d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800732c <_dtoa_r+0x2e4>
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 8560 	beq.w	8007b9e <_dtoa_r+0xb56>
 80070de:	f10a 0303 	add.w	r3, sl, #3
 80070e2:	f000 bd5a 	b.w	8007b9a <_dtoa_r+0xb52>
 80070e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070ea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80070ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070f2:	2200      	movs	r2, #0
 80070f4:	2300      	movs	r3, #0
 80070f6:	f7f9 fc57 	bl	80009a8 <__aeabi_dcmpeq>
 80070fa:	4607      	mov	r7, r0
 80070fc:	b158      	cbz	r0, 8007116 <_dtoa_r+0xce>
 80070fe:	2301      	movs	r3, #1
 8007100:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007102:	6013      	str	r3, [r2, #0]
 8007104:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007106:	b113      	cbz	r3, 800710e <_dtoa_r+0xc6>
 8007108:	4b89      	ldr	r3, [pc, #548]	@ (8007330 <_dtoa_r+0x2e8>)
 800710a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800710c:	6013      	str	r3, [r2, #0]
 800710e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8007334 <_dtoa_r+0x2ec>
 8007112:	f000 bd44 	b.w	8007b9e <_dtoa_r+0xb56>
 8007116:	ab14      	add	r3, sp, #80	@ 0x50
 8007118:	9301      	str	r3, [sp, #4]
 800711a:	ab15      	add	r3, sp, #84	@ 0x54
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	4648      	mov	r0, r9
 8007120:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007124:	f001 f984 	bl	8008430 <__d2b>
 8007128:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800712c:	9003      	str	r0, [sp, #12]
 800712e:	2e00      	cmp	r6, #0
 8007130:	d078      	beq.n	8007224 <_dtoa_r+0x1dc>
 8007132:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007136:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007138:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800713c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007140:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007144:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007148:	9712      	str	r7, [sp, #72]	@ 0x48
 800714a:	4619      	mov	r1, r3
 800714c:	2200      	movs	r2, #0
 800714e:	4b7a      	ldr	r3, [pc, #488]	@ (8007338 <_dtoa_r+0x2f0>)
 8007150:	f7f9 f80a 	bl	8000168 <__aeabi_dsub>
 8007154:	a36c      	add	r3, pc, #432	@ (adr r3, 8007308 <_dtoa_r+0x2c0>)
 8007156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715a:	f7f9 f9bd 	bl	80004d8 <__aeabi_dmul>
 800715e:	a36c      	add	r3, pc, #432	@ (adr r3, 8007310 <_dtoa_r+0x2c8>)
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	f7f9 f802 	bl	800016c <__adddf3>
 8007168:	4604      	mov	r4, r0
 800716a:	4630      	mov	r0, r6
 800716c:	460d      	mov	r5, r1
 800716e:	f7f9 f949 	bl	8000404 <__aeabi_i2d>
 8007172:	a369      	add	r3, pc, #420	@ (adr r3, 8007318 <_dtoa_r+0x2d0>)
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	f7f9 f9ae 	bl	80004d8 <__aeabi_dmul>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	4620      	mov	r0, r4
 8007182:	4629      	mov	r1, r5
 8007184:	f7f8 fff2 	bl	800016c <__adddf3>
 8007188:	4604      	mov	r4, r0
 800718a:	460d      	mov	r5, r1
 800718c:	f7f9 fc54 	bl	8000a38 <__aeabi_d2iz>
 8007190:	2200      	movs	r2, #0
 8007192:	4607      	mov	r7, r0
 8007194:	2300      	movs	r3, #0
 8007196:	4620      	mov	r0, r4
 8007198:	4629      	mov	r1, r5
 800719a:	f7f9 fc0f 	bl	80009bc <__aeabi_dcmplt>
 800719e:	b140      	cbz	r0, 80071b2 <_dtoa_r+0x16a>
 80071a0:	4638      	mov	r0, r7
 80071a2:	f7f9 f92f 	bl	8000404 <__aeabi_i2d>
 80071a6:	4622      	mov	r2, r4
 80071a8:	462b      	mov	r3, r5
 80071aa:	f7f9 fbfd 	bl	80009a8 <__aeabi_dcmpeq>
 80071ae:	b900      	cbnz	r0, 80071b2 <_dtoa_r+0x16a>
 80071b0:	3f01      	subs	r7, #1
 80071b2:	2f16      	cmp	r7, #22
 80071b4:	d854      	bhi.n	8007260 <_dtoa_r+0x218>
 80071b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071ba:	4b60      	ldr	r3, [pc, #384]	@ (800733c <_dtoa_r+0x2f4>)
 80071bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	f7f9 fbfa 	bl	80009bc <__aeabi_dcmplt>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d04b      	beq.n	8007264 <_dtoa_r+0x21c>
 80071cc:	2300      	movs	r3, #0
 80071ce:	3f01      	subs	r7, #1
 80071d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80071d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80071d4:	1b9b      	subs	r3, r3, r6
 80071d6:	1e5a      	subs	r2, r3, #1
 80071d8:	bf49      	itett	mi
 80071da:	f1c3 0301 	rsbmi	r3, r3, #1
 80071de:	2300      	movpl	r3, #0
 80071e0:	9304      	strmi	r3, [sp, #16]
 80071e2:	2300      	movmi	r3, #0
 80071e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80071e6:	bf54      	ite	pl
 80071e8:	9304      	strpl	r3, [sp, #16]
 80071ea:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80071ec:	2f00      	cmp	r7, #0
 80071ee:	db3b      	blt.n	8007268 <_dtoa_r+0x220>
 80071f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071f2:	970e      	str	r7, [sp, #56]	@ 0x38
 80071f4:	443b      	add	r3, r7
 80071f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80071f8:	2300      	movs	r3, #0
 80071fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80071fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80071fe:	2b09      	cmp	r3, #9
 8007200:	d865      	bhi.n	80072ce <_dtoa_r+0x286>
 8007202:	2b05      	cmp	r3, #5
 8007204:	bfc4      	itt	gt
 8007206:	3b04      	subgt	r3, #4
 8007208:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800720a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800720c:	bfc8      	it	gt
 800720e:	2400      	movgt	r4, #0
 8007210:	f1a3 0302 	sub.w	r3, r3, #2
 8007214:	bfd8      	it	le
 8007216:	2401      	movle	r4, #1
 8007218:	2b03      	cmp	r3, #3
 800721a:	d864      	bhi.n	80072e6 <_dtoa_r+0x29e>
 800721c:	e8df f003 	tbb	[pc, r3]
 8007220:	2c385553 	.word	0x2c385553
 8007224:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007228:	441e      	add	r6, r3
 800722a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800722e:	2b20      	cmp	r3, #32
 8007230:	bfc1      	itttt	gt
 8007232:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007236:	fa08 f803 	lslgt.w	r8, r8, r3
 800723a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800723e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007242:	bfd6      	itet	le
 8007244:	f1c3 0320 	rsble	r3, r3, #32
 8007248:	ea48 0003 	orrgt.w	r0, r8, r3
 800724c:	fa04 f003 	lslle.w	r0, r4, r3
 8007250:	f7f9 f8c8 	bl	80003e4 <__aeabi_ui2d>
 8007254:	2201      	movs	r2, #1
 8007256:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800725a:	3e01      	subs	r6, #1
 800725c:	9212      	str	r2, [sp, #72]	@ 0x48
 800725e:	e774      	b.n	800714a <_dtoa_r+0x102>
 8007260:	2301      	movs	r3, #1
 8007262:	e7b5      	b.n	80071d0 <_dtoa_r+0x188>
 8007264:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007266:	e7b4      	b.n	80071d2 <_dtoa_r+0x18a>
 8007268:	9b04      	ldr	r3, [sp, #16]
 800726a:	1bdb      	subs	r3, r3, r7
 800726c:	9304      	str	r3, [sp, #16]
 800726e:	427b      	negs	r3, r7
 8007270:	930a      	str	r3, [sp, #40]	@ 0x28
 8007272:	2300      	movs	r3, #0
 8007274:	930e      	str	r3, [sp, #56]	@ 0x38
 8007276:	e7c1      	b.n	80071fc <_dtoa_r+0x1b4>
 8007278:	2301      	movs	r3, #1
 800727a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800727c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800727e:	eb07 0b03 	add.w	fp, r7, r3
 8007282:	f10b 0301 	add.w	r3, fp, #1
 8007286:	2b01      	cmp	r3, #1
 8007288:	9308      	str	r3, [sp, #32]
 800728a:	bfb8      	it	lt
 800728c:	2301      	movlt	r3, #1
 800728e:	e006      	b.n	800729e <_dtoa_r+0x256>
 8007290:	2301      	movs	r3, #1
 8007292:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007294:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007296:	2b00      	cmp	r3, #0
 8007298:	dd28      	ble.n	80072ec <_dtoa_r+0x2a4>
 800729a:	469b      	mov	fp, r3
 800729c:	9308      	str	r3, [sp, #32]
 800729e:	2100      	movs	r1, #0
 80072a0:	2204      	movs	r2, #4
 80072a2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80072a6:	f102 0514 	add.w	r5, r2, #20
 80072aa:	429d      	cmp	r5, r3
 80072ac:	d926      	bls.n	80072fc <_dtoa_r+0x2b4>
 80072ae:	6041      	str	r1, [r0, #4]
 80072b0:	4648      	mov	r0, r9
 80072b2:	f000 fd9b 	bl	8007dec <_Balloc>
 80072b6:	4682      	mov	sl, r0
 80072b8:	2800      	cmp	r0, #0
 80072ba:	d143      	bne.n	8007344 <_dtoa_r+0x2fc>
 80072bc:	4602      	mov	r2, r0
 80072be:	f240 11af 	movw	r1, #431	@ 0x1af
 80072c2:	4b1f      	ldr	r3, [pc, #124]	@ (8007340 <_dtoa_r+0x2f8>)
 80072c4:	e6d4      	b.n	8007070 <_dtoa_r+0x28>
 80072c6:	2300      	movs	r3, #0
 80072c8:	e7e3      	b.n	8007292 <_dtoa_r+0x24a>
 80072ca:	2300      	movs	r3, #0
 80072cc:	e7d5      	b.n	800727a <_dtoa_r+0x232>
 80072ce:	2401      	movs	r4, #1
 80072d0:	2300      	movs	r3, #0
 80072d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80072d4:	9320      	str	r3, [sp, #128]	@ 0x80
 80072d6:	f04f 3bff 	mov.w	fp, #4294967295
 80072da:	2200      	movs	r2, #0
 80072dc:	2312      	movs	r3, #18
 80072de:	f8cd b020 	str.w	fp, [sp, #32]
 80072e2:	9221      	str	r2, [sp, #132]	@ 0x84
 80072e4:	e7db      	b.n	800729e <_dtoa_r+0x256>
 80072e6:	2301      	movs	r3, #1
 80072e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072ea:	e7f4      	b.n	80072d6 <_dtoa_r+0x28e>
 80072ec:	f04f 0b01 	mov.w	fp, #1
 80072f0:	465b      	mov	r3, fp
 80072f2:	f8cd b020 	str.w	fp, [sp, #32]
 80072f6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80072fa:	e7d0      	b.n	800729e <_dtoa_r+0x256>
 80072fc:	3101      	adds	r1, #1
 80072fe:	0052      	lsls	r2, r2, #1
 8007300:	e7d1      	b.n	80072a6 <_dtoa_r+0x25e>
 8007302:	bf00      	nop
 8007304:	f3af 8000 	nop.w
 8007308:	636f4361 	.word	0x636f4361
 800730c:	3fd287a7 	.word	0x3fd287a7
 8007310:	8b60c8b3 	.word	0x8b60c8b3
 8007314:	3fc68a28 	.word	0x3fc68a28
 8007318:	509f79fb 	.word	0x509f79fb
 800731c:	3fd34413 	.word	0x3fd34413
 8007320:	08009062 	.word	0x08009062
 8007324:	0800914e 	.word	0x0800914e
 8007328:	7ff00000 	.word	0x7ff00000
 800732c:	0800914a 	.word	0x0800914a
 8007330:	080090e2 	.word	0x080090e2
 8007334:	080090e1 	.word	0x080090e1
 8007338:	3ff80000 	.word	0x3ff80000
 800733c:	08009260 	.word	0x08009260
 8007340:	080091a6 	.word	0x080091a6
 8007344:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007348:	6018      	str	r0, [r3, #0]
 800734a:	9b08      	ldr	r3, [sp, #32]
 800734c:	2b0e      	cmp	r3, #14
 800734e:	f200 80a1 	bhi.w	8007494 <_dtoa_r+0x44c>
 8007352:	2c00      	cmp	r4, #0
 8007354:	f000 809e 	beq.w	8007494 <_dtoa_r+0x44c>
 8007358:	2f00      	cmp	r7, #0
 800735a:	dd33      	ble.n	80073c4 <_dtoa_r+0x37c>
 800735c:	4b9c      	ldr	r3, [pc, #624]	@ (80075d0 <_dtoa_r+0x588>)
 800735e:	f007 020f 	and.w	r2, r7, #15
 8007362:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007366:	05f8      	lsls	r0, r7, #23
 8007368:	e9d3 3400 	ldrd	r3, r4, [r3]
 800736c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007370:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007374:	d516      	bpl.n	80073a4 <_dtoa_r+0x35c>
 8007376:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800737a:	4b96      	ldr	r3, [pc, #600]	@ (80075d4 <_dtoa_r+0x58c>)
 800737c:	2603      	movs	r6, #3
 800737e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007382:	f7f9 f9d3 	bl	800072c <__aeabi_ddiv>
 8007386:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800738a:	f004 040f 	and.w	r4, r4, #15
 800738e:	4d91      	ldr	r5, [pc, #580]	@ (80075d4 <_dtoa_r+0x58c>)
 8007390:	b954      	cbnz	r4, 80073a8 <_dtoa_r+0x360>
 8007392:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800739a:	f7f9 f9c7 	bl	800072c <__aeabi_ddiv>
 800739e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073a2:	e028      	b.n	80073f6 <_dtoa_r+0x3ae>
 80073a4:	2602      	movs	r6, #2
 80073a6:	e7f2      	b.n	800738e <_dtoa_r+0x346>
 80073a8:	07e1      	lsls	r1, r4, #31
 80073aa:	d508      	bpl.n	80073be <_dtoa_r+0x376>
 80073ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073b4:	f7f9 f890 	bl	80004d8 <__aeabi_dmul>
 80073b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073bc:	3601      	adds	r6, #1
 80073be:	1064      	asrs	r4, r4, #1
 80073c0:	3508      	adds	r5, #8
 80073c2:	e7e5      	b.n	8007390 <_dtoa_r+0x348>
 80073c4:	f000 80af 	beq.w	8007526 <_dtoa_r+0x4de>
 80073c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073cc:	427c      	negs	r4, r7
 80073ce:	4b80      	ldr	r3, [pc, #512]	@ (80075d0 <_dtoa_r+0x588>)
 80073d0:	f004 020f 	and.w	r2, r4, #15
 80073d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	f7f9 f87c 	bl	80004d8 <__aeabi_dmul>
 80073e0:	2602      	movs	r6, #2
 80073e2:	2300      	movs	r3, #0
 80073e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073e8:	4d7a      	ldr	r5, [pc, #488]	@ (80075d4 <_dtoa_r+0x58c>)
 80073ea:	1124      	asrs	r4, r4, #4
 80073ec:	2c00      	cmp	r4, #0
 80073ee:	f040 808f 	bne.w	8007510 <_dtoa_r+0x4c8>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1d3      	bne.n	800739e <_dtoa_r+0x356>
 80073f6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80073fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 8094 	beq.w	800752a <_dtoa_r+0x4e2>
 8007402:	2200      	movs	r2, #0
 8007404:	4620      	mov	r0, r4
 8007406:	4629      	mov	r1, r5
 8007408:	4b73      	ldr	r3, [pc, #460]	@ (80075d8 <_dtoa_r+0x590>)
 800740a:	f7f9 fad7 	bl	80009bc <__aeabi_dcmplt>
 800740e:	2800      	cmp	r0, #0
 8007410:	f000 808b 	beq.w	800752a <_dtoa_r+0x4e2>
 8007414:	9b08      	ldr	r3, [sp, #32]
 8007416:	2b00      	cmp	r3, #0
 8007418:	f000 8087 	beq.w	800752a <_dtoa_r+0x4e2>
 800741c:	f1bb 0f00 	cmp.w	fp, #0
 8007420:	dd34      	ble.n	800748c <_dtoa_r+0x444>
 8007422:	4620      	mov	r0, r4
 8007424:	2200      	movs	r2, #0
 8007426:	4629      	mov	r1, r5
 8007428:	4b6c      	ldr	r3, [pc, #432]	@ (80075dc <_dtoa_r+0x594>)
 800742a:	f7f9 f855 	bl	80004d8 <__aeabi_dmul>
 800742e:	465c      	mov	r4, fp
 8007430:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007434:	f107 38ff 	add.w	r8, r7, #4294967295
 8007438:	3601      	adds	r6, #1
 800743a:	4630      	mov	r0, r6
 800743c:	f7f8 ffe2 	bl	8000404 <__aeabi_i2d>
 8007440:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007444:	f7f9 f848 	bl	80004d8 <__aeabi_dmul>
 8007448:	2200      	movs	r2, #0
 800744a:	4b65      	ldr	r3, [pc, #404]	@ (80075e0 <_dtoa_r+0x598>)
 800744c:	f7f8 fe8e 	bl	800016c <__adddf3>
 8007450:	4605      	mov	r5, r0
 8007452:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007456:	2c00      	cmp	r4, #0
 8007458:	d16a      	bne.n	8007530 <_dtoa_r+0x4e8>
 800745a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800745e:	2200      	movs	r2, #0
 8007460:	4b60      	ldr	r3, [pc, #384]	@ (80075e4 <_dtoa_r+0x59c>)
 8007462:	f7f8 fe81 	bl	8000168 <__aeabi_dsub>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800746e:	462a      	mov	r2, r5
 8007470:	4633      	mov	r3, r6
 8007472:	f7f9 fac1 	bl	80009f8 <__aeabi_dcmpgt>
 8007476:	2800      	cmp	r0, #0
 8007478:	f040 8298 	bne.w	80079ac <_dtoa_r+0x964>
 800747c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007480:	462a      	mov	r2, r5
 8007482:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007486:	f7f9 fa99 	bl	80009bc <__aeabi_dcmplt>
 800748a:	bb38      	cbnz	r0, 80074dc <_dtoa_r+0x494>
 800748c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007490:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007494:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007496:	2b00      	cmp	r3, #0
 8007498:	f2c0 8157 	blt.w	800774a <_dtoa_r+0x702>
 800749c:	2f0e      	cmp	r7, #14
 800749e:	f300 8154 	bgt.w	800774a <_dtoa_r+0x702>
 80074a2:	4b4b      	ldr	r3, [pc, #300]	@ (80075d0 <_dtoa_r+0x588>)
 80074a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80074a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074ac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80074b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f280 80e5 	bge.w	8007682 <_dtoa_r+0x63a>
 80074b8:	9b08      	ldr	r3, [sp, #32]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f300 80e1 	bgt.w	8007682 <_dtoa_r+0x63a>
 80074c0:	d10c      	bne.n	80074dc <_dtoa_r+0x494>
 80074c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074c6:	2200      	movs	r2, #0
 80074c8:	4b46      	ldr	r3, [pc, #280]	@ (80075e4 <_dtoa_r+0x59c>)
 80074ca:	f7f9 f805 	bl	80004d8 <__aeabi_dmul>
 80074ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074d2:	f7f9 fa87 	bl	80009e4 <__aeabi_dcmpge>
 80074d6:	2800      	cmp	r0, #0
 80074d8:	f000 8266 	beq.w	80079a8 <_dtoa_r+0x960>
 80074dc:	2400      	movs	r4, #0
 80074de:	4625      	mov	r5, r4
 80074e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80074e2:	4656      	mov	r6, sl
 80074e4:	ea6f 0803 	mvn.w	r8, r3
 80074e8:	2700      	movs	r7, #0
 80074ea:	4621      	mov	r1, r4
 80074ec:	4648      	mov	r0, r9
 80074ee:	f000 fcbd 	bl	8007e6c <_Bfree>
 80074f2:	2d00      	cmp	r5, #0
 80074f4:	f000 80bd 	beq.w	8007672 <_dtoa_r+0x62a>
 80074f8:	b12f      	cbz	r7, 8007506 <_dtoa_r+0x4be>
 80074fa:	42af      	cmp	r7, r5
 80074fc:	d003      	beq.n	8007506 <_dtoa_r+0x4be>
 80074fe:	4639      	mov	r1, r7
 8007500:	4648      	mov	r0, r9
 8007502:	f000 fcb3 	bl	8007e6c <_Bfree>
 8007506:	4629      	mov	r1, r5
 8007508:	4648      	mov	r0, r9
 800750a:	f000 fcaf 	bl	8007e6c <_Bfree>
 800750e:	e0b0      	b.n	8007672 <_dtoa_r+0x62a>
 8007510:	07e2      	lsls	r2, r4, #31
 8007512:	d505      	bpl.n	8007520 <_dtoa_r+0x4d8>
 8007514:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007518:	f7f8 ffde 	bl	80004d8 <__aeabi_dmul>
 800751c:	2301      	movs	r3, #1
 800751e:	3601      	adds	r6, #1
 8007520:	1064      	asrs	r4, r4, #1
 8007522:	3508      	adds	r5, #8
 8007524:	e762      	b.n	80073ec <_dtoa_r+0x3a4>
 8007526:	2602      	movs	r6, #2
 8007528:	e765      	b.n	80073f6 <_dtoa_r+0x3ae>
 800752a:	46b8      	mov	r8, r7
 800752c:	9c08      	ldr	r4, [sp, #32]
 800752e:	e784      	b.n	800743a <_dtoa_r+0x3f2>
 8007530:	4b27      	ldr	r3, [pc, #156]	@ (80075d0 <_dtoa_r+0x588>)
 8007532:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007534:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007538:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800753c:	4454      	add	r4, sl
 800753e:	2900      	cmp	r1, #0
 8007540:	d054      	beq.n	80075ec <_dtoa_r+0x5a4>
 8007542:	2000      	movs	r0, #0
 8007544:	4928      	ldr	r1, [pc, #160]	@ (80075e8 <_dtoa_r+0x5a0>)
 8007546:	f7f9 f8f1 	bl	800072c <__aeabi_ddiv>
 800754a:	4633      	mov	r3, r6
 800754c:	462a      	mov	r2, r5
 800754e:	f7f8 fe0b 	bl	8000168 <__aeabi_dsub>
 8007552:	4656      	mov	r6, sl
 8007554:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007558:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800755c:	f7f9 fa6c 	bl	8000a38 <__aeabi_d2iz>
 8007560:	4605      	mov	r5, r0
 8007562:	f7f8 ff4f 	bl	8000404 <__aeabi_i2d>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800756e:	f7f8 fdfb 	bl	8000168 <__aeabi_dsub>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	3530      	adds	r5, #48	@ 0x30
 8007578:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800757c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007580:	f806 5b01 	strb.w	r5, [r6], #1
 8007584:	f7f9 fa1a 	bl	80009bc <__aeabi_dcmplt>
 8007588:	2800      	cmp	r0, #0
 800758a:	d172      	bne.n	8007672 <_dtoa_r+0x62a>
 800758c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007590:	2000      	movs	r0, #0
 8007592:	4911      	ldr	r1, [pc, #68]	@ (80075d8 <_dtoa_r+0x590>)
 8007594:	f7f8 fde8 	bl	8000168 <__aeabi_dsub>
 8007598:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800759c:	f7f9 fa0e 	bl	80009bc <__aeabi_dcmplt>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	f040 80b4 	bne.w	800770e <_dtoa_r+0x6c6>
 80075a6:	42a6      	cmp	r6, r4
 80075a8:	f43f af70 	beq.w	800748c <_dtoa_r+0x444>
 80075ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075b0:	2200      	movs	r2, #0
 80075b2:	4b0a      	ldr	r3, [pc, #40]	@ (80075dc <_dtoa_r+0x594>)
 80075b4:	f7f8 ff90 	bl	80004d8 <__aeabi_dmul>
 80075b8:	2200      	movs	r2, #0
 80075ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075c2:	4b06      	ldr	r3, [pc, #24]	@ (80075dc <_dtoa_r+0x594>)
 80075c4:	f7f8 ff88 	bl	80004d8 <__aeabi_dmul>
 80075c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075cc:	e7c4      	b.n	8007558 <_dtoa_r+0x510>
 80075ce:	bf00      	nop
 80075d0:	08009260 	.word	0x08009260
 80075d4:	08009238 	.word	0x08009238
 80075d8:	3ff00000 	.word	0x3ff00000
 80075dc:	40240000 	.word	0x40240000
 80075e0:	401c0000 	.word	0x401c0000
 80075e4:	40140000 	.word	0x40140000
 80075e8:	3fe00000 	.word	0x3fe00000
 80075ec:	4631      	mov	r1, r6
 80075ee:	4628      	mov	r0, r5
 80075f0:	f7f8 ff72 	bl	80004d8 <__aeabi_dmul>
 80075f4:	4656      	mov	r6, sl
 80075f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075fa:	9413      	str	r4, [sp, #76]	@ 0x4c
 80075fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007600:	f7f9 fa1a 	bl	8000a38 <__aeabi_d2iz>
 8007604:	4605      	mov	r5, r0
 8007606:	f7f8 fefd 	bl	8000404 <__aeabi_i2d>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007612:	f7f8 fda9 	bl	8000168 <__aeabi_dsub>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	3530      	adds	r5, #48	@ 0x30
 800761c:	f806 5b01 	strb.w	r5, [r6], #1
 8007620:	42a6      	cmp	r6, r4
 8007622:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007626:	f04f 0200 	mov.w	r2, #0
 800762a:	d124      	bne.n	8007676 <_dtoa_r+0x62e>
 800762c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007630:	4bae      	ldr	r3, [pc, #696]	@ (80078ec <_dtoa_r+0x8a4>)
 8007632:	f7f8 fd9b 	bl	800016c <__adddf3>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800763e:	f7f9 f9db 	bl	80009f8 <__aeabi_dcmpgt>
 8007642:	2800      	cmp	r0, #0
 8007644:	d163      	bne.n	800770e <_dtoa_r+0x6c6>
 8007646:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800764a:	2000      	movs	r0, #0
 800764c:	49a7      	ldr	r1, [pc, #668]	@ (80078ec <_dtoa_r+0x8a4>)
 800764e:	f7f8 fd8b 	bl	8000168 <__aeabi_dsub>
 8007652:	4602      	mov	r2, r0
 8007654:	460b      	mov	r3, r1
 8007656:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800765a:	f7f9 f9af 	bl	80009bc <__aeabi_dcmplt>
 800765e:	2800      	cmp	r0, #0
 8007660:	f43f af14 	beq.w	800748c <_dtoa_r+0x444>
 8007664:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007666:	1e73      	subs	r3, r6, #1
 8007668:	9313      	str	r3, [sp, #76]	@ 0x4c
 800766a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800766e:	2b30      	cmp	r3, #48	@ 0x30
 8007670:	d0f8      	beq.n	8007664 <_dtoa_r+0x61c>
 8007672:	4647      	mov	r7, r8
 8007674:	e03b      	b.n	80076ee <_dtoa_r+0x6a6>
 8007676:	4b9e      	ldr	r3, [pc, #632]	@ (80078f0 <_dtoa_r+0x8a8>)
 8007678:	f7f8 ff2e 	bl	80004d8 <__aeabi_dmul>
 800767c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007680:	e7bc      	b.n	80075fc <_dtoa_r+0x5b4>
 8007682:	4656      	mov	r6, sl
 8007684:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007688:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800768c:	4620      	mov	r0, r4
 800768e:	4629      	mov	r1, r5
 8007690:	f7f9 f84c 	bl	800072c <__aeabi_ddiv>
 8007694:	f7f9 f9d0 	bl	8000a38 <__aeabi_d2iz>
 8007698:	4680      	mov	r8, r0
 800769a:	f7f8 feb3 	bl	8000404 <__aeabi_i2d>
 800769e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076a2:	f7f8 ff19 	bl	80004d8 <__aeabi_dmul>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4620      	mov	r0, r4
 80076ac:	4629      	mov	r1, r5
 80076ae:	f7f8 fd5b 	bl	8000168 <__aeabi_dsub>
 80076b2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80076b6:	9d08      	ldr	r5, [sp, #32]
 80076b8:	f806 4b01 	strb.w	r4, [r6], #1
 80076bc:	eba6 040a 	sub.w	r4, r6, sl
 80076c0:	42a5      	cmp	r5, r4
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
 80076c6:	d133      	bne.n	8007730 <_dtoa_r+0x6e8>
 80076c8:	f7f8 fd50 	bl	800016c <__adddf3>
 80076cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076d0:	4604      	mov	r4, r0
 80076d2:	460d      	mov	r5, r1
 80076d4:	f7f9 f990 	bl	80009f8 <__aeabi_dcmpgt>
 80076d8:	b9c0      	cbnz	r0, 800770c <_dtoa_r+0x6c4>
 80076da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076de:	4620      	mov	r0, r4
 80076e0:	4629      	mov	r1, r5
 80076e2:	f7f9 f961 	bl	80009a8 <__aeabi_dcmpeq>
 80076e6:	b110      	cbz	r0, 80076ee <_dtoa_r+0x6a6>
 80076e8:	f018 0f01 	tst.w	r8, #1
 80076ec:	d10e      	bne.n	800770c <_dtoa_r+0x6c4>
 80076ee:	4648      	mov	r0, r9
 80076f0:	9903      	ldr	r1, [sp, #12]
 80076f2:	f000 fbbb 	bl	8007e6c <_Bfree>
 80076f6:	2300      	movs	r3, #0
 80076f8:	7033      	strb	r3, [r6, #0]
 80076fa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80076fc:	3701      	adds	r7, #1
 80076fe:	601f      	str	r7, [r3, #0]
 8007700:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 824b 	beq.w	8007b9e <_dtoa_r+0xb56>
 8007708:	601e      	str	r6, [r3, #0]
 800770a:	e248      	b.n	8007b9e <_dtoa_r+0xb56>
 800770c:	46b8      	mov	r8, r7
 800770e:	4633      	mov	r3, r6
 8007710:	461e      	mov	r6, r3
 8007712:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007716:	2a39      	cmp	r2, #57	@ 0x39
 8007718:	d106      	bne.n	8007728 <_dtoa_r+0x6e0>
 800771a:	459a      	cmp	sl, r3
 800771c:	d1f8      	bne.n	8007710 <_dtoa_r+0x6c8>
 800771e:	2230      	movs	r2, #48	@ 0x30
 8007720:	f108 0801 	add.w	r8, r8, #1
 8007724:	f88a 2000 	strb.w	r2, [sl]
 8007728:	781a      	ldrb	r2, [r3, #0]
 800772a:	3201      	adds	r2, #1
 800772c:	701a      	strb	r2, [r3, #0]
 800772e:	e7a0      	b.n	8007672 <_dtoa_r+0x62a>
 8007730:	2200      	movs	r2, #0
 8007732:	4b6f      	ldr	r3, [pc, #444]	@ (80078f0 <_dtoa_r+0x8a8>)
 8007734:	f7f8 fed0 	bl	80004d8 <__aeabi_dmul>
 8007738:	2200      	movs	r2, #0
 800773a:	2300      	movs	r3, #0
 800773c:	4604      	mov	r4, r0
 800773e:	460d      	mov	r5, r1
 8007740:	f7f9 f932 	bl	80009a8 <__aeabi_dcmpeq>
 8007744:	2800      	cmp	r0, #0
 8007746:	d09f      	beq.n	8007688 <_dtoa_r+0x640>
 8007748:	e7d1      	b.n	80076ee <_dtoa_r+0x6a6>
 800774a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800774c:	2a00      	cmp	r2, #0
 800774e:	f000 80ea 	beq.w	8007926 <_dtoa_r+0x8de>
 8007752:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007754:	2a01      	cmp	r2, #1
 8007756:	f300 80cd 	bgt.w	80078f4 <_dtoa_r+0x8ac>
 800775a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800775c:	2a00      	cmp	r2, #0
 800775e:	f000 80c1 	beq.w	80078e4 <_dtoa_r+0x89c>
 8007762:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007766:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007768:	9e04      	ldr	r6, [sp, #16]
 800776a:	9a04      	ldr	r2, [sp, #16]
 800776c:	2101      	movs	r1, #1
 800776e:	441a      	add	r2, r3
 8007770:	9204      	str	r2, [sp, #16]
 8007772:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007774:	4648      	mov	r0, r9
 8007776:	441a      	add	r2, r3
 8007778:	9209      	str	r2, [sp, #36]	@ 0x24
 800777a:	f000 fc2b 	bl	8007fd4 <__i2b>
 800777e:	4605      	mov	r5, r0
 8007780:	b166      	cbz	r6, 800779c <_dtoa_r+0x754>
 8007782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007784:	2b00      	cmp	r3, #0
 8007786:	dd09      	ble.n	800779c <_dtoa_r+0x754>
 8007788:	42b3      	cmp	r3, r6
 800778a:	bfa8      	it	ge
 800778c:	4633      	movge	r3, r6
 800778e:	9a04      	ldr	r2, [sp, #16]
 8007790:	1af6      	subs	r6, r6, r3
 8007792:	1ad2      	subs	r2, r2, r3
 8007794:	9204      	str	r2, [sp, #16]
 8007796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	9309      	str	r3, [sp, #36]	@ 0x24
 800779c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800779e:	b30b      	cbz	r3, 80077e4 <_dtoa_r+0x79c>
 80077a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f000 80c6 	beq.w	8007934 <_dtoa_r+0x8ec>
 80077a8:	2c00      	cmp	r4, #0
 80077aa:	f000 80c0 	beq.w	800792e <_dtoa_r+0x8e6>
 80077ae:	4629      	mov	r1, r5
 80077b0:	4622      	mov	r2, r4
 80077b2:	4648      	mov	r0, r9
 80077b4:	f000 fcc6 	bl	8008144 <__pow5mult>
 80077b8:	9a03      	ldr	r2, [sp, #12]
 80077ba:	4601      	mov	r1, r0
 80077bc:	4605      	mov	r5, r0
 80077be:	4648      	mov	r0, r9
 80077c0:	f000 fc1e 	bl	8008000 <__multiply>
 80077c4:	9903      	ldr	r1, [sp, #12]
 80077c6:	4680      	mov	r8, r0
 80077c8:	4648      	mov	r0, r9
 80077ca:	f000 fb4f 	bl	8007e6c <_Bfree>
 80077ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077d0:	1b1b      	subs	r3, r3, r4
 80077d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80077d4:	f000 80b1 	beq.w	800793a <_dtoa_r+0x8f2>
 80077d8:	4641      	mov	r1, r8
 80077da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077dc:	4648      	mov	r0, r9
 80077de:	f000 fcb1 	bl	8008144 <__pow5mult>
 80077e2:	9003      	str	r0, [sp, #12]
 80077e4:	2101      	movs	r1, #1
 80077e6:	4648      	mov	r0, r9
 80077e8:	f000 fbf4 	bl	8007fd4 <__i2b>
 80077ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077ee:	4604      	mov	r4, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 81d8 	beq.w	8007ba6 <_dtoa_r+0xb5e>
 80077f6:	461a      	mov	r2, r3
 80077f8:	4601      	mov	r1, r0
 80077fa:	4648      	mov	r0, r9
 80077fc:	f000 fca2 	bl	8008144 <__pow5mult>
 8007800:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007802:	4604      	mov	r4, r0
 8007804:	2b01      	cmp	r3, #1
 8007806:	f300 809f 	bgt.w	8007948 <_dtoa_r+0x900>
 800780a:	9b06      	ldr	r3, [sp, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	f040 8097 	bne.w	8007940 <_dtoa_r+0x8f8>
 8007812:	9b07      	ldr	r3, [sp, #28]
 8007814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007818:	2b00      	cmp	r3, #0
 800781a:	f040 8093 	bne.w	8007944 <_dtoa_r+0x8fc>
 800781e:	9b07      	ldr	r3, [sp, #28]
 8007820:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007824:	0d1b      	lsrs	r3, r3, #20
 8007826:	051b      	lsls	r3, r3, #20
 8007828:	b133      	cbz	r3, 8007838 <_dtoa_r+0x7f0>
 800782a:	9b04      	ldr	r3, [sp, #16]
 800782c:	3301      	adds	r3, #1
 800782e:	9304      	str	r3, [sp, #16]
 8007830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007832:	3301      	adds	r3, #1
 8007834:	9309      	str	r3, [sp, #36]	@ 0x24
 8007836:	2301      	movs	r3, #1
 8007838:	930a      	str	r3, [sp, #40]	@ 0x28
 800783a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 81b8 	beq.w	8007bb2 <_dtoa_r+0xb6a>
 8007842:	6923      	ldr	r3, [r4, #16]
 8007844:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007848:	6918      	ldr	r0, [r3, #16]
 800784a:	f000 fb77 	bl	8007f3c <__hi0bits>
 800784e:	f1c0 0020 	rsb	r0, r0, #32
 8007852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007854:	4418      	add	r0, r3
 8007856:	f010 001f 	ands.w	r0, r0, #31
 800785a:	f000 8082 	beq.w	8007962 <_dtoa_r+0x91a>
 800785e:	f1c0 0320 	rsb	r3, r0, #32
 8007862:	2b04      	cmp	r3, #4
 8007864:	dd73      	ble.n	800794e <_dtoa_r+0x906>
 8007866:	9b04      	ldr	r3, [sp, #16]
 8007868:	f1c0 001c 	rsb	r0, r0, #28
 800786c:	4403      	add	r3, r0
 800786e:	9304      	str	r3, [sp, #16]
 8007870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007872:	4406      	add	r6, r0
 8007874:	4403      	add	r3, r0
 8007876:	9309      	str	r3, [sp, #36]	@ 0x24
 8007878:	9b04      	ldr	r3, [sp, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	dd05      	ble.n	800788a <_dtoa_r+0x842>
 800787e:	461a      	mov	r2, r3
 8007880:	4648      	mov	r0, r9
 8007882:	9903      	ldr	r1, [sp, #12]
 8007884:	f000 fcb8 	bl	80081f8 <__lshift>
 8007888:	9003      	str	r0, [sp, #12]
 800788a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800788c:	2b00      	cmp	r3, #0
 800788e:	dd05      	ble.n	800789c <_dtoa_r+0x854>
 8007890:	4621      	mov	r1, r4
 8007892:	461a      	mov	r2, r3
 8007894:	4648      	mov	r0, r9
 8007896:	f000 fcaf 	bl	80081f8 <__lshift>
 800789a:	4604      	mov	r4, r0
 800789c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d061      	beq.n	8007966 <_dtoa_r+0x91e>
 80078a2:	4621      	mov	r1, r4
 80078a4:	9803      	ldr	r0, [sp, #12]
 80078a6:	f000 fd13 	bl	80082d0 <__mcmp>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	da5b      	bge.n	8007966 <_dtoa_r+0x91e>
 80078ae:	2300      	movs	r3, #0
 80078b0:	220a      	movs	r2, #10
 80078b2:	4648      	mov	r0, r9
 80078b4:	9903      	ldr	r1, [sp, #12]
 80078b6:	f000 fafb 	bl	8007eb0 <__multadd>
 80078ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078bc:	f107 38ff 	add.w	r8, r7, #4294967295
 80078c0:	9003      	str	r0, [sp, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 8177 	beq.w	8007bb6 <_dtoa_r+0xb6e>
 80078c8:	4629      	mov	r1, r5
 80078ca:	2300      	movs	r3, #0
 80078cc:	220a      	movs	r2, #10
 80078ce:	4648      	mov	r0, r9
 80078d0:	f000 faee 	bl	8007eb0 <__multadd>
 80078d4:	f1bb 0f00 	cmp.w	fp, #0
 80078d8:	4605      	mov	r5, r0
 80078da:	dc6f      	bgt.n	80079bc <_dtoa_r+0x974>
 80078dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80078de:	2b02      	cmp	r3, #2
 80078e0:	dc49      	bgt.n	8007976 <_dtoa_r+0x92e>
 80078e2:	e06b      	b.n	80079bc <_dtoa_r+0x974>
 80078e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80078e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80078ea:	e73c      	b.n	8007766 <_dtoa_r+0x71e>
 80078ec:	3fe00000 	.word	0x3fe00000
 80078f0:	40240000 	.word	0x40240000
 80078f4:	9b08      	ldr	r3, [sp, #32]
 80078f6:	1e5c      	subs	r4, r3, #1
 80078f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078fa:	42a3      	cmp	r3, r4
 80078fc:	db09      	blt.n	8007912 <_dtoa_r+0x8ca>
 80078fe:	1b1c      	subs	r4, r3, r4
 8007900:	9b08      	ldr	r3, [sp, #32]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f6bf af30 	bge.w	8007768 <_dtoa_r+0x720>
 8007908:	9b04      	ldr	r3, [sp, #16]
 800790a:	9a08      	ldr	r2, [sp, #32]
 800790c:	1a9e      	subs	r6, r3, r2
 800790e:	2300      	movs	r3, #0
 8007910:	e72b      	b.n	800776a <_dtoa_r+0x722>
 8007912:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007914:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007916:	1ae3      	subs	r3, r4, r3
 8007918:	441a      	add	r2, r3
 800791a:	940a      	str	r4, [sp, #40]	@ 0x28
 800791c:	9e04      	ldr	r6, [sp, #16]
 800791e:	2400      	movs	r4, #0
 8007920:	9b08      	ldr	r3, [sp, #32]
 8007922:	920e      	str	r2, [sp, #56]	@ 0x38
 8007924:	e721      	b.n	800776a <_dtoa_r+0x722>
 8007926:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007928:	9e04      	ldr	r6, [sp, #16]
 800792a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800792c:	e728      	b.n	8007780 <_dtoa_r+0x738>
 800792e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007932:	e751      	b.n	80077d8 <_dtoa_r+0x790>
 8007934:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007936:	9903      	ldr	r1, [sp, #12]
 8007938:	e750      	b.n	80077dc <_dtoa_r+0x794>
 800793a:	f8cd 800c 	str.w	r8, [sp, #12]
 800793e:	e751      	b.n	80077e4 <_dtoa_r+0x79c>
 8007940:	2300      	movs	r3, #0
 8007942:	e779      	b.n	8007838 <_dtoa_r+0x7f0>
 8007944:	9b06      	ldr	r3, [sp, #24]
 8007946:	e777      	b.n	8007838 <_dtoa_r+0x7f0>
 8007948:	2300      	movs	r3, #0
 800794a:	930a      	str	r3, [sp, #40]	@ 0x28
 800794c:	e779      	b.n	8007842 <_dtoa_r+0x7fa>
 800794e:	d093      	beq.n	8007878 <_dtoa_r+0x830>
 8007950:	9a04      	ldr	r2, [sp, #16]
 8007952:	331c      	adds	r3, #28
 8007954:	441a      	add	r2, r3
 8007956:	9204      	str	r2, [sp, #16]
 8007958:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800795a:	441e      	add	r6, r3
 800795c:	441a      	add	r2, r3
 800795e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007960:	e78a      	b.n	8007878 <_dtoa_r+0x830>
 8007962:	4603      	mov	r3, r0
 8007964:	e7f4      	b.n	8007950 <_dtoa_r+0x908>
 8007966:	9b08      	ldr	r3, [sp, #32]
 8007968:	46b8      	mov	r8, r7
 800796a:	2b00      	cmp	r3, #0
 800796c:	dc20      	bgt.n	80079b0 <_dtoa_r+0x968>
 800796e:	469b      	mov	fp, r3
 8007970:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007972:	2b02      	cmp	r3, #2
 8007974:	dd1e      	ble.n	80079b4 <_dtoa_r+0x96c>
 8007976:	f1bb 0f00 	cmp.w	fp, #0
 800797a:	f47f adb1 	bne.w	80074e0 <_dtoa_r+0x498>
 800797e:	4621      	mov	r1, r4
 8007980:	465b      	mov	r3, fp
 8007982:	2205      	movs	r2, #5
 8007984:	4648      	mov	r0, r9
 8007986:	f000 fa93 	bl	8007eb0 <__multadd>
 800798a:	4601      	mov	r1, r0
 800798c:	4604      	mov	r4, r0
 800798e:	9803      	ldr	r0, [sp, #12]
 8007990:	f000 fc9e 	bl	80082d0 <__mcmp>
 8007994:	2800      	cmp	r0, #0
 8007996:	f77f ada3 	ble.w	80074e0 <_dtoa_r+0x498>
 800799a:	4656      	mov	r6, sl
 800799c:	2331      	movs	r3, #49	@ 0x31
 800799e:	f108 0801 	add.w	r8, r8, #1
 80079a2:	f806 3b01 	strb.w	r3, [r6], #1
 80079a6:	e59f      	b.n	80074e8 <_dtoa_r+0x4a0>
 80079a8:	46b8      	mov	r8, r7
 80079aa:	9c08      	ldr	r4, [sp, #32]
 80079ac:	4625      	mov	r5, r4
 80079ae:	e7f4      	b.n	800799a <_dtoa_r+0x952>
 80079b0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80079b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f000 8101 	beq.w	8007bbe <_dtoa_r+0xb76>
 80079bc:	2e00      	cmp	r6, #0
 80079be:	dd05      	ble.n	80079cc <_dtoa_r+0x984>
 80079c0:	4629      	mov	r1, r5
 80079c2:	4632      	mov	r2, r6
 80079c4:	4648      	mov	r0, r9
 80079c6:	f000 fc17 	bl	80081f8 <__lshift>
 80079ca:	4605      	mov	r5, r0
 80079cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d05c      	beq.n	8007a8c <_dtoa_r+0xa44>
 80079d2:	4648      	mov	r0, r9
 80079d4:	6869      	ldr	r1, [r5, #4]
 80079d6:	f000 fa09 	bl	8007dec <_Balloc>
 80079da:	4606      	mov	r6, r0
 80079dc:	b928      	cbnz	r0, 80079ea <_dtoa_r+0x9a2>
 80079de:	4602      	mov	r2, r0
 80079e0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80079e4:	4b80      	ldr	r3, [pc, #512]	@ (8007be8 <_dtoa_r+0xba0>)
 80079e6:	f7ff bb43 	b.w	8007070 <_dtoa_r+0x28>
 80079ea:	692a      	ldr	r2, [r5, #16]
 80079ec:	f105 010c 	add.w	r1, r5, #12
 80079f0:	3202      	adds	r2, #2
 80079f2:	0092      	lsls	r2, r2, #2
 80079f4:	300c      	adds	r0, #12
 80079f6:	f000 ffaf 	bl	8008958 <memcpy>
 80079fa:	2201      	movs	r2, #1
 80079fc:	4631      	mov	r1, r6
 80079fe:	4648      	mov	r0, r9
 8007a00:	f000 fbfa 	bl	80081f8 <__lshift>
 8007a04:	462f      	mov	r7, r5
 8007a06:	4605      	mov	r5, r0
 8007a08:	f10a 0301 	add.w	r3, sl, #1
 8007a0c:	9304      	str	r3, [sp, #16]
 8007a0e:	eb0a 030b 	add.w	r3, sl, fp
 8007a12:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a14:	9b06      	ldr	r3, [sp, #24]
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a1c:	9b04      	ldr	r3, [sp, #16]
 8007a1e:	4621      	mov	r1, r4
 8007a20:	9803      	ldr	r0, [sp, #12]
 8007a22:	f103 3bff 	add.w	fp, r3, #4294967295
 8007a26:	f7ff fa87 	bl	8006f38 <quorem>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	4639      	mov	r1, r7
 8007a2e:	3330      	adds	r3, #48	@ 0x30
 8007a30:	9006      	str	r0, [sp, #24]
 8007a32:	9803      	ldr	r0, [sp, #12]
 8007a34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a36:	f000 fc4b 	bl	80082d0 <__mcmp>
 8007a3a:	462a      	mov	r2, r5
 8007a3c:	9008      	str	r0, [sp, #32]
 8007a3e:	4621      	mov	r1, r4
 8007a40:	4648      	mov	r0, r9
 8007a42:	f000 fc61 	bl	8008308 <__mdiff>
 8007a46:	68c2      	ldr	r2, [r0, #12]
 8007a48:	4606      	mov	r6, r0
 8007a4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a4c:	bb02      	cbnz	r2, 8007a90 <_dtoa_r+0xa48>
 8007a4e:	4601      	mov	r1, r0
 8007a50:	9803      	ldr	r0, [sp, #12]
 8007a52:	f000 fc3d 	bl	80082d0 <__mcmp>
 8007a56:	4602      	mov	r2, r0
 8007a58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4648      	mov	r0, r9
 8007a5e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8007a62:	f000 fa03 	bl	8007e6c <_Bfree>
 8007a66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a6a:	9e04      	ldr	r6, [sp, #16]
 8007a6c:	ea42 0103 	orr.w	r1, r2, r3
 8007a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a72:	4319      	orrs	r1, r3
 8007a74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a76:	d10d      	bne.n	8007a94 <_dtoa_r+0xa4c>
 8007a78:	2b39      	cmp	r3, #57	@ 0x39
 8007a7a:	d027      	beq.n	8007acc <_dtoa_r+0xa84>
 8007a7c:	9a08      	ldr	r2, [sp, #32]
 8007a7e:	2a00      	cmp	r2, #0
 8007a80:	dd01      	ble.n	8007a86 <_dtoa_r+0xa3e>
 8007a82:	9b06      	ldr	r3, [sp, #24]
 8007a84:	3331      	adds	r3, #49	@ 0x31
 8007a86:	f88b 3000 	strb.w	r3, [fp]
 8007a8a:	e52e      	b.n	80074ea <_dtoa_r+0x4a2>
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	e7b9      	b.n	8007a04 <_dtoa_r+0x9bc>
 8007a90:	2201      	movs	r2, #1
 8007a92:	e7e2      	b.n	8007a5a <_dtoa_r+0xa12>
 8007a94:	9908      	ldr	r1, [sp, #32]
 8007a96:	2900      	cmp	r1, #0
 8007a98:	db04      	blt.n	8007aa4 <_dtoa_r+0xa5c>
 8007a9a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007a9c:	4301      	orrs	r1, r0
 8007a9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007aa0:	4301      	orrs	r1, r0
 8007aa2:	d120      	bne.n	8007ae6 <_dtoa_r+0xa9e>
 8007aa4:	2a00      	cmp	r2, #0
 8007aa6:	ddee      	ble.n	8007a86 <_dtoa_r+0xa3e>
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	9903      	ldr	r1, [sp, #12]
 8007aac:	4648      	mov	r0, r9
 8007aae:	9304      	str	r3, [sp, #16]
 8007ab0:	f000 fba2 	bl	80081f8 <__lshift>
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	9003      	str	r0, [sp, #12]
 8007ab8:	f000 fc0a 	bl	80082d0 <__mcmp>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	9b04      	ldr	r3, [sp, #16]
 8007ac0:	dc02      	bgt.n	8007ac8 <_dtoa_r+0xa80>
 8007ac2:	d1e0      	bne.n	8007a86 <_dtoa_r+0xa3e>
 8007ac4:	07da      	lsls	r2, r3, #31
 8007ac6:	d5de      	bpl.n	8007a86 <_dtoa_r+0xa3e>
 8007ac8:	2b39      	cmp	r3, #57	@ 0x39
 8007aca:	d1da      	bne.n	8007a82 <_dtoa_r+0xa3a>
 8007acc:	2339      	movs	r3, #57	@ 0x39
 8007ace:	f88b 3000 	strb.w	r3, [fp]
 8007ad2:	4633      	mov	r3, r6
 8007ad4:	461e      	mov	r6, r3
 8007ad6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	2a39      	cmp	r2, #57	@ 0x39
 8007ade:	d04e      	beq.n	8007b7e <_dtoa_r+0xb36>
 8007ae0:	3201      	adds	r2, #1
 8007ae2:	701a      	strb	r2, [r3, #0]
 8007ae4:	e501      	b.n	80074ea <_dtoa_r+0x4a2>
 8007ae6:	2a00      	cmp	r2, #0
 8007ae8:	dd03      	ble.n	8007af2 <_dtoa_r+0xaaa>
 8007aea:	2b39      	cmp	r3, #57	@ 0x39
 8007aec:	d0ee      	beq.n	8007acc <_dtoa_r+0xa84>
 8007aee:	3301      	adds	r3, #1
 8007af0:	e7c9      	b.n	8007a86 <_dtoa_r+0xa3e>
 8007af2:	9a04      	ldr	r2, [sp, #16]
 8007af4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007af6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007afa:	428a      	cmp	r2, r1
 8007afc:	d028      	beq.n	8007b50 <_dtoa_r+0xb08>
 8007afe:	2300      	movs	r3, #0
 8007b00:	220a      	movs	r2, #10
 8007b02:	9903      	ldr	r1, [sp, #12]
 8007b04:	4648      	mov	r0, r9
 8007b06:	f000 f9d3 	bl	8007eb0 <__multadd>
 8007b0a:	42af      	cmp	r7, r5
 8007b0c:	9003      	str	r0, [sp, #12]
 8007b0e:	f04f 0300 	mov.w	r3, #0
 8007b12:	f04f 020a 	mov.w	r2, #10
 8007b16:	4639      	mov	r1, r7
 8007b18:	4648      	mov	r0, r9
 8007b1a:	d107      	bne.n	8007b2c <_dtoa_r+0xae4>
 8007b1c:	f000 f9c8 	bl	8007eb0 <__multadd>
 8007b20:	4607      	mov	r7, r0
 8007b22:	4605      	mov	r5, r0
 8007b24:	9b04      	ldr	r3, [sp, #16]
 8007b26:	3301      	adds	r3, #1
 8007b28:	9304      	str	r3, [sp, #16]
 8007b2a:	e777      	b.n	8007a1c <_dtoa_r+0x9d4>
 8007b2c:	f000 f9c0 	bl	8007eb0 <__multadd>
 8007b30:	4629      	mov	r1, r5
 8007b32:	4607      	mov	r7, r0
 8007b34:	2300      	movs	r3, #0
 8007b36:	220a      	movs	r2, #10
 8007b38:	4648      	mov	r0, r9
 8007b3a:	f000 f9b9 	bl	8007eb0 <__multadd>
 8007b3e:	4605      	mov	r5, r0
 8007b40:	e7f0      	b.n	8007b24 <_dtoa_r+0xadc>
 8007b42:	f1bb 0f00 	cmp.w	fp, #0
 8007b46:	bfcc      	ite	gt
 8007b48:	465e      	movgt	r6, fp
 8007b4a:	2601      	movle	r6, #1
 8007b4c:	2700      	movs	r7, #0
 8007b4e:	4456      	add	r6, sl
 8007b50:	2201      	movs	r2, #1
 8007b52:	9903      	ldr	r1, [sp, #12]
 8007b54:	4648      	mov	r0, r9
 8007b56:	9304      	str	r3, [sp, #16]
 8007b58:	f000 fb4e 	bl	80081f8 <__lshift>
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	9003      	str	r0, [sp, #12]
 8007b60:	f000 fbb6 	bl	80082d0 <__mcmp>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	dcb4      	bgt.n	8007ad2 <_dtoa_r+0xa8a>
 8007b68:	d102      	bne.n	8007b70 <_dtoa_r+0xb28>
 8007b6a:	9b04      	ldr	r3, [sp, #16]
 8007b6c:	07db      	lsls	r3, r3, #31
 8007b6e:	d4b0      	bmi.n	8007ad2 <_dtoa_r+0xa8a>
 8007b70:	4633      	mov	r3, r6
 8007b72:	461e      	mov	r6, r3
 8007b74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b78:	2a30      	cmp	r2, #48	@ 0x30
 8007b7a:	d0fa      	beq.n	8007b72 <_dtoa_r+0xb2a>
 8007b7c:	e4b5      	b.n	80074ea <_dtoa_r+0x4a2>
 8007b7e:	459a      	cmp	sl, r3
 8007b80:	d1a8      	bne.n	8007ad4 <_dtoa_r+0xa8c>
 8007b82:	2331      	movs	r3, #49	@ 0x31
 8007b84:	f108 0801 	add.w	r8, r8, #1
 8007b88:	f88a 3000 	strb.w	r3, [sl]
 8007b8c:	e4ad      	b.n	80074ea <_dtoa_r+0x4a2>
 8007b8e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b90:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007bec <_dtoa_r+0xba4>
 8007b94:	b11b      	cbz	r3, 8007b9e <_dtoa_r+0xb56>
 8007b96:	f10a 0308 	add.w	r3, sl, #8
 8007b9a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007b9c:	6013      	str	r3, [r2, #0]
 8007b9e:	4650      	mov	r0, sl
 8007ba0:	b017      	add	sp, #92	@ 0x5c
 8007ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	f77f ae2e 	ble.w	800780a <_dtoa_r+0x7c2>
 8007bae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bb2:	2001      	movs	r0, #1
 8007bb4:	e64d      	b.n	8007852 <_dtoa_r+0x80a>
 8007bb6:	f1bb 0f00 	cmp.w	fp, #0
 8007bba:	f77f aed9 	ble.w	8007970 <_dtoa_r+0x928>
 8007bbe:	4656      	mov	r6, sl
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	9803      	ldr	r0, [sp, #12]
 8007bc4:	f7ff f9b8 	bl	8006f38 <quorem>
 8007bc8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007bcc:	f806 3b01 	strb.w	r3, [r6], #1
 8007bd0:	eba6 020a 	sub.w	r2, r6, sl
 8007bd4:	4593      	cmp	fp, r2
 8007bd6:	ddb4      	ble.n	8007b42 <_dtoa_r+0xafa>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	220a      	movs	r2, #10
 8007bdc:	4648      	mov	r0, r9
 8007bde:	9903      	ldr	r1, [sp, #12]
 8007be0:	f000 f966 	bl	8007eb0 <__multadd>
 8007be4:	9003      	str	r0, [sp, #12]
 8007be6:	e7eb      	b.n	8007bc0 <_dtoa_r+0xb78>
 8007be8:	080091a6 	.word	0x080091a6
 8007bec:	08009141 	.word	0x08009141

08007bf0 <_free_r>:
 8007bf0:	b538      	push	{r3, r4, r5, lr}
 8007bf2:	4605      	mov	r5, r0
 8007bf4:	2900      	cmp	r1, #0
 8007bf6:	d040      	beq.n	8007c7a <_free_r+0x8a>
 8007bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bfc:	1f0c      	subs	r4, r1, #4
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	bfb8      	it	lt
 8007c02:	18e4      	addlt	r4, r4, r3
 8007c04:	f000 f8e6 	bl	8007dd4 <__malloc_lock>
 8007c08:	4a1c      	ldr	r2, [pc, #112]	@ (8007c7c <_free_r+0x8c>)
 8007c0a:	6813      	ldr	r3, [r2, #0]
 8007c0c:	b933      	cbnz	r3, 8007c1c <_free_r+0x2c>
 8007c0e:	6063      	str	r3, [r4, #4]
 8007c10:	6014      	str	r4, [r2, #0]
 8007c12:	4628      	mov	r0, r5
 8007c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c18:	f000 b8e2 	b.w	8007de0 <__malloc_unlock>
 8007c1c:	42a3      	cmp	r3, r4
 8007c1e:	d908      	bls.n	8007c32 <_free_r+0x42>
 8007c20:	6820      	ldr	r0, [r4, #0]
 8007c22:	1821      	adds	r1, r4, r0
 8007c24:	428b      	cmp	r3, r1
 8007c26:	bf01      	itttt	eq
 8007c28:	6819      	ldreq	r1, [r3, #0]
 8007c2a:	685b      	ldreq	r3, [r3, #4]
 8007c2c:	1809      	addeq	r1, r1, r0
 8007c2e:	6021      	streq	r1, [r4, #0]
 8007c30:	e7ed      	b.n	8007c0e <_free_r+0x1e>
 8007c32:	461a      	mov	r2, r3
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	b10b      	cbz	r3, 8007c3c <_free_r+0x4c>
 8007c38:	42a3      	cmp	r3, r4
 8007c3a:	d9fa      	bls.n	8007c32 <_free_r+0x42>
 8007c3c:	6811      	ldr	r1, [r2, #0]
 8007c3e:	1850      	adds	r0, r2, r1
 8007c40:	42a0      	cmp	r0, r4
 8007c42:	d10b      	bne.n	8007c5c <_free_r+0x6c>
 8007c44:	6820      	ldr	r0, [r4, #0]
 8007c46:	4401      	add	r1, r0
 8007c48:	1850      	adds	r0, r2, r1
 8007c4a:	4283      	cmp	r3, r0
 8007c4c:	6011      	str	r1, [r2, #0]
 8007c4e:	d1e0      	bne.n	8007c12 <_free_r+0x22>
 8007c50:	6818      	ldr	r0, [r3, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	4408      	add	r0, r1
 8007c56:	6010      	str	r0, [r2, #0]
 8007c58:	6053      	str	r3, [r2, #4]
 8007c5a:	e7da      	b.n	8007c12 <_free_r+0x22>
 8007c5c:	d902      	bls.n	8007c64 <_free_r+0x74>
 8007c5e:	230c      	movs	r3, #12
 8007c60:	602b      	str	r3, [r5, #0]
 8007c62:	e7d6      	b.n	8007c12 <_free_r+0x22>
 8007c64:	6820      	ldr	r0, [r4, #0]
 8007c66:	1821      	adds	r1, r4, r0
 8007c68:	428b      	cmp	r3, r1
 8007c6a:	bf01      	itttt	eq
 8007c6c:	6819      	ldreq	r1, [r3, #0]
 8007c6e:	685b      	ldreq	r3, [r3, #4]
 8007c70:	1809      	addeq	r1, r1, r0
 8007c72:	6021      	streq	r1, [r4, #0]
 8007c74:	6063      	str	r3, [r4, #4]
 8007c76:	6054      	str	r4, [r2, #4]
 8007c78:	e7cb      	b.n	8007c12 <_free_r+0x22>
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	20000598 	.word	0x20000598

08007c80 <malloc>:
 8007c80:	4b02      	ldr	r3, [pc, #8]	@ (8007c8c <malloc+0xc>)
 8007c82:	4601      	mov	r1, r0
 8007c84:	6818      	ldr	r0, [r3, #0]
 8007c86:	f000 b825 	b.w	8007cd4 <_malloc_r>
 8007c8a:	bf00      	nop
 8007c8c:	20000018 	.word	0x20000018

08007c90 <sbrk_aligned>:
 8007c90:	b570      	push	{r4, r5, r6, lr}
 8007c92:	4e0f      	ldr	r6, [pc, #60]	@ (8007cd0 <sbrk_aligned+0x40>)
 8007c94:	460c      	mov	r4, r1
 8007c96:	6831      	ldr	r1, [r6, #0]
 8007c98:	4605      	mov	r5, r0
 8007c9a:	b911      	cbnz	r1, 8007ca2 <sbrk_aligned+0x12>
 8007c9c:	f000 fe4c 	bl	8008938 <_sbrk_r>
 8007ca0:	6030      	str	r0, [r6, #0]
 8007ca2:	4621      	mov	r1, r4
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	f000 fe47 	bl	8008938 <_sbrk_r>
 8007caa:	1c43      	adds	r3, r0, #1
 8007cac:	d103      	bne.n	8007cb6 <sbrk_aligned+0x26>
 8007cae:	f04f 34ff 	mov.w	r4, #4294967295
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	bd70      	pop	{r4, r5, r6, pc}
 8007cb6:	1cc4      	adds	r4, r0, #3
 8007cb8:	f024 0403 	bic.w	r4, r4, #3
 8007cbc:	42a0      	cmp	r0, r4
 8007cbe:	d0f8      	beq.n	8007cb2 <sbrk_aligned+0x22>
 8007cc0:	1a21      	subs	r1, r4, r0
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f000 fe38 	bl	8008938 <_sbrk_r>
 8007cc8:	3001      	adds	r0, #1
 8007cca:	d1f2      	bne.n	8007cb2 <sbrk_aligned+0x22>
 8007ccc:	e7ef      	b.n	8007cae <sbrk_aligned+0x1e>
 8007cce:	bf00      	nop
 8007cd0:	20000594 	.word	0x20000594

08007cd4 <_malloc_r>:
 8007cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cd8:	1ccd      	adds	r5, r1, #3
 8007cda:	f025 0503 	bic.w	r5, r5, #3
 8007cde:	3508      	adds	r5, #8
 8007ce0:	2d0c      	cmp	r5, #12
 8007ce2:	bf38      	it	cc
 8007ce4:	250c      	movcc	r5, #12
 8007ce6:	2d00      	cmp	r5, #0
 8007ce8:	4606      	mov	r6, r0
 8007cea:	db01      	blt.n	8007cf0 <_malloc_r+0x1c>
 8007cec:	42a9      	cmp	r1, r5
 8007cee:	d904      	bls.n	8007cfa <_malloc_r+0x26>
 8007cf0:	230c      	movs	r3, #12
 8007cf2:	6033      	str	r3, [r6, #0]
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007dd0 <_malloc_r+0xfc>
 8007cfe:	f000 f869 	bl	8007dd4 <__malloc_lock>
 8007d02:	f8d8 3000 	ldr.w	r3, [r8]
 8007d06:	461c      	mov	r4, r3
 8007d08:	bb44      	cbnz	r4, 8007d5c <_malloc_r+0x88>
 8007d0a:	4629      	mov	r1, r5
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	f7ff ffbf 	bl	8007c90 <sbrk_aligned>
 8007d12:	1c43      	adds	r3, r0, #1
 8007d14:	4604      	mov	r4, r0
 8007d16:	d158      	bne.n	8007dca <_malloc_r+0xf6>
 8007d18:	f8d8 4000 	ldr.w	r4, [r8]
 8007d1c:	4627      	mov	r7, r4
 8007d1e:	2f00      	cmp	r7, #0
 8007d20:	d143      	bne.n	8007daa <_malloc_r+0xd6>
 8007d22:	2c00      	cmp	r4, #0
 8007d24:	d04b      	beq.n	8007dbe <_malloc_r+0xea>
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	4639      	mov	r1, r7
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	eb04 0903 	add.w	r9, r4, r3
 8007d30:	f000 fe02 	bl	8008938 <_sbrk_r>
 8007d34:	4581      	cmp	r9, r0
 8007d36:	d142      	bne.n	8007dbe <_malloc_r+0xea>
 8007d38:	6821      	ldr	r1, [r4, #0]
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	1a6d      	subs	r5, r5, r1
 8007d3e:	4629      	mov	r1, r5
 8007d40:	f7ff ffa6 	bl	8007c90 <sbrk_aligned>
 8007d44:	3001      	adds	r0, #1
 8007d46:	d03a      	beq.n	8007dbe <_malloc_r+0xea>
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	442b      	add	r3, r5
 8007d4c:	6023      	str	r3, [r4, #0]
 8007d4e:	f8d8 3000 	ldr.w	r3, [r8]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	bb62      	cbnz	r2, 8007db0 <_malloc_r+0xdc>
 8007d56:	f8c8 7000 	str.w	r7, [r8]
 8007d5a:	e00f      	b.n	8007d7c <_malloc_r+0xa8>
 8007d5c:	6822      	ldr	r2, [r4, #0]
 8007d5e:	1b52      	subs	r2, r2, r5
 8007d60:	d420      	bmi.n	8007da4 <_malloc_r+0xd0>
 8007d62:	2a0b      	cmp	r2, #11
 8007d64:	d917      	bls.n	8007d96 <_malloc_r+0xc2>
 8007d66:	1961      	adds	r1, r4, r5
 8007d68:	42a3      	cmp	r3, r4
 8007d6a:	6025      	str	r5, [r4, #0]
 8007d6c:	bf18      	it	ne
 8007d6e:	6059      	strne	r1, [r3, #4]
 8007d70:	6863      	ldr	r3, [r4, #4]
 8007d72:	bf08      	it	eq
 8007d74:	f8c8 1000 	streq.w	r1, [r8]
 8007d78:	5162      	str	r2, [r4, r5]
 8007d7a:	604b      	str	r3, [r1, #4]
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	f000 f82f 	bl	8007de0 <__malloc_unlock>
 8007d82:	f104 000b 	add.w	r0, r4, #11
 8007d86:	1d23      	adds	r3, r4, #4
 8007d88:	f020 0007 	bic.w	r0, r0, #7
 8007d8c:	1ac2      	subs	r2, r0, r3
 8007d8e:	bf1c      	itt	ne
 8007d90:	1a1b      	subne	r3, r3, r0
 8007d92:	50a3      	strne	r3, [r4, r2]
 8007d94:	e7af      	b.n	8007cf6 <_malloc_r+0x22>
 8007d96:	6862      	ldr	r2, [r4, #4]
 8007d98:	42a3      	cmp	r3, r4
 8007d9a:	bf0c      	ite	eq
 8007d9c:	f8c8 2000 	streq.w	r2, [r8]
 8007da0:	605a      	strne	r2, [r3, #4]
 8007da2:	e7eb      	b.n	8007d7c <_malloc_r+0xa8>
 8007da4:	4623      	mov	r3, r4
 8007da6:	6864      	ldr	r4, [r4, #4]
 8007da8:	e7ae      	b.n	8007d08 <_malloc_r+0x34>
 8007daa:	463c      	mov	r4, r7
 8007dac:	687f      	ldr	r7, [r7, #4]
 8007dae:	e7b6      	b.n	8007d1e <_malloc_r+0x4a>
 8007db0:	461a      	mov	r2, r3
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	42a3      	cmp	r3, r4
 8007db6:	d1fb      	bne.n	8007db0 <_malloc_r+0xdc>
 8007db8:	2300      	movs	r3, #0
 8007dba:	6053      	str	r3, [r2, #4]
 8007dbc:	e7de      	b.n	8007d7c <_malloc_r+0xa8>
 8007dbe:	230c      	movs	r3, #12
 8007dc0:	4630      	mov	r0, r6
 8007dc2:	6033      	str	r3, [r6, #0]
 8007dc4:	f000 f80c 	bl	8007de0 <__malloc_unlock>
 8007dc8:	e794      	b.n	8007cf4 <_malloc_r+0x20>
 8007dca:	6005      	str	r5, [r0, #0]
 8007dcc:	e7d6      	b.n	8007d7c <_malloc_r+0xa8>
 8007dce:	bf00      	nop
 8007dd0:	20000598 	.word	0x20000598

08007dd4 <__malloc_lock>:
 8007dd4:	4801      	ldr	r0, [pc, #4]	@ (8007ddc <__malloc_lock+0x8>)
 8007dd6:	f7ff b880 	b.w	8006eda <__retarget_lock_acquire_recursive>
 8007dda:	bf00      	nop
 8007ddc:	20000590 	.word	0x20000590

08007de0 <__malloc_unlock>:
 8007de0:	4801      	ldr	r0, [pc, #4]	@ (8007de8 <__malloc_unlock+0x8>)
 8007de2:	f7ff b87b 	b.w	8006edc <__retarget_lock_release_recursive>
 8007de6:	bf00      	nop
 8007de8:	20000590 	.word	0x20000590

08007dec <_Balloc>:
 8007dec:	b570      	push	{r4, r5, r6, lr}
 8007dee:	69c6      	ldr	r6, [r0, #28]
 8007df0:	4604      	mov	r4, r0
 8007df2:	460d      	mov	r5, r1
 8007df4:	b976      	cbnz	r6, 8007e14 <_Balloc+0x28>
 8007df6:	2010      	movs	r0, #16
 8007df8:	f7ff ff42 	bl	8007c80 <malloc>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	61e0      	str	r0, [r4, #28]
 8007e00:	b920      	cbnz	r0, 8007e0c <_Balloc+0x20>
 8007e02:	216b      	movs	r1, #107	@ 0x6b
 8007e04:	4b17      	ldr	r3, [pc, #92]	@ (8007e64 <_Balloc+0x78>)
 8007e06:	4818      	ldr	r0, [pc, #96]	@ (8007e68 <_Balloc+0x7c>)
 8007e08:	f7ff f878 	bl	8006efc <__assert_func>
 8007e0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e10:	6006      	str	r6, [r0, #0]
 8007e12:	60c6      	str	r6, [r0, #12]
 8007e14:	69e6      	ldr	r6, [r4, #28]
 8007e16:	68f3      	ldr	r3, [r6, #12]
 8007e18:	b183      	cbz	r3, 8007e3c <_Balloc+0x50>
 8007e1a:	69e3      	ldr	r3, [r4, #28]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e22:	b9b8      	cbnz	r0, 8007e54 <_Balloc+0x68>
 8007e24:	2101      	movs	r1, #1
 8007e26:	fa01 f605 	lsl.w	r6, r1, r5
 8007e2a:	1d72      	adds	r2, r6, #5
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	0092      	lsls	r2, r2, #2
 8007e30:	f000 fda7 	bl	8008982 <_calloc_r>
 8007e34:	b160      	cbz	r0, 8007e50 <_Balloc+0x64>
 8007e36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e3a:	e00e      	b.n	8007e5a <_Balloc+0x6e>
 8007e3c:	2221      	movs	r2, #33	@ 0x21
 8007e3e:	2104      	movs	r1, #4
 8007e40:	4620      	mov	r0, r4
 8007e42:	f000 fd9e 	bl	8008982 <_calloc_r>
 8007e46:	69e3      	ldr	r3, [r4, #28]
 8007e48:	60f0      	str	r0, [r6, #12]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1e4      	bne.n	8007e1a <_Balloc+0x2e>
 8007e50:	2000      	movs	r0, #0
 8007e52:	bd70      	pop	{r4, r5, r6, pc}
 8007e54:	6802      	ldr	r2, [r0, #0]
 8007e56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e60:	e7f7      	b.n	8007e52 <_Balloc+0x66>
 8007e62:	bf00      	nop
 8007e64:	08009062 	.word	0x08009062
 8007e68:	080091b7 	.word	0x080091b7

08007e6c <_Bfree>:
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	69c6      	ldr	r6, [r0, #28]
 8007e70:	4605      	mov	r5, r0
 8007e72:	460c      	mov	r4, r1
 8007e74:	b976      	cbnz	r6, 8007e94 <_Bfree+0x28>
 8007e76:	2010      	movs	r0, #16
 8007e78:	f7ff ff02 	bl	8007c80 <malloc>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	61e8      	str	r0, [r5, #28]
 8007e80:	b920      	cbnz	r0, 8007e8c <_Bfree+0x20>
 8007e82:	218f      	movs	r1, #143	@ 0x8f
 8007e84:	4b08      	ldr	r3, [pc, #32]	@ (8007ea8 <_Bfree+0x3c>)
 8007e86:	4809      	ldr	r0, [pc, #36]	@ (8007eac <_Bfree+0x40>)
 8007e88:	f7ff f838 	bl	8006efc <__assert_func>
 8007e8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e90:	6006      	str	r6, [r0, #0]
 8007e92:	60c6      	str	r6, [r0, #12]
 8007e94:	b13c      	cbz	r4, 8007ea6 <_Bfree+0x3a>
 8007e96:	69eb      	ldr	r3, [r5, #28]
 8007e98:	6862      	ldr	r2, [r4, #4]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ea0:	6021      	str	r1, [r4, #0]
 8007ea2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}
 8007ea8:	08009062 	.word	0x08009062
 8007eac:	080091b7 	.word	0x080091b7

08007eb0 <__multadd>:
 8007eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb4:	4607      	mov	r7, r0
 8007eb6:	460c      	mov	r4, r1
 8007eb8:	461e      	mov	r6, r3
 8007eba:	2000      	movs	r0, #0
 8007ebc:	690d      	ldr	r5, [r1, #16]
 8007ebe:	f101 0c14 	add.w	ip, r1, #20
 8007ec2:	f8dc 3000 	ldr.w	r3, [ip]
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	b299      	uxth	r1, r3
 8007eca:	fb02 6101 	mla	r1, r2, r1, r6
 8007ece:	0c1e      	lsrs	r6, r3, #16
 8007ed0:	0c0b      	lsrs	r3, r1, #16
 8007ed2:	fb02 3306 	mla	r3, r2, r6, r3
 8007ed6:	b289      	uxth	r1, r1
 8007ed8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007edc:	4285      	cmp	r5, r0
 8007ede:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ee2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ee6:	dcec      	bgt.n	8007ec2 <__multadd+0x12>
 8007ee8:	b30e      	cbz	r6, 8007f2e <__multadd+0x7e>
 8007eea:	68a3      	ldr	r3, [r4, #8]
 8007eec:	42ab      	cmp	r3, r5
 8007eee:	dc19      	bgt.n	8007f24 <__multadd+0x74>
 8007ef0:	6861      	ldr	r1, [r4, #4]
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	3101      	adds	r1, #1
 8007ef6:	f7ff ff79 	bl	8007dec <_Balloc>
 8007efa:	4680      	mov	r8, r0
 8007efc:	b928      	cbnz	r0, 8007f0a <__multadd+0x5a>
 8007efe:	4602      	mov	r2, r0
 8007f00:	21ba      	movs	r1, #186	@ 0xba
 8007f02:	4b0c      	ldr	r3, [pc, #48]	@ (8007f34 <__multadd+0x84>)
 8007f04:	480c      	ldr	r0, [pc, #48]	@ (8007f38 <__multadd+0x88>)
 8007f06:	f7fe fff9 	bl	8006efc <__assert_func>
 8007f0a:	6922      	ldr	r2, [r4, #16]
 8007f0c:	f104 010c 	add.w	r1, r4, #12
 8007f10:	3202      	adds	r2, #2
 8007f12:	0092      	lsls	r2, r2, #2
 8007f14:	300c      	adds	r0, #12
 8007f16:	f000 fd1f 	bl	8008958 <memcpy>
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	4638      	mov	r0, r7
 8007f1e:	f7ff ffa5 	bl	8007e6c <_Bfree>
 8007f22:	4644      	mov	r4, r8
 8007f24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f28:	3501      	adds	r5, #1
 8007f2a:	615e      	str	r6, [r3, #20]
 8007f2c:	6125      	str	r5, [r4, #16]
 8007f2e:	4620      	mov	r0, r4
 8007f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f34:	080091a6 	.word	0x080091a6
 8007f38:	080091b7 	.word	0x080091b7

08007f3c <__hi0bits>:
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007f42:	bf3a      	itte	cc
 8007f44:	0403      	lslcc	r3, r0, #16
 8007f46:	2010      	movcc	r0, #16
 8007f48:	2000      	movcs	r0, #0
 8007f4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f4e:	bf3c      	itt	cc
 8007f50:	021b      	lslcc	r3, r3, #8
 8007f52:	3008      	addcc	r0, #8
 8007f54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f58:	bf3c      	itt	cc
 8007f5a:	011b      	lslcc	r3, r3, #4
 8007f5c:	3004      	addcc	r0, #4
 8007f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f62:	bf3c      	itt	cc
 8007f64:	009b      	lslcc	r3, r3, #2
 8007f66:	3002      	addcc	r0, #2
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	db05      	blt.n	8007f78 <__hi0bits+0x3c>
 8007f6c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007f70:	f100 0001 	add.w	r0, r0, #1
 8007f74:	bf08      	it	eq
 8007f76:	2020      	moveq	r0, #32
 8007f78:	4770      	bx	lr

08007f7a <__lo0bits>:
 8007f7a:	6803      	ldr	r3, [r0, #0]
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	f013 0007 	ands.w	r0, r3, #7
 8007f82:	d00b      	beq.n	8007f9c <__lo0bits+0x22>
 8007f84:	07d9      	lsls	r1, r3, #31
 8007f86:	d421      	bmi.n	8007fcc <__lo0bits+0x52>
 8007f88:	0798      	lsls	r0, r3, #30
 8007f8a:	bf49      	itett	mi
 8007f8c:	085b      	lsrmi	r3, r3, #1
 8007f8e:	089b      	lsrpl	r3, r3, #2
 8007f90:	2001      	movmi	r0, #1
 8007f92:	6013      	strmi	r3, [r2, #0]
 8007f94:	bf5c      	itt	pl
 8007f96:	2002      	movpl	r0, #2
 8007f98:	6013      	strpl	r3, [r2, #0]
 8007f9a:	4770      	bx	lr
 8007f9c:	b299      	uxth	r1, r3
 8007f9e:	b909      	cbnz	r1, 8007fa4 <__lo0bits+0x2a>
 8007fa0:	2010      	movs	r0, #16
 8007fa2:	0c1b      	lsrs	r3, r3, #16
 8007fa4:	b2d9      	uxtb	r1, r3
 8007fa6:	b909      	cbnz	r1, 8007fac <__lo0bits+0x32>
 8007fa8:	3008      	adds	r0, #8
 8007faa:	0a1b      	lsrs	r3, r3, #8
 8007fac:	0719      	lsls	r1, r3, #28
 8007fae:	bf04      	itt	eq
 8007fb0:	091b      	lsreq	r3, r3, #4
 8007fb2:	3004      	addeq	r0, #4
 8007fb4:	0799      	lsls	r1, r3, #30
 8007fb6:	bf04      	itt	eq
 8007fb8:	089b      	lsreq	r3, r3, #2
 8007fba:	3002      	addeq	r0, #2
 8007fbc:	07d9      	lsls	r1, r3, #31
 8007fbe:	d403      	bmi.n	8007fc8 <__lo0bits+0x4e>
 8007fc0:	085b      	lsrs	r3, r3, #1
 8007fc2:	f100 0001 	add.w	r0, r0, #1
 8007fc6:	d003      	beq.n	8007fd0 <__lo0bits+0x56>
 8007fc8:	6013      	str	r3, [r2, #0]
 8007fca:	4770      	bx	lr
 8007fcc:	2000      	movs	r0, #0
 8007fce:	4770      	bx	lr
 8007fd0:	2020      	movs	r0, #32
 8007fd2:	4770      	bx	lr

08007fd4 <__i2b>:
 8007fd4:	b510      	push	{r4, lr}
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	2101      	movs	r1, #1
 8007fda:	f7ff ff07 	bl	8007dec <_Balloc>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	b928      	cbnz	r0, 8007fee <__i2b+0x1a>
 8007fe2:	f240 1145 	movw	r1, #325	@ 0x145
 8007fe6:	4b04      	ldr	r3, [pc, #16]	@ (8007ff8 <__i2b+0x24>)
 8007fe8:	4804      	ldr	r0, [pc, #16]	@ (8007ffc <__i2b+0x28>)
 8007fea:	f7fe ff87 	bl	8006efc <__assert_func>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	6144      	str	r4, [r0, #20]
 8007ff2:	6103      	str	r3, [r0, #16]
 8007ff4:	bd10      	pop	{r4, pc}
 8007ff6:	bf00      	nop
 8007ff8:	080091a6 	.word	0x080091a6
 8007ffc:	080091b7 	.word	0x080091b7

08008000 <__multiply>:
 8008000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	4617      	mov	r7, r2
 8008006:	690a      	ldr	r2, [r1, #16]
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	4689      	mov	r9, r1
 800800c:	429a      	cmp	r2, r3
 800800e:	bfa2      	ittt	ge
 8008010:	463b      	movge	r3, r7
 8008012:	460f      	movge	r7, r1
 8008014:	4699      	movge	r9, r3
 8008016:	693d      	ldr	r5, [r7, #16]
 8008018:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	eb05 060a 	add.w	r6, r5, sl
 8008024:	42b3      	cmp	r3, r6
 8008026:	b085      	sub	sp, #20
 8008028:	bfb8      	it	lt
 800802a:	3101      	addlt	r1, #1
 800802c:	f7ff fede 	bl	8007dec <_Balloc>
 8008030:	b930      	cbnz	r0, 8008040 <__multiply+0x40>
 8008032:	4602      	mov	r2, r0
 8008034:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008038:	4b40      	ldr	r3, [pc, #256]	@ (800813c <__multiply+0x13c>)
 800803a:	4841      	ldr	r0, [pc, #260]	@ (8008140 <__multiply+0x140>)
 800803c:	f7fe ff5e 	bl	8006efc <__assert_func>
 8008040:	f100 0414 	add.w	r4, r0, #20
 8008044:	4623      	mov	r3, r4
 8008046:	2200      	movs	r2, #0
 8008048:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800804c:	4573      	cmp	r3, lr
 800804e:	d320      	bcc.n	8008092 <__multiply+0x92>
 8008050:	f107 0814 	add.w	r8, r7, #20
 8008054:	f109 0114 	add.w	r1, r9, #20
 8008058:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800805c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008060:	9302      	str	r3, [sp, #8]
 8008062:	1beb      	subs	r3, r5, r7
 8008064:	3b15      	subs	r3, #21
 8008066:	f023 0303 	bic.w	r3, r3, #3
 800806a:	3304      	adds	r3, #4
 800806c:	3715      	adds	r7, #21
 800806e:	42bd      	cmp	r5, r7
 8008070:	bf38      	it	cc
 8008072:	2304      	movcc	r3, #4
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	9b02      	ldr	r3, [sp, #8]
 8008078:	9103      	str	r1, [sp, #12]
 800807a:	428b      	cmp	r3, r1
 800807c:	d80c      	bhi.n	8008098 <__multiply+0x98>
 800807e:	2e00      	cmp	r6, #0
 8008080:	dd03      	ble.n	800808a <__multiply+0x8a>
 8008082:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008086:	2b00      	cmp	r3, #0
 8008088:	d055      	beq.n	8008136 <__multiply+0x136>
 800808a:	6106      	str	r6, [r0, #16]
 800808c:	b005      	add	sp, #20
 800808e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008092:	f843 2b04 	str.w	r2, [r3], #4
 8008096:	e7d9      	b.n	800804c <__multiply+0x4c>
 8008098:	f8b1 a000 	ldrh.w	sl, [r1]
 800809c:	f1ba 0f00 	cmp.w	sl, #0
 80080a0:	d01f      	beq.n	80080e2 <__multiply+0xe2>
 80080a2:	46c4      	mov	ip, r8
 80080a4:	46a1      	mov	r9, r4
 80080a6:	2700      	movs	r7, #0
 80080a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80080ac:	f8d9 3000 	ldr.w	r3, [r9]
 80080b0:	fa1f fb82 	uxth.w	fp, r2
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	fb0a 330b 	mla	r3, sl, fp, r3
 80080ba:	443b      	add	r3, r7
 80080bc:	f8d9 7000 	ldr.w	r7, [r9]
 80080c0:	0c12      	lsrs	r2, r2, #16
 80080c2:	0c3f      	lsrs	r7, r7, #16
 80080c4:	fb0a 7202 	mla	r2, sl, r2, r7
 80080c8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080d2:	4565      	cmp	r5, ip
 80080d4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80080d8:	f849 3b04 	str.w	r3, [r9], #4
 80080dc:	d8e4      	bhi.n	80080a8 <__multiply+0xa8>
 80080de:	9b01      	ldr	r3, [sp, #4]
 80080e0:	50e7      	str	r7, [r4, r3]
 80080e2:	9b03      	ldr	r3, [sp, #12]
 80080e4:	3104      	adds	r1, #4
 80080e6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80080ea:	f1b9 0f00 	cmp.w	r9, #0
 80080ee:	d020      	beq.n	8008132 <__multiply+0x132>
 80080f0:	4647      	mov	r7, r8
 80080f2:	46a4      	mov	ip, r4
 80080f4:	f04f 0a00 	mov.w	sl, #0
 80080f8:	6823      	ldr	r3, [r4, #0]
 80080fa:	f8b7 b000 	ldrh.w	fp, [r7]
 80080fe:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008102:	b29b      	uxth	r3, r3
 8008104:	fb09 220b 	mla	r2, r9, fp, r2
 8008108:	4452      	add	r2, sl
 800810a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800810e:	f84c 3b04 	str.w	r3, [ip], #4
 8008112:	f857 3b04 	ldr.w	r3, [r7], #4
 8008116:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800811a:	f8bc 3000 	ldrh.w	r3, [ip]
 800811e:	42bd      	cmp	r5, r7
 8008120:	fb09 330a 	mla	r3, r9, sl, r3
 8008124:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008128:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800812c:	d8e5      	bhi.n	80080fa <__multiply+0xfa>
 800812e:	9a01      	ldr	r2, [sp, #4]
 8008130:	50a3      	str	r3, [r4, r2]
 8008132:	3404      	adds	r4, #4
 8008134:	e79f      	b.n	8008076 <__multiply+0x76>
 8008136:	3e01      	subs	r6, #1
 8008138:	e7a1      	b.n	800807e <__multiply+0x7e>
 800813a:	bf00      	nop
 800813c:	080091a6 	.word	0x080091a6
 8008140:	080091b7 	.word	0x080091b7

08008144 <__pow5mult>:
 8008144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008148:	4615      	mov	r5, r2
 800814a:	f012 0203 	ands.w	r2, r2, #3
 800814e:	4607      	mov	r7, r0
 8008150:	460e      	mov	r6, r1
 8008152:	d007      	beq.n	8008164 <__pow5mult+0x20>
 8008154:	4c25      	ldr	r4, [pc, #148]	@ (80081ec <__pow5mult+0xa8>)
 8008156:	3a01      	subs	r2, #1
 8008158:	2300      	movs	r3, #0
 800815a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800815e:	f7ff fea7 	bl	8007eb0 <__multadd>
 8008162:	4606      	mov	r6, r0
 8008164:	10ad      	asrs	r5, r5, #2
 8008166:	d03d      	beq.n	80081e4 <__pow5mult+0xa0>
 8008168:	69fc      	ldr	r4, [r7, #28]
 800816a:	b97c      	cbnz	r4, 800818c <__pow5mult+0x48>
 800816c:	2010      	movs	r0, #16
 800816e:	f7ff fd87 	bl	8007c80 <malloc>
 8008172:	4602      	mov	r2, r0
 8008174:	61f8      	str	r0, [r7, #28]
 8008176:	b928      	cbnz	r0, 8008184 <__pow5mult+0x40>
 8008178:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800817c:	4b1c      	ldr	r3, [pc, #112]	@ (80081f0 <__pow5mult+0xac>)
 800817e:	481d      	ldr	r0, [pc, #116]	@ (80081f4 <__pow5mult+0xb0>)
 8008180:	f7fe febc 	bl	8006efc <__assert_func>
 8008184:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008188:	6004      	str	r4, [r0, #0]
 800818a:	60c4      	str	r4, [r0, #12]
 800818c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008190:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008194:	b94c      	cbnz	r4, 80081aa <__pow5mult+0x66>
 8008196:	f240 2171 	movw	r1, #625	@ 0x271
 800819a:	4638      	mov	r0, r7
 800819c:	f7ff ff1a 	bl	8007fd4 <__i2b>
 80081a0:	2300      	movs	r3, #0
 80081a2:	4604      	mov	r4, r0
 80081a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80081a8:	6003      	str	r3, [r0, #0]
 80081aa:	f04f 0900 	mov.w	r9, #0
 80081ae:	07eb      	lsls	r3, r5, #31
 80081b0:	d50a      	bpl.n	80081c8 <__pow5mult+0x84>
 80081b2:	4631      	mov	r1, r6
 80081b4:	4622      	mov	r2, r4
 80081b6:	4638      	mov	r0, r7
 80081b8:	f7ff ff22 	bl	8008000 <__multiply>
 80081bc:	4680      	mov	r8, r0
 80081be:	4631      	mov	r1, r6
 80081c0:	4638      	mov	r0, r7
 80081c2:	f7ff fe53 	bl	8007e6c <_Bfree>
 80081c6:	4646      	mov	r6, r8
 80081c8:	106d      	asrs	r5, r5, #1
 80081ca:	d00b      	beq.n	80081e4 <__pow5mult+0xa0>
 80081cc:	6820      	ldr	r0, [r4, #0]
 80081ce:	b938      	cbnz	r0, 80081e0 <__pow5mult+0x9c>
 80081d0:	4622      	mov	r2, r4
 80081d2:	4621      	mov	r1, r4
 80081d4:	4638      	mov	r0, r7
 80081d6:	f7ff ff13 	bl	8008000 <__multiply>
 80081da:	6020      	str	r0, [r4, #0]
 80081dc:	f8c0 9000 	str.w	r9, [r0]
 80081e0:	4604      	mov	r4, r0
 80081e2:	e7e4      	b.n	80081ae <__pow5mult+0x6a>
 80081e4:	4630      	mov	r0, r6
 80081e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ea:	bf00      	nop
 80081ec:	0800922c 	.word	0x0800922c
 80081f0:	08009062 	.word	0x08009062
 80081f4:	080091b7 	.word	0x080091b7

080081f8 <__lshift>:
 80081f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081fc:	460c      	mov	r4, r1
 80081fe:	4607      	mov	r7, r0
 8008200:	4691      	mov	r9, r2
 8008202:	6923      	ldr	r3, [r4, #16]
 8008204:	6849      	ldr	r1, [r1, #4]
 8008206:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800820a:	68a3      	ldr	r3, [r4, #8]
 800820c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008210:	f108 0601 	add.w	r6, r8, #1
 8008214:	42b3      	cmp	r3, r6
 8008216:	db0b      	blt.n	8008230 <__lshift+0x38>
 8008218:	4638      	mov	r0, r7
 800821a:	f7ff fde7 	bl	8007dec <_Balloc>
 800821e:	4605      	mov	r5, r0
 8008220:	b948      	cbnz	r0, 8008236 <__lshift+0x3e>
 8008222:	4602      	mov	r2, r0
 8008224:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008228:	4b27      	ldr	r3, [pc, #156]	@ (80082c8 <__lshift+0xd0>)
 800822a:	4828      	ldr	r0, [pc, #160]	@ (80082cc <__lshift+0xd4>)
 800822c:	f7fe fe66 	bl	8006efc <__assert_func>
 8008230:	3101      	adds	r1, #1
 8008232:	005b      	lsls	r3, r3, #1
 8008234:	e7ee      	b.n	8008214 <__lshift+0x1c>
 8008236:	2300      	movs	r3, #0
 8008238:	f100 0114 	add.w	r1, r0, #20
 800823c:	f100 0210 	add.w	r2, r0, #16
 8008240:	4618      	mov	r0, r3
 8008242:	4553      	cmp	r3, sl
 8008244:	db33      	blt.n	80082ae <__lshift+0xb6>
 8008246:	6920      	ldr	r0, [r4, #16]
 8008248:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800824c:	f104 0314 	add.w	r3, r4, #20
 8008250:	f019 091f 	ands.w	r9, r9, #31
 8008254:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008258:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800825c:	d02b      	beq.n	80082b6 <__lshift+0xbe>
 800825e:	468a      	mov	sl, r1
 8008260:	2200      	movs	r2, #0
 8008262:	f1c9 0e20 	rsb	lr, r9, #32
 8008266:	6818      	ldr	r0, [r3, #0]
 8008268:	fa00 f009 	lsl.w	r0, r0, r9
 800826c:	4310      	orrs	r0, r2
 800826e:	f84a 0b04 	str.w	r0, [sl], #4
 8008272:	f853 2b04 	ldr.w	r2, [r3], #4
 8008276:	459c      	cmp	ip, r3
 8008278:	fa22 f20e 	lsr.w	r2, r2, lr
 800827c:	d8f3      	bhi.n	8008266 <__lshift+0x6e>
 800827e:	ebac 0304 	sub.w	r3, ip, r4
 8008282:	3b15      	subs	r3, #21
 8008284:	f023 0303 	bic.w	r3, r3, #3
 8008288:	3304      	adds	r3, #4
 800828a:	f104 0015 	add.w	r0, r4, #21
 800828e:	4560      	cmp	r0, ip
 8008290:	bf88      	it	hi
 8008292:	2304      	movhi	r3, #4
 8008294:	50ca      	str	r2, [r1, r3]
 8008296:	b10a      	cbz	r2, 800829c <__lshift+0xa4>
 8008298:	f108 0602 	add.w	r6, r8, #2
 800829c:	3e01      	subs	r6, #1
 800829e:	4638      	mov	r0, r7
 80082a0:	4621      	mov	r1, r4
 80082a2:	612e      	str	r6, [r5, #16]
 80082a4:	f7ff fde2 	bl	8007e6c <_Bfree>
 80082a8:	4628      	mov	r0, r5
 80082aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80082b2:	3301      	adds	r3, #1
 80082b4:	e7c5      	b.n	8008242 <__lshift+0x4a>
 80082b6:	3904      	subs	r1, #4
 80082b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80082bc:	459c      	cmp	ip, r3
 80082be:	f841 2f04 	str.w	r2, [r1, #4]!
 80082c2:	d8f9      	bhi.n	80082b8 <__lshift+0xc0>
 80082c4:	e7ea      	b.n	800829c <__lshift+0xa4>
 80082c6:	bf00      	nop
 80082c8:	080091a6 	.word	0x080091a6
 80082cc:	080091b7 	.word	0x080091b7

080082d0 <__mcmp>:
 80082d0:	4603      	mov	r3, r0
 80082d2:	690a      	ldr	r2, [r1, #16]
 80082d4:	6900      	ldr	r0, [r0, #16]
 80082d6:	b530      	push	{r4, r5, lr}
 80082d8:	1a80      	subs	r0, r0, r2
 80082da:	d10e      	bne.n	80082fa <__mcmp+0x2a>
 80082dc:	3314      	adds	r3, #20
 80082de:	3114      	adds	r1, #20
 80082e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80082e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80082e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80082ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80082f0:	4295      	cmp	r5, r2
 80082f2:	d003      	beq.n	80082fc <__mcmp+0x2c>
 80082f4:	d205      	bcs.n	8008302 <__mcmp+0x32>
 80082f6:	f04f 30ff 	mov.w	r0, #4294967295
 80082fa:	bd30      	pop	{r4, r5, pc}
 80082fc:	42a3      	cmp	r3, r4
 80082fe:	d3f3      	bcc.n	80082e8 <__mcmp+0x18>
 8008300:	e7fb      	b.n	80082fa <__mcmp+0x2a>
 8008302:	2001      	movs	r0, #1
 8008304:	e7f9      	b.n	80082fa <__mcmp+0x2a>
	...

08008308 <__mdiff>:
 8008308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830c:	4689      	mov	r9, r1
 800830e:	4606      	mov	r6, r0
 8008310:	4611      	mov	r1, r2
 8008312:	4648      	mov	r0, r9
 8008314:	4614      	mov	r4, r2
 8008316:	f7ff ffdb 	bl	80082d0 <__mcmp>
 800831a:	1e05      	subs	r5, r0, #0
 800831c:	d112      	bne.n	8008344 <__mdiff+0x3c>
 800831e:	4629      	mov	r1, r5
 8008320:	4630      	mov	r0, r6
 8008322:	f7ff fd63 	bl	8007dec <_Balloc>
 8008326:	4602      	mov	r2, r0
 8008328:	b928      	cbnz	r0, 8008336 <__mdiff+0x2e>
 800832a:	f240 2137 	movw	r1, #567	@ 0x237
 800832e:	4b3e      	ldr	r3, [pc, #248]	@ (8008428 <__mdiff+0x120>)
 8008330:	483e      	ldr	r0, [pc, #248]	@ (800842c <__mdiff+0x124>)
 8008332:	f7fe fde3 	bl	8006efc <__assert_func>
 8008336:	2301      	movs	r3, #1
 8008338:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800833c:	4610      	mov	r0, r2
 800833e:	b003      	add	sp, #12
 8008340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008344:	bfbc      	itt	lt
 8008346:	464b      	movlt	r3, r9
 8008348:	46a1      	movlt	r9, r4
 800834a:	4630      	mov	r0, r6
 800834c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008350:	bfba      	itte	lt
 8008352:	461c      	movlt	r4, r3
 8008354:	2501      	movlt	r5, #1
 8008356:	2500      	movge	r5, #0
 8008358:	f7ff fd48 	bl	8007dec <_Balloc>
 800835c:	4602      	mov	r2, r0
 800835e:	b918      	cbnz	r0, 8008368 <__mdiff+0x60>
 8008360:	f240 2145 	movw	r1, #581	@ 0x245
 8008364:	4b30      	ldr	r3, [pc, #192]	@ (8008428 <__mdiff+0x120>)
 8008366:	e7e3      	b.n	8008330 <__mdiff+0x28>
 8008368:	f100 0b14 	add.w	fp, r0, #20
 800836c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008370:	f109 0310 	add.w	r3, r9, #16
 8008374:	60c5      	str	r5, [r0, #12]
 8008376:	f04f 0c00 	mov.w	ip, #0
 800837a:	f109 0514 	add.w	r5, r9, #20
 800837e:	46d9      	mov	r9, fp
 8008380:	6926      	ldr	r6, [r4, #16]
 8008382:	f104 0e14 	add.w	lr, r4, #20
 8008386:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800838a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800838e:	9301      	str	r3, [sp, #4]
 8008390:	9b01      	ldr	r3, [sp, #4]
 8008392:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008396:	f853 af04 	ldr.w	sl, [r3, #4]!
 800839a:	b281      	uxth	r1, r0
 800839c:	9301      	str	r3, [sp, #4]
 800839e:	fa1f f38a 	uxth.w	r3, sl
 80083a2:	1a5b      	subs	r3, r3, r1
 80083a4:	0c00      	lsrs	r0, r0, #16
 80083a6:	4463      	add	r3, ip
 80083a8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80083ac:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80083b6:	4576      	cmp	r6, lr
 80083b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80083bc:	f849 3b04 	str.w	r3, [r9], #4
 80083c0:	d8e6      	bhi.n	8008390 <__mdiff+0x88>
 80083c2:	1b33      	subs	r3, r6, r4
 80083c4:	3b15      	subs	r3, #21
 80083c6:	f023 0303 	bic.w	r3, r3, #3
 80083ca:	3415      	adds	r4, #21
 80083cc:	3304      	adds	r3, #4
 80083ce:	42a6      	cmp	r6, r4
 80083d0:	bf38      	it	cc
 80083d2:	2304      	movcc	r3, #4
 80083d4:	441d      	add	r5, r3
 80083d6:	445b      	add	r3, fp
 80083d8:	461e      	mov	r6, r3
 80083da:	462c      	mov	r4, r5
 80083dc:	4544      	cmp	r4, r8
 80083de:	d30e      	bcc.n	80083fe <__mdiff+0xf6>
 80083e0:	f108 0103 	add.w	r1, r8, #3
 80083e4:	1b49      	subs	r1, r1, r5
 80083e6:	f021 0103 	bic.w	r1, r1, #3
 80083ea:	3d03      	subs	r5, #3
 80083ec:	45a8      	cmp	r8, r5
 80083ee:	bf38      	it	cc
 80083f0:	2100      	movcc	r1, #0
 80083f2:	440b      	add	r3, r1
 80083f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80083f8:	b199      	cbz	r1, 8008422 <__mdiff+0x11a>
 80083fa:	6117      	str	r7, [r2, #16]
 80083fc:	e79e      	b.n	800833c <__mdiff+0x34>
 80083fe:	46e6      	mov	lr, ip
 8008400:	f854 1b04 	ldr.w	r1, [r4], #4
 8008404:	fa1f fc81 	uxth.w	ip, r1
 8008408:	44f4      	add	ip, lr
 800840a:	0c08      	lsrs	r0, r1, #16
 800840c:	4471      	add	r1, lr
 800840e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008412:	b289      	uxth	r1, r1
 8008414:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008418:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800841c:	f846 1b04 	str.w	r1, [r6], #4
 8008420:	e7dc      	b.n	80083dc <__mdiff+0xd4>
 8008422:	3f01      	subs	r7, #1
 8008424:	e7e6      	b.n	80083f4 <__mdiff+0xec>
 8008426:	bf00      	nop
 8008428:	080091a6 	.word	0x080091a6
 800842c:	080091b7 	.word	0x080091b7

08008430 <__d2b>:
 8008430:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008434:	2101      	movs	r1, #1
 8008436:	4690      	mov	r8, r2
 8008438:	4699      	mov	r9, r3
 800843a:	9e08      	ldr	r6, [sp, #32]
 800843c:	f7ff fcd6 	bl	8007dec <_Balloc>
 8008440:	4604      	mov	r4, r0
 8008442:	b930      	cbnz	r0, 8008452 <__d2b+0x22>
 8008444:	4602      	mov	r2, r0
 8008446:	f240 310f 	movw	r1, #783	@ 0x30f
 800844a:	4b23      	ldr	r3, [pc, #140]	@ (80084d8 <__d2b+0xa8>)
 800844c:	4823      	ldr	r0, [pc, #140]	@ (80084dc <__d2b+0xac>)
 800844e:	f7fe fd55 	bl	8006efc <__assert_func>
 8008452:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008456:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800845a:	b10d      	cbz	r5, 8008460 <__d2b+0x30>
 800845c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008460:	9301      	str	r3, [sp, #4]
 8008462:	f1b8 0300 	subs.w	r3, r8, #0
 8008466:	d024      	beq.n	80084b2 <__d2b+0x82>
 8008468:	4668      	mov	r0, sp
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	f7ff fd85 	bl	8007f7a <__lo0bits>
 8008470:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008474:	b1d8      	cbz	r0, 80084ae <__d2b+0x7e>
 8008476:	f1c0 0320 	rsb	r3, r0, #32
 800847a:	fa02 f303 	lsl.w	r3, r2, r3
 800847e:	430b      	orrs	r3, r1
 8008480:	40c2      	lsrs	r2, r0
 8008482:	6163      	str	r3, [r4, #20]
 8008484:	9201      	str	r2, [sp, #4]
 8008486:	9b01      	ldr	r3, [sp, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	bf0c      	ite	eq
 800848c:	2201      	moveq	r2, #1
 800848e:	2202      	movne	r2, #2
 8008490:	61a3      	str	r3, [r4, #24]
 8008492:	6122      	str	r2, [r4, #16]
 8008494:	b1ad      	cbz	r5, 80084c2 <__d2b+0x92>
 8008496:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800849a:	4405      	add	r5, r0
 800849c:	6035      	str	r5, [r6, #0]
 800849e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80084a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084a4:	6018      	str	r0, [r3, #0]
 80084a6:	4620      	mov	r0, r4
 80084a8:	b002      	add	sp, #8
 80084aa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80084ae:	6161      	str	r1, [r4, #20]
 80084b0:	e7e9      	b.n	8008486 <__d2b+0x56>
 80084b2:	a801      	add	r0, sp, #4
 80084b4:	f7ff fd61 	bl	8007f7a <__lo0bits>
 80084b8:	9b01      	ldr	r3, [sp, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	6163      	str	r3, [r4, #20]
 80084be:	3020      	adds	r0, #32
 80084c0:	e7e7      	b.n	8008492 <__d2b+0x62>
 80084c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80084c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084ca:	6030      	str	r0, [r6, #0]
 80084cc:	6918      	ldr	r0, [r3, #16]
 80084ce:	f7ff fd35 	bl	8007f3c <__hi0bits>
 80084d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084d6:	e7e4      	b.n	80084a2 <__d2b+0x72>
 80084d8:	080091a6 	.word	0x080091a6
 80084dc:	080091b7 	.word	0x080091b7

080084e0 <__ssputs_r>:
 80084e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e4:	461f      	mov	r7, r3
 80084e6:	688e      	ldr	r6, [r1, #8]
 80084e8:	4682      	mov	sl, r0
 80084ea:	42be      	cmp	r6, r7
 80084ec:	460c      	mov	r4, r1
 80084ee:	4690      	mov	r8, r2
 80084f0:	680b      	ldr	r3, [r1, #0]
 80084f2:	d82d      	bhi.n	8008550 <__ssputs_r+0x70>
 80084f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084fc:	d026      	beq.n	800854c <__ssputs_r+0x6c>
 80084fe:	6965      	ldr	r5, [r4, #20]
 8008500:	6909      	ldr	r1, [r1, #16]
 8008502:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008506:	eba3 0901 	sub.w	r9, r3, r1
 800850a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800850e:	1c7b      	adds	r3, r7, #1
 8008510:	444b      	add	r3, r9
 8008512:	106d      	asrs	r5, r5, #1
 8008514:	429d      	cmp	r5, r3
 8008516:	bf38      	it	cc
 8008518:	461d      	movcc	r5, r3
 800851a:	0553      	lsls	r3, r2, #21
 800851c:	d527      	bpl.n	800856e <__ssputs_r+0x8e>
 800851e:	4629      	mov	r1, r5
 8008520:	f7ff fbd8 	bl	8007cd4 <_malloc_r>
 8008524:	4606      	mov	r6, r0
 8008526:	b360      	cbz	r0, 8008582 <__ssputs_r+0xa2>
 8008528:	464a      	mov	r2, r9
 800852a:	6921      	ldr	r1, [r4, #16]
 800852c:	f000 fa14 	bl	8008958 <memcpy>
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800853a:	81a3      	strh	r3, [r4, #12]
 800853c:	6126      	str	r6, [r4, #16]
 800853e:	444e      	add	r6, r9
 8008540:	6026      	str	r6, [r4, #0]
 8008542:	463e      	mov	r6, r7
 8008544:	6165      	str	r5, [r4, #20]
 8008546:	eba5 0509 	sub.w	r5, r5, r9
 800854a:	60a5      	str	r5, [r4, #8]
 800854c:	42be      	cmp	r6, r7
 800854e:	d900      	bls.n	8008552 <__ssputs_r+0x72>
 8008550:	463e      	mov	r6, r7
 8008552:	4632      	mov	r2, r6
 8008554:	4641      	mov	r1, r8
 8008556:	6820      	ldr	r0, [r4, #0]
 8008558:	f000 f9d4 	bl	8008904 <memmove>
 800855c:	2000      	movs	r0, #0
 800855e:	68a3      	ldr	r3, [r4, #8]
 8008560:	1b9b      	subs	r3, r3, r6
 8008562:	60a3      	str	r3, [r4, #8]
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	4433      	add	r3, r6
 8008568:	6023      	str	r3, [r4, #0]
 800856a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800856e:	462a      	mov	r2, r5
 8008570:	f000 fa2d 	bl	80089ce <_realloc_r>
 8008574:	4606      	mov	r6, r0
 8008576:	2800      	cmp	r0, #0
 8008578:	d1e0      	bne.n	800853c <__ssputs_r+0x5c>
 800857a:	4650      	mov	r0, sl
 800857c:	6921      	ldr	r1, [r4, #16]
 800857e:	f7ff fb37 	bl	8007bf0 <_free_r>
 8008582:	230c      	movs	r3, #12
 8008584:	f8ca 3000 	str.w	r3, [sl]
 8008588:	89a3      	ldrh	r3, [r4, #12]
 800858a:	f04f 30ff 	mov.w	r0, #4294967295
 800858e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008592:	81a3      	strh	r3, [r4, #12]
 8008594:	e7e9      	b.n	800856a <__ssputs_r+0x8a>
	...

08008598 <_svfiprintf_r>:
 8008598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800859c:	4698      	mov	r8, r3
 800859e:	898b      	ldrh	r3, [r1, #12]
 80085a0:	4607      	mov	r7, r0
 80085a2:	061b      	lsls	r3, r3, #24
 80085a4:	460d      	mov	r5, r1
 80085a6:	4614      	mov	r4, r2
 80085a8:	b09d      	sub	sp, #116	@ 0x74
 80085aa:	d510      	bpl.n	80085ce <_svfiprintf_r+0x36>
 80085ac:	690b      	ldr	r3, [r1, #16]
 80085ae:	b973      	cbnz	r3, 80085ce <_svfiprintf_r+0x36>
 80085b0:	2140      	movs	r1, #64	@ 0x40
 80085b2:	f7ff fb8f 	bl	8007cd4 <_malloc_r>
 80085b6:	6028      	str	r0, [r5, #0]
 80085b8:	6128      	str	r0, [r5, #16]
 80085ba:	b930      	cbnz	r0, 80085ca <_svfiprintf_r+0x32>
 80085bc:	230c      	movs	r3, #12
 80085be:	603b      	str	r3, [r7, #0]
 80085c0:	f04f 30ff 	mov.w	r0, #4294967295
 80085c4:	b01d      	add	sp, #116	@ 0x74
 80085c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ca:	2340      	movs	r3, #64	@ 0x40
 80085cc:	616b      	str	r3, [r5, #20]
 80085ce:	2300      	movs	r3, #0
 80085d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80085d2:	2320      	movs	r3, #32
 80085d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085d8:	2330      	movs	r3, #48	@ 0x30
 80085da:	f04f 0901 	mov.w	r9, #1
 80085de:	f8cd 800c 	str.w	r8, [sp, #12]
 80085e2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800877c <_svfiprintf_r+0x1e4>
 80085e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085ea:	4623      	mov	r3, r4
 80085ec:	469a      	mov	sl, r3
 80085ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085f2:	b10a      	cbz	r2, 80085f8 <_svfiprintf_r+0x60>
 80085f4:	2a25      	cmp	r2, #37	@ 0x25
 80085f6:	d1f9      	bne.n	80085ec <_svfiprintf_r+0x54>
 80085f8:	ebba 0b04 	subs.w	fp, sl, r4
 80085fc:	d00b      	beq.n	8008616 <_svfiprintf_r+0x7e>
 80085fe:	465b      	mov	r3, fp
 8008600:	4622      	mov	r2, r4
 8008602:	4629      	mov	r1, r5
 8008604:	4638      	mov	r0, r7
 8008606:	f7ff ff6b 	bl	80084e0 <__ssputs_r>
 800860a:	3001      	adds	r0, #1
 800860c:	f000 80a7 	beq.w	800875e <_svfiprintf_r+0x1c6>
 8008610:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008612:	445a      	add	r2, fp
 8008614:	9209      	str	r2, [sp, #36]	@ 0x24
 8008616:	f89a 3000 	ldrb.w	r3, [sl]
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 809f 	beq.w	800875e <_svfiprintf_r+0x1c6>
 8008620:	2300      	movs	r3, #0
 8008622:	f04f 32ff 	mov.w	r2, #4294967295
 8008626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800862a:	f10a 0a01 	add.w	sl, sl, #1
 800862e:	9304      	str	r3, [sp, #16]
 8008630:	9307      	str	r3, [sp, #28]
 8008632:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008636:	931a      	str	r3, [sp, #104]	@ 0x68
 8008638:	4654      	mov	r4, sl
 800863a:	2205      	movs	r2, #5
 800863c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008640:	484e      	ldr	r0, [pc, #312]	@ (800877c <_svfiprintf_r+0x1e4>)
 8008642:	f7fe fc4c 	bl	8006ede <memchr>
 8008646:	9a04      	ldr	r2, [sp, #16]
 8008648:	b9d8      	cbnz	r0, 8008682 <_svfiprintf_r+0xea>
 800864a:	06d0      	lsls	r0, r2, #27
 800864c:	bf44      	itt	mi
 800864e:	2320      	movmi	r3, #32
 8008650:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008654:	0711      	lsls	r1, r2, #28
 8008656:	bf44      	itt	mi
 8008658:	232b      	movmi	r3, #43	@ 0x2b
 800865a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800865e:	f89a 3000 	ldrb.w	r3, [sl]
 8008662:	2b2a      	cmp	r3, #42	@ 0x2a
 8008664:	d015      	beq.n	8008692 <_svfiprintf_r+0xfa>
 8008666:	4654      	mov	r4, sl
 8008668:	2000      	movs	r0, #0
 800866a:	f04f 0c0a 	mov.w	ip, #10
 800866e:	9a07      	ldr	r2, [sp, #28]
 8008670:	4621      	mov	r1, r4
 8008672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008676:	3b30      	subs	r3, #48	@ 0x30
 8008678:	2b09      	cmp	r3, #9
 800867a:	d94b      	bls.n	8008714 <_svfiprintf_r+0x17c>
 800867c:	b1b0      	cbz	r0, 80086ac <_svfiprintf_r+0x114>
 800867e:	9207      	str	r2, [sp, #28]
 8008680:	e014      	b.n	80086ac <_svfiprintf_r+0x114>
 8008682:	eba0 0308 	sub.w	r3, r0, r8
 8008686:	fa09 f303 	lsl.w	r3, r9, r3
 800868a:	4313      	orrs	r3, r2
 800868c:	46a2      	mov	sl, r4
 800868e:	9304      	str	r3, [sp, #16]
 8008690:	e7d2      	b.n	8008638 <_svfiprintf_r+0xa0>
 8008692:	9b03      	ldr	r3, [sp, #12]
 8008694:	1d19      	adds	r1, r3, #4
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	9103      	str	r1, [sp, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	bfbb      	ittet	lt
 800869e:	425b      	neglt	r3, r3
 80086a0:	f042 0202 	orrlt.w	r2, r2, #2
 80086a4:	9307      	strge	r3, [sp, #28]
 80086a6:	9307      	strlt	r3, [sp, #28]
 80086a8:	bfb8      	it	lt
 80086aa:	9204      	strlt	r2, [sp, #16]
 80086ac:	7823      	ldrb	r3, [r4, #0]
 80086ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80086b0:	d10a      	bne.n	80086c8 <_svfiprintf_r+0x130>
 80086b2:	7863      	ldrb	r3, [r4, #1]
 80086b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80086b6:	d132      	bne.n	800871e <_svfiprintf_r+0x186>
 80086b8:	9b03      	ldr	r3, [sp, #12]
 80086ba:	3402      	adds	r4, #2
 80086bc:	1d1a      	adds	r2, r3, #4
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	9203      	str	r2, [sp, #12]
 80086c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086c6:	9305      	str	r3, [sp, #20]
 80086c8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008780 <_svfiprintf_r+0x1e8>
 80086cc:	2203      	movs	r2, #3
 80086ce:	4650      	mov	r0, sl
 80086d0:	7821      	ldrb	r1, [r4, #0]
 80086d2:	f7fe fc04 	bl	8006ede <memchr>
 80086d6:	b138      	cbz	r0, 80086e8 <_svfiprintf_r+0x150>
 80086d8:	2240      	movs	r2, #64	@ 0x40
 80086da:	9b04      	ldr	r3, [sp, #16]
 80086dc:	eba0 000a 	sub.w	r0, r0, sl
 80086e0:	4082      	lsls	r2, r0
 80086e2:	4313      	orrs	r3, r2
 80086e4:	3401      	adds	r4, #1
 80086e6:	9304      	str	r3, [sp, #16]
 80086e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ec:	2206      	movs	r2, #6
 80086ee:	4825      	ldr	r0, [pc, #148]	@ (8008784 <_svfiprintf_r+0x1ec>)
 80086f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086f4:	f7fe fbf3 	bl	8006ede <memchr>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	d036      	beq.n	800876a <_svfiprintf_r+0x1d2>
 80086fc:	4b22      	ldr	r3, [pc, #136]	@ (8008788 <_svfiprintf_r+0x1f0>)
 80086fe:	bb1b      	cbnz	r3, 8008748 <_svfiprintf_r+0x1b0>
 8008700:	9b03      	ldr	r3, [sp, #12]
 8008702:	3307      	adds	r3, #7
 8008704:	f023 0307 	bic.w	r3, r3, #7
 8008708:	3308      	adds	r3, #8
 800870a:	9303      	str	r3, [sp, #12]
 800870c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800870e:	4433      	add	r3, r6
 8008710:	9309      	str	r3, [sp, #36]	@ 0x24
 8008712:	e76a      	b.n	80085ea <_svfiprintf_r+0x52>
 8008714:	460c      	mov	r4, r1
 8008716:	2001      	movs	r0, #1
 8008718:	fb0c 3202 	mla	r2, ip, r2, r3
 800871c:	e7a8      	b.n	8008670 <_svfiprintf_r+0xd8>
 800871e:	2300      	movs	r3, #0
 8008720:	f04f 0c0a 	mov.w	ip, #10
 8008724:	4619      	mov	r1, r3
 8008726:	3401      	adds	r4, #1
 8008728:	9305      	str	r3, [sp, #20]
 800872a:	4620      	mov	r0, r4
 800872c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008730:	3a30      	subs	r2, #48	@ 0x30
 8008732:	2a09      	cmp	r2, #9
 8008734:	d903      	bls.n	800873e <_svfiprintf_r+0x1a6>
 8008736:	2b00      	cmp	r3, #0
 8008738:	d0c6      	beq.n	80086c8 <_svfiprintf_r+0x130>
 800873a:	9105      	str	r1, [sp, #20]
 800873c:	e7c4      	b.n	80086c8 <_svfiprintf_r+0x130>
 800873e:	4604      	mov	r4, r0
 8008740:	2301      	movs	r3, #1
 8008742:	fb0c 2101 	mla	r1, ip, r1, r2
 8008746:	e7f0      	b.n	800872a <_svfiprintf_r+0x192>
 8008748:	ab03      	add	r3, sp, #12
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	462a      	mov	r2, r5
 800874e:	4638      	mov	r0, r7
 8008750:	4b0e      	ldr	r3, [pc, #56]	@ (800878c <_svfiprintf_r+0x1f4>)
 8008752:	a904      	add	r1, sp, #16
 8008754:	f7fd fe60 	bl	8006418 <_printf_float>
 8008758:	1c42      	adds	r2, r0, #1
 800875a:	4606      	mov	r6, r0
 800875c:	d1d6      	bne.n	800870c <_svfiprintf_r+0x174>
 800875e:	89ab      	ldrh	r3, [r5, #12]
 8008760:	065b      	lsls	r3, r3, #25
 8008762:	f53f af2d 	bmi.w	80085c0 <_svfiprintf_r+0x28>
 8008766:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008768:	e72c      	b.n	80085c4 <_svfiprintf_r+0x2c>
 800876a:	ab03      	add	r3, sp, #12
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	462a      	mov	r2, r5
 8008770:	4638      	mov	r0, r7
 8008772:	4b06      	ldr	r3, [pc, #24]	@ (800878c <_svfiprintf_r+0x1f4>)
 8008774:	a904      	add	r1, sp, #16
 8008776:	f7fe f8ed 	bl	8006954 <_printf_i>
 800877a:	e7ed      	b.n	8008758 <_svfiprintf_r+0x1c0>
 800877c:	08009210 	.word	0x08009210
 8008780:	08009216 	.word	0x08009216
 8008784:	0800921a 	.word	0x0800921a
 8008788:	08006419 	.word	0x08006419
 800878c:	080084e1 	.word	0x080084e1

08008790 <__sflush_r>:
 8008790:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008796:	0716      	lsls	r6, r2, #28
 8008798:	4605      	mov	r5, r0
 800879a:	460c      	mov	r4, r1
 800879c:	d454      	bmi.n	8008848 <__sflush_r+0xb8>
 800879e:	684b      	ldr	r3, [r1, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	dc02      	bgt.n	80087aa <__sflush_r+0x1a>
 80087a4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	dd48      	ble.n	800883c <__sflush_r+0xac>
 80087aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087ac:	2e00      	cmp	r6, #0
 80087ae:	d045      	beq.n	800883c <__sflush_r+0xac>
 80087b0:	2300      	movs	r3, #0
 80087b2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80087b6:	682f      	ldr	r7, [r5, #0]
 80087b8:	6a21      	ldr	r1, [r4, #32]
 80087ba:	602b      	str	r3, [r5, #0]
 80087bc:	d030      	beq.n	8008820 <__sflush_r+0x90>
 80087be:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087c0:	89a3      	ldrh	r3, [r4, #12]
 80087c2:	0759      	lsls	r1, r3, #29
 80087c4:	d505      	bpl.n	80087d2 <__sflush_r+0x42>
 80087c6:	6863      	ldr	r3, [r4, #4]
 80087c8:	1ad2      	subs	r2, r2, r3
 80087ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087cc:	b10b      	cbz	r3, 80087d2 <__sflush_r+0x42>
 80087ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087d0:	1ad2      	subs	r2, r2, r3
 80087d2:	2300      	movs	r3, #0
 80087d4:	4628      	mov	r0, r5
 80087d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087d8:	6a21      	ldr	r1, [r4, #32]
 80087da:	47b0      	blx	r6
 80087dc:	1c43      	adds	r3, r0, #1
 80087de:	89a3      	ldrh	r3, [r4, #12]
 80087e0:	d106      	bne.n	80087f0 <__sflush_r+0x60>
 80087e2:	6829      	ldr	r1, [r5, #0]
 80087e4:	291d      	cmp	r1, #29
 80087e6:	d82b      	bhi.n	8008840 <__sflush_r+0xb0>
 80087e8:	4a28      	ldr	r2, [pc, #160]	@ (800888c <__sflush_r+0xfc>)
 80087ea:	40ca      	lsrs	r2, r1
 80087ec:	07d6      	lsls	r6, r2, #31
 80087ee:	d527      	bpl.n	8008840 <__sflush_r+0xb0>
 80087f0:	2200      	movs	r2, #0
 80087f2:	6062      	str	r2, [r4, #4]
 80087f4:	6922      	ldr	r2, [r4, #16]
 80087f6:	04d9      	lsls	r1, r3, #19
 80087f8:	6022      	str	r2, [r4, #0]
 80087fa:	d504      	bpl.n	8008806 <__sflush_r+0x76>
 80087fc:	1c42      	adds	r2, r0, #1
 80087fe:	d101      	bne.n	8008804 <__sflush_r+0x74>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	b903      	cbnz	r3, 8008806 <__sflush_r+0x76>
 8008804:	6560      	str	r0, [r4, #84]	@ 0x54
 8008806:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008808:	602f      	str	r7, [r5, #0]
 800880a:	b1b9      	cbz	r1, 800883c <__sflush_r+0xac>
 800880c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008810:	4299      	cmp	r1, r3
 8008812:	d002      	beq.n	800881a <__sflush_r+0x8a>
 8008814:	4628      	mov	r0, r5
 8008816:	f7ff f9eb 	bl	8007bf0 <_free_r>
 800881a:	2300      	movs	r3, #0
 800881c:	6363      	str	r3, [r4, #52]	@ 0x34
 800881e:	e00d      	b.n	800883c <__sflush_r+0xac>
 8008820:	2301      	movs	r3, #1
 8008822:	4628      	mov	r0, r5
 8008824:	47b0      	blx	r6
 8008826:	4602      	mov	r2, r0
 8008828:	1c50      	adds	r0, r2, #1
 800882a:	d1c9      	bne.n	80087c0 <__sflush_r+0x30>
 800882c:	682b      	ldr	r3, [r5, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d0c6      	beq.n	80087c0 <__sflush_r+0x30>
 8008832:	2b1d      	cmp	r3, #29
 8008834:	d001      	beq.n	800883a <__sflush_r+0xaa>
 8008836:	2b16      	cmp	r3, #22
 8008838:	d11d      	bne.n	8008876 <__sflush_r+0xe6>
 800883a:	602f      	str	r7, [r5, #0]
 800883c:	2000      	movs	r0, #0
 800883e:	e021      	b.n	8008884 <__sflush_r+0xf4>
 8008840:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008844:	b21b      	sxth	r3, r3
 8008846:	e01a      	b.n	800887e <__sflush_r+0xee>
 8008848:	690f      	ldr	r7, [r1, #16]
 800884a:	2f00      	cmp	r7, #0
 800884c:	d0f6      	beq.n	800883c <__sflush_r+0xac>
 800884e:	0793      	lsls	r3, r2, #30
 8008850:	bf18      	it	ne
 8008852:	2300      	movne	r3, #0
 8008854:	680e      	ldr	r6, [r1, #0]
 8008856:	bf08      	it	eq
 8008858:	694b      	ldreq	r3, [r1, #20]
 800885a:	1bf6      	subs	r6, r6, r7
 800885c:	600f      	str	r7, [r1, #0]
 800885e:	608b      	str	r3, [r1, #8]
 8008860:	2e00      	cmp	r6, #0
 8008862:	ddeb      	ble.n	800883c <__sflush_r+0xac>
 8008864:	4633      	mov	r3, r6
 8008866:	463a      	mov	r2, r7
 8008868:	4628      	mov	r0, r5
 800886a:	6a21      	ldr	r1, [r4, #32]
 800886c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008870:	47e0      	blx	ip
 8008872:	2800      	cmp	r0, #0
 8008874:	dc07      	bgt.n	8008886 <__sflush_r+0xf6>
 8008876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800887a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800887e:	f04f 30ff 	mov.w	r0, #4294967295
 8008882:	81a3      	strh	r3, [r4, #12]
 8008884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008886:	4407      	add	r7, r0
 8008888:	1a36      	subs	r6, r6, r0
 800888a:	e7e9      	b.n	8008860 <__sflush_r+0xd0>
 800888c:	20400001 	.word	0x20400001

08008890 <_fflush_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	690b      	ldr	r3, [r1, #16]
 8008894:	4605      	mov	r5, r0
 8008896:	460c      	mov	r4, r1
 8008898:	b913      	cbnz	r3, 80088a0 <_fflush_r+0x10>
 800889a:	2500      	movs	r5, #0
 800889c:	4628      	mov	r0, r5
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	b118      	cbz	r0, 80088aa <_fflush_r+0x1a>
 80088a2:	6a03      	ldr	r3, [r0, #32]
 80088a4:	b90b      	cbnz	r3, 80088aa <_fflush_r+0x1a>
 80088a6:	f7fe f9ff 	bl	8006ca8 <__sinit>
 80088aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0f3      	beq.n	800889a <_fflush_r+0xa>
 80088b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088b4:	07d0      	lsls	r0, r2, #31
 80088b6:	d404      	bmi.n	80088c2 <_fflush_r+0x32>
 80088b8:	0599      	lsls	r1, r3, #22
 80088ba:	d402      	bmi.n	80088c2 <_fflush_r+0x32>
 80088bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088be:	f7fe fb0c 	bl	8006eda <__retarget_lock_acquire_recursive>
 80088c2:	4628      	mov	r0, r5
 80088c4:	4621      	mov	r1, r4
 80088c6:	f7ff ff63 	bl	8008790 <__sflush_r>
 80088ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088cc:	4605      	mov	r5, r0
 80088ce:	07da      	lsls	r2, r3, #31
 80088d0:	d4e4      	bmi.n	800889c <_fflush_r+0xc>
 80088d2:	89a3      	ldrh	r3, [r4, #12]
 80088d4:	059b      	lsls	r3, r3, #22
 80088d6:	d4e1      	bmi.n	800889c <_fflush_r+0xc>
 80088d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088da:	f7fe faff 	bl	8006edc <__retarget_lock_release_recursive>
 80088de:	e7dd      	b.n	800889c <_fflush_r+0xc>

080088e0 <fiprintf>:
 80088e0:	b40e      	push	{r1, r2, r3}
 80088e2:	b503      	push	{r0, r1, lr}
 80088e4:	4601      	mov	r1, r0
 80088e6:	ab03      	add	r3, sp, #12
 80088e8:	4805      	ldr	r0, [pc, #20]	@ (8008900 <fiprintf+0x20>)
 80088ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ee:	6800      	ldr	r0, [r0, #0]
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	f000 f8cf 	bl	8008a94 <_vfiprintf_r>
 80088f6:	b002      	add	sp, #8
 80088f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80088fc:	b003      	add	sp, #12
 80088fe:	4770      	bx	lr
 8008900:	20000018 	.word	0x20000018

08008904 <memmove>:
 8008904:	4288      	cmp	r0, r1
 8008906:	b510      	push	{r4, lr}
 8008908:	eb01 0402 	add.w	r4, r1, r2
 800890c:	d902      	bls.n	8008914 <memmove+0x10>
 800890e:	4284      	cmp	r4, r0
 8008910:	4623      	mov	r3, r4
 8008912:	d807      	bhi.n	8008924 <memmove+0x20>
 8008914:	1e43      	subs	r3, r0, #1
 8008916:	42a1      	cmp	r1, r4
 8008918:	d008      	beq.n	800892c <memmove+0x28>
 800891a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800891e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008922:	e7f8      	b.n	8008916 <memmove+0x12>
 8008924:	4601      	mov	r1, r0
 8008926:	4402      	add	r2, r0
 8008928:	428a      	cmp	r2, r1
 800892a:	d100      	bne.n	800892e <memmove+0x2a>
 800892c:	bd10      	pop	{r4, pc}
 800892e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008932:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008936:	e7f7      	b.n	8008928 <memmove+0x24>

08008938 <_sbrk_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	2300      	movs	r3, #0
 800893c:	4d05      	ldr	r5, [pc, #20]	@ (8008954 <_sbrk_r+0x1c>)
 800893e:	4604      	mov	r4, r0
 8008940:	4608      	mov	r0, r1
 8008942:	602b      	str	r3, [r5, #0]
 8008944:	f7f9 f84a 	bl	80019dc <_sbrk>
 8008948:	1c43      	adds	r3, r0, #1
 800894a:	d102      	bne.n	8008952 <_sbrk_r+0x1a>
 800894c:	682b      	ldr	r3, [r5, #0]
 800894e:	b103      	cbz	r3, 8008952 <_sbrk_r+0x1a>
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	bd38      	pop	{r3, r4, r5, pc}
 8008954:	2000058c 	.word	0x2000058c

08008958 <memcpy>:
 8008958:	440a      	add	r2, r1
 800895a:	4291      	cmp	r1, r2
 800895c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008960:	d100      	bne.n	8008964 <memcpy+0xc>
 8008962:	4770      	bx	lr
 8008964:	b510      	push	{r4, lr}
 8008966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800896a:	4291      	cmp	r1, r2
 800896c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008970:	d1f9      	bne.n	8008966 <memcpy+0xe>
 8008972:	bd10      	pop	{r4, pc}

08008974 <abort>:
 8008974:	2006      	movs	r0, #6
 8008976:	b508      	push	{r3, lr}
 8008978:	f000 fa60 	bl	8008e3c <raise>
 800897c:	2001      	movs	r0, #1
 800897e:	f7f8 ffb8 	bl	80018f2 <_exit>

08008982 <_calloc_r>:
 8008982:	b570      	push	{r4, r5, r6, lr}
 8008984:	fba1 5402 	umull	r5, r4, r1, r2
 8008988:	b934      	cbnz	r4, 8008998 <_calloc_r+0x16>
 800898a:	4629      	mov	r1, r5
 800898c:	f7ff f9a2 	bl	8007cd4 <_malloc_r>
 8008990:	4606      	mov	r6, r0
 8008992:	b928      	cbnz	r0, 80089a0 <_calloc_r+0x1e>
 8008994:	4630      	mov	r0, r6
 8008996:	bd70      	pop	{r4, r5, r6, pc}
 8008998:	220c      	movs	r2, #12
 800899a:	2600      	movs	r6, #0
 800899c:	6002      	str	r2, [r0, #0]
 800899e:	e7f9      	b.n	8008994 <_calloc_r+0x12>
 80089a0:	462a      	mov	r2, r5
 80089a2:	4621      	mov	r1, r4
 80089a4:	f7fe fa1b 	bl	8006dde <memset>
 80089a8:	e7f4      	b.n	8008994 <_calloc_r+0x12>

080089aa <__ascii_mbtowc>:
 80089aa:	b082      	sub	sp, #8
 80089ac:	b901      	cbnz	r1, 80089b0 <__ascii_mbtowc+0x6>
 80089ae:	a901      	add	r1, sp, #4
 80089b0:	b142      	cbz	r2, 80089c4 <__ascii_mbtowc+0x1a>
 80089b2:	b14b      	cbz	r3, 80089c8 <__ascii_mbtowc+0x1e>
 80089b4:	7813      	ldrb	r3, [r2, #0]
 80089b6:	600b      	str	r3, [r1, #0]
 80089b8:	7812      	ldrb	r2, [r2, #0]
 80089ba:	1e10      	subs	r0, r2, #0
 80089bc:	bf18      	it	ne
 80089be:	2001      	movne	r0, #1
 80089c0:	b002      	add	sp, #8
 80089c2:	4770      	bx	lr
 80089c4:	4610      	mov	r0, r2
 80089c6:	e7fb      	b.n	80089c0 <__ascii_mbtowc+0x16>
 80089c8:	f06f 0001 	mvn.w	r0, #1
 80089cc:	e7f8      	b.n	80089c0 <__ascii_mbtowc+0x16>

080089ce <_realloc_r>:
 80089ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d2:	4607      	mov	r7, r0
 80089d4:	4614      	mov	r4, r2
 80089d6:	460d      	mov	r5, r1
 80089d8:	b921      	cbnz	r1, 80089e4 <_realloc_r+0x16>
 80089da:	4611      	mov	r1, r2
 80089dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089e0:	f7ff b978 	b.w	8007cd4 <_malloc_r>
 80089e4:	b92a      	cbnz	r2, 80089f2 <_realloc_r+0x24>
 80089e6:	f7ff f903 	bl	8007bf0 <_free_r>
 80089ea:	4625      	mov	r5, r4
 80089ec:	4628      	mov	r0, r5
 80089ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f2:	f000 fa3f 	bl	8008e74 <_malloc_usable_size_r>
 80089f6:	4284      	cmp	r4, r0
 80089f8:	4606      	mov	r6, r0
 80089fa:	d802      	bhi.n	8008a02 <_realloc_r+0x34>
 80089fc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a00:	d8f4      	bhi.n	80089ec <_realloc_r+0x1e>
 8008a02:	4621      	mov	r1, r4
 8008a04:	4638      	mov	r0, r7
 8008a06:	f7ff f965 	bl	8007cd4 <_malloc_r>
 8008a0a:	4680      	mov	r8, r0
 8008a0c:	b908      	cbnz	r0, 8008a12 <_realloc_r+0x44>
 8008a0e:	4645      	mov	r5, r8
 8008a10:	e7ec      	b.n	80089ec <_realloc_r+0x1e>
 8008a12:	42b4      	cmp	r4, r6
 8008a14:	4622      	mov	r2, r4
 8008a16:	4629      	mov	r1, r5
 8008a18:	bf28      	it	cs
 8008a1a:	4632      	movcs	r2, r6
 8008a1c:	f7ff ff9c 	bl	8008958 <memcpy>
 8008a20:	4629      	mov	r1, r5
 8008a22:	4638      	mov	r0, r7
 8008a24:	f7ff f8e4 	bl	8007bf0 <_free_r>
 8008a28:	e7f1      	b.n	8008a0e <_realloc_r+0x40>

08008a2a <__ascii_wctomb>:
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	4608      	mov	r0, r1
 8008a2e:	b141      	cbz	r1, 8008a42 <__ascii_wctomb+0x18>
 8008a30:	2aff      	cmp	r2, #255	@ 0xff
 8008a32:	d904      	bls.n	8008a3e <__ascii_wctomb+0x14>
 8008a34:	228a      	movs	r2, #138	@ 0x8a
 8008a36:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3a:	601a      	str	r2, [r3, #0]
 8008a3c:	4770      	bx	lr
 8008a3e:	2001      	movs	r0, #1
 8008a40:	700a      	strb	r2, [r1, #0]
 8008a42:	4770      	bx	lr

08008a44 <__sfputc_r>:
 8008a44:	6893      	ldr	r3, [r2, #8]
 8008a46:	b410      	push	{r4}
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	6093      	str	r3, [r2, #8]
 8008a4e:	da07      	bge.n	8008a60 <__sfputc_r+0x1c>
 8008a50:	6994      	ldr	r4, [r2, #24]
 8008a52:	42a3      	cmp	r3, r4
 8008a54:	db01      	blt.n	8008a5a <__sfputc_r+0x16>
 8008a56:	290a      	cmp	r1, #10
 8008a58:	d102      	bne.n	8008a60 <__sfputc_r+0x1c>
 8008a5a:	bc10      	pop	{r4}
 8008a5c:	f000 b932 	b.w	8008cc4 <__swbuf_r>
 8008a60:	6813      	ldr	r3, [r2, #0]
 8008a62:	1c58      	adds	r0, r3, #1
 8008a64:	6010      	str	r0, [r2, #0]
 8008a66:	7019      	strb	r1, [r3, #0]
 8008a68:	4608      	mov	r0, r1
 8008a6a:	bc10      	pop	{r4}
 8008a6c:	4770      	bx	lr

08008a6e <__sfputs_r>:
 8008a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a70:	4606      	mov	r6, r0
 8008a72:	460f      	mov	r7, r1
 8008a74:	4614      	mov	r4, r2
 8008a76:	18d5      	adds	r5, r2, r3
 8008a78:	42ac      	cmp	r4, r5
 8008a7a:	d101      	bne.n	8008a80 <__sfputs_r+0x12>
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	e007      	b.n	8008a90 <__sfputs_r+0x22>
 8008a80:	463a      	mov	r2, r7
 8008a82:	4630      	mov	r0, r6
 8008a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a88:	f7ff ffdc 	bl	8008a44 <__sfputc_r>
 8008a8c:	1c43      	adds	r3, r0, #1
 8008a8e:	d1f3      	bne.n	8008a78 <__sfputs_r+0xa>
 8008a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a94 <_vfiprintf_r>:
 8008a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a98:	460d      	mov	r5, r1
 8008a9a:	4614      	mov	r4, r2
 8008a9c:	4698      	mov	r8, r3
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	b09d      	sub	sp, #116	@ 0x74
 8008aa2:	b118      	cbz	r0, 8008aac <_vfiprintf_r+0x18>
 8008aa4:	6a03      	ldr	r3, [r0, #32]
 8008aa6:	b90b      	cbnz	r3, 8008aac <_vfiprintf_r+0x18>
 8008aa8:	f7fe f8fe 	bl	8006ca8 <__sinit>
 8008aac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008aae:	07d9      	lsls	r1, r3, #31
 8008ab0:	d405      	bmi.n	8008abe <_vfiprintf_r+0x2a>
 8008ab2:	89ab      	ldrh	r3, [r5, #12]
 8008ab4:	059a      	lsls	r2, r3, #22
 8008ab6:	d402      	bmi.n	8008abe <_vfiprintf_r+0x2a>
 8008ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008aba:	f7fe fa0e 	bl	8006eda <__retarget_lock_acquire_recursive>
 8008abe:	89ab      	ldrh	r3, [r5, #12]
 8008ac0:	071b      	lsls	r3, r3, #28
 8008ac2:	d501      	bpl.n	8008ac8 <_vfiprintf_r+0x34>
 8008ac4:	692b      	ldr	r3, [r5, #16]
 8008ac6:	b99b      	cbnz	r3, 8008af0 <_vfiprintf_r+0x5c>
 8008ac8:	4629      	mov	r1, r5
 8008aca:	4630      	mov	r0, r6
 8008acc:	f000 f938 	bl	8008d40 <__swsetup_r>
 8008ad0:	b170      	cbz	r0, 8008af0 <_vfiprintf_r+0x5c>
 8008ad2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ad4:	07dc      	lsls	r4, r3, #31
 8008ad6:	d504      	bpl.n	8008ae2 <_vfiprintf_r+0x4e>
 8008ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8008adc:	b01d      	add	sp, #116	@ 0x74
 8008ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae2:	89ab      	ldrh	r3, [r5, #12]
 8008ae4:	0598      	lsls	r0, r3, #22
 8008ae6:	d4f7      	bmi.n	8008ad8 <_vfiprintf_r+0x44>
 8008ae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008aea:	f7fe f9f7 	bl	8006edc <__retarget_lock_release_recursive>
 8008aee:	e7f3      	b.n	8008ad8 <_vfiprintf_r+0x44>
 8008af0:	2300      	movs	r3, #0
 8008af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008af4:	2320      	movs	r3, #32
 8008af6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008afa:	2330      	movs	r3, #48	@ 0x30
 8008afc:	f04f 0901 	mov.w	r9, #1
 8008b00:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b04:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008cb0 <_vfiprintf_r+0x21c>
 8008b08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b0c:	4623      	mov	r3, r4
 8008b0e:	469a      	mov	sl, r3
 8008b10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b14:	b10a      	cbz	r2, 8008b1a <_vfiprintf_r+0x86>
 8008b16:	2a25      	cmp	r2, #37	@ 0x25
 8008b18:	d1f9      	bne.n	8008b0e <_vfiprintf_r+0x7a>
 8008b1a:	ebba 0b04 	subs.w	fp, sl, r4
 8008b1e:	d00b      	beq.n	8008b38 <_vfiprintf_r+0xa4>
 8008b20:	465b      	mov	r3, fp
 8008b22:	4622      	mov	r2, r4
 8008b24:	4629      	mov	r1, r5
 8008b26:	4630      	mov	r0, r6
 8008b28:	f7ff ffa1 	bl	8008a6e <__sfputs_r>
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	f000 80a7 	beq.w	8008c80 <_vfiprintf_r+0x1ec>
 8008b32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b34:	445a      	add	r2, fp
 8008b36:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b38:	f89a 3000 	ldrb.w	r3, [sl]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f000 809f 	beq.w	8008c80 <_vfiprintf_r+0x1ec>
 8008b42:	2300      	movs	r3, #0
 8008b44:	f04f 32ff 	mov.w	r2, #4294967295
 8008b48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b4c:	f10a 0a01 	add.w	sl, sl, #1
 8008b50:	9304      	str	r3, [sp, #16]
 8008b52:	9307      	str	r3, [sp, #28]
 8008b54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b58:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b5a:	4654      	mov	r4, sl
 8008b5c:	2205      	movs	r2, #5
 8008b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b62:	4853      	ldr	r0, [pc, #332]	@ (8008cb0 <_vfiprintf_r+0x21c>)
 8008b64:	f7fe f9bb 	bl	8006ede <memchr>
 8008b68:	9a04      	ldr	r2, [sp, #16]
 8008b6a:	b9d8      	cbnz	r0, 8008ba4 <_vfiprintf_r+0x110>
 8008b6c:	06d1      	lsls	r1, r2, #27
 8008b6e:	bf44      	itt	mi
 8008b70:	2320      	movmi	r3, #32
 8008b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b76:	0713      	lsls	r3, r2, #28
 8008b78:	bf44      	itt	mi
 8008b7a:	232b      	movmi	r3, #43	@ 0x2b
 8008b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b80:	f89a 3000 	ldrb.w	r3, [sl]
 8008b84:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b86:	d015      	beq.n	8008bb4 <_vfiprintf_r+0x120>
 8008b88:	4654      	mov	r4, sl
 8008b8a:	2000      	movs	r0, #0
 8008b8c:	f04f 0c0a 	mov.w	ip, #10
 8008b90:	9a07      	ldr	r2, [sp, #28]
 8008b92:	4621      	mov	r1, r4
 8008b94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b98:	3b30      	subs	r3, #48	@ 0x30
 8008b9a:	2b09      	cmp	r3, #9
 8008b9c:	d94b      	bls.n	8008c36 <_vfiprintf_r+0x1a2>
 8008b9e:	b1b0      	cbz	r0, 8008bce <_vfiprintf_r+0x13a>
 8008ba0:	9207      	str	r2, [sp, #28]
 8008ba2:	e014      	b.n	8008bce <_vfiprintf_r+0x13a>
 8008ba4:	eba0 0308 	sub.w	r3, r0, r8
 8008ba8:	fa09 f303 	lsl.w	r3, r9, r3
 8008bac:	4313      	orrs	r3, r2
 8008bae:	46a2      	mov	sl, r4
 8008bb0:	9304      	str	r3, [sp, #16]
 8008bb2:	e7d2      	b.n	8008b5a <_vfiprintf_r+0xc6>
 8008bb4:	9b03      	ldr	r3, [sp, #12]
 8008bb6:	1d19      	adds	r1, r3, #4
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	9103      	str	r1, [sp, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	bfbb      	ittet	lt
 8008bc0:	425b      	neglt	r3, r3
 8008bc2:	f042 0202 	orrlt.w	r2, r2, #2
 8008bc6:	9307      	strge	r3, [sp, #28]
 8008bc8:	9307      	strlt	r3, [sp, #28]
 8008bca:	bfb8      	it	lt
 8008bcc:	9204      	strlt	r2, [sp, #16]
 8008bce:	7823      	ldrb	r3, [r4, #0]
 8008bd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bd2:	d10a      	bne.n	8008bea <_vfiprintf_r+0x156>
 8008bd4:	7863      	ldrb	r3, [r4, #1]
 8008bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bd8:	d132      	bne.n	8008c40 <_vfiprintf_r+0x1ac>
 8008bda:	9b03      	ldr	r3, [sp, #12]
 8008bdc:	3402      	adds	r4, #2
 8008bde:	1d1a      	adds	r2, r3, #4
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	9203      	str	r2, [sp, #12]
 8008be4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008be8:	9305      	str	r3, [sp, #20]
 8008bea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008cb4 <_vfiprintf_r+0x220>
 8008bee:	2203      	movs	r2, #3
 8008bf0:	4650      	mov	r0, sl
 8008bf2:	7821      	ldrb	r1, [r4, #0]
 8008bf4:	f7fe f973 	bl	8006ede <memchr>
 8008bf8:	b138      	cbz	r0, 8008c0a <_vfiprintf_r+0x176>
 8008bfa:	2240      	movs	r2, #64	@ 0x40
 8008bfc:	9b04      	ldr	r3, [sp, #16]
 8008bfe:	eba0 000a 	sub.w	r0, r0, sl
 8008c02:	4082      	lsls	r2, r0
 8008c04:	4313      	orrs	r3, r2
 8008c06:	3401      	adds	r4, #1
 8008c08:	9304      	str	r3, [sp, #16]
 8008c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c0e:	2206      	movs	r2, #6
 8008c10:	4829      	ldr	r0, [pc, #164]	@ (8008cb8 <_vfiprintf_r+0x224>)
 8008c12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c16:	f7fe f962 	bl	8006ede <memchr>
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	d03f      	beq.n	8008c9e <_vfiprintf_r+0x20a>
 8008c1e:	4b27      	ldr	r3, [pc, #156]	@ (8008cbc <_vfiprintf_r+0x228>)
 8008c20:	bb1b      	cbnz	r3, 8008c6a <_vfiprintf_r+0x1d6>
 8008c22:	9b03      	ldr	r3, [sp, #12]
 8008c24:	3307      	adds	r3, #7
 8008c26:	f023 0307 	bic.w	r3, r3, #7
 8008c2a:	3308      	adds	r3, #8
 8008c2c:	9303      	str	r3, [sp, #12]
 8008c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c30:	443b      	add	r3, r7
 8008c32:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c34:	e76a      	b.n	8008b0c <_vfiprintf_r+0x78>
 8008c36:	460c      	mov	r4, r1
 8008c38:	2001      	movs	r0, #1
 8008c3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c3e:	e7a8      	b.n	8008b92 <_vfiprintf_r+0xfe>
 8008c40:	2300      	movs	r3, #0
 8008c42:	f04f 0c0a 	mov.w	ip, #10
 8008c46:	4619      	mov	r1, r3
 8008c48:	3401      	adds	r4, #1
 8008c4a:	9305      	str	r3, [sp, #20]
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c52:	3a30      	subs	r2, #48	@ 0x30
 8008c54:	2a09      	cmp	r2, #9
 8008c56:	d903      	bls.n	8008c60 <_vfiprintf_r+0x1cc>
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d0c6      	beq.n	8008bea <_vfiprintf_r+0x156>
 8008c5c:	9105      	str	r1, [sp, #20]
 8008c5e:	e7c4      	b.n	8008bea <_vfiprintf_r+0x156>
 8008c60:	4604      	mov	r4, r0
 8008c62:	2301      	movs	r3, #1
 8008c64:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c68:	e7f0      	b.n	8008c4c <_vfiprintf_r+0x1b8>
 8008c6a:	ab03      	add	r3, sp, #12
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	462a      	mov	r2, r5
 8008c70:	4630      	mov	r0, r6
 8008c72:	4b13      	ldr	r3, [pc, #76]	@ (8008cc0 <_vfiprintf_r+0x22c>)
 8008c74:	a904      	add	r1, sp, #16
 8008c76:	f7fd fbcf 	bl	8006418 <_printf_float>
 8008c7a:	4607      	mov	r7, r0
 8008c7c:	1c78      	adds	r0, r7, #1
 8008c7e:	d1d6      	bne.n	8008c2e <_vfiprintf_r+0x19a>
 8008c80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c82:	07d9      	lsls	r1, r3, #31
 8008c84:	d405      	bmi.n	8008c92 <_vfiprintf_r+0x1fe>
 8008c86:	89ab      	ldrh	r3, [r5, #12]
 8008c88:	059a      	lsls	r2, r3, #22
 8008c8a:	d402      	bmi.n	8008c92 <_vfiprintf_r+0x1fe>
 8008c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c8e:	f7fe f925 	bl	8006edc <__retarget_lock_release_recursive>
 8008c92:	89ab      	ldrh	r3, [r5, #12]
 8008c94:	065b      	lsls	r3, r3, #25
 8008c96:	f53f af1f 	bmi.w	8008ad8 <_vfiprintf_r+0x44>
 8008c9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c9c:	e71e      	b.n	8008adc <_vfiprintf_r+0x48>
 8008c9e:	ab03      	add	r3, sp, #12
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	462a      	mov	r2, r5
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	4b06      	ldr	r3, [pc, #24]	@ (8008cc0 <_vfiprintf_r+0x22c>)
 8008ca8:	a904      	add	r1, sp, #16
 8008caa:	f7fd fe53 	bl	8006954 <_printf_i>
 8008cae:	e7e4      	b.n	8008c7a <_vfiprintf_r+0x1e6>
 8008cb0:	08009210 	.word	0x08009210
 8008cb4:	08009216 	.word	0x08009216
 8008cb8:	0800921a 	.word	0x0800921a
 8008cbc:	08006419 	.word	0x08006419
 8008cc0:	08008a6f 	.word	0x08008a6f

08008cc4 <__swbuf_r>:
 8008cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc6:	460e      	mov	r6, r1
 8008cc8:	4614      	mov	r4, r2
 8008cca:	4605      	mov	r5, r0
 8008ccc:	b118      	cbz	r0, 8008cd6 <__swbuf_r+0x12>
 8008cce:	6a03      	ldr	r3, [r0, #32]
 8008cd0:	b90b      	cbnz	r3, 8008cd6 <__swbuf_r+0x12>
 8008cd2:	f7fd ffe9 	bl	8006ca8 <__sinit>
 8008cd6:	69a3      	ldr	r3, [r4, #24]
 8008cd8:	60a3      	str	r3, [r4, #8]
 8008cda:	89a3      	ldrh	r3, [r4, #12]
 8008cdc:	071a      	lsls	r2, r3, #28
 8008cde:	d501      	bpl.n	8008ce4 <__swbuf_r+0x20>
 8008ce0:	6923      	ldr	r3, [r4, #16]
 8008ce2:	b943      	cbnz	r3, 8008cf6 <__swbuf_r+0x32>
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	f000 f82a 	bl	8008d40 <__swsetup_r>
 8008cec:	b118      	cbz	r0, 8008cf6 <__swbuf_r+0x32>
 8008cee:	f04f 37ff 	mov.w	r7, #4294967295
 8008cf2:	4638      	mov	r0, r7
 8008cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	6922      	ldr	r2, [r4, #16]
 8008cfa:	b2f6      	uxtb	r6, r6
 8008cfc:	1a98      	subs	r0, r3, r2
 8008cfe:	6963      	ldr	r3, [r4, #20]
 8008d00:	4637      	mov	r7, r6
 8008d02:	4283      	cmp	r3, r0
 8008d04:	dc05      	bgt.n	8008d12 <__swbuf_r+0x4e>
 8008d06:	4621      	mov	r1, r4
 8008d08:	4628      	mov	r0, r5
 8008d0a:	f7ff fdc1 	bl	8008890 <_fflush_r>
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	d1ed      	bne.n	8008cee <__swbuf_r+0x2a>
 8008d12:	68a3      	ldr	r3, [r4, #8]
 8008d14:	3b01      	subs	r3, #1
 8008d16:	60a3      	str	r3, [r4, #8]
 8008d18:	6823      	ldr	r3, [r4, #0]
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	6022      	str	r2, [r4, #0]
 8008d1e:	701e      	strb	r6, [r3, #0]
 8008d20:	6962      	ldr	r2, [r4, #20]
 8008d22:	1c43      	adds	r3, r0, #1
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d004      	beq.n	8008d32 <__swbuf_r+0x6e>
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	07db      	lsls	r3, r3, #31
 8008d2c:	d5e1      	bpl.n	8008cf2 <__swbuf_r+0x2e>
 8008d2e:	2e0a      	cmp	r6, #10
 8008d30:	d1df      	bne.n	8008cf2 <__swbuf_r+0x2e>
 8008d32:	4621      	mov	r1, r4
 8008d34:	4628      	mov	r0, r5
 8008d36:	f7ff fdab 	bl	8008890 <_fflush_r>
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d0d9      	beq.n	8008cf2 <__swbuf_r+0x2e>
 8008d3e:	e7d6      	b.n	8008cee <__swbuf_r+0x2a>

08008d40 <__swsetup_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	4b29      	ldr	r3, [pc, #164]	@ (8008de8 <__swsetup_r+0xa8>)
 8008d44:	4605      	mov	r5, r0
 8008d46:	6818      	ldr	r0, [r3, #0]
 8008d48:	460c      	mov	r4, r1
 8008d4a:	b118      	cbz	r0, 8008d54 <__swsetup_r+0x14>
 8008d4c:	6a03      	ldr	r3, [r0, #32]
 8008d4e:	b90b      	cbnz	r3, 8008d54 <__swsetup_r+0x14>
 8008d50:	f7fd ffaa 	bl	8006ca8 <__sinit>
 8008d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d58:	0719      	lsls	r1, r3, #28
 8008d5a:	d422      	bmi.n	8008da2 <__swsetup_r+0x62>
 8008d5c:	06da      	lsls	r2, r3, #27
 8008d5e:	d407      	bmi.n	8008d70 <__swsetup_r+0x30>
 8008d60:	2209      	movs	r2, #9
 8008d62:	602a      	str	r2, [r5, #0]
 8008d64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d68:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6c:	81a3      	strh	r3, [r4, #12]
 8008d6e:	e033      	b.n	8008dd8 <__swsetup_r+0x98>
 8008d70:	0758      	lsls	r0, r3, #29
 8008d72:	d512      	bpl.n	8008d9a <__swsetup_r+0x5a>
 8008d74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d76:	b141      	cbz	r1, 8008d8a <__swsetup_r+0x4a>
 8008d78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d7c:	4299      	cmp	r1, r3
 8008d7e:	d002      	beq.n	8008d86 <__swsetup_r+0x46>
 8008d80:	4628      	mov	r0, r5
 8008d82:	f7fe ff35 	bl	8007bf0 <_free_r>
 8008d86:	2300      	movs	r3, #0
 8008d88:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d8a:	89a3      	ldrh	r3, [r4, #12]
 8008d8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008d90:	81a3      	strh	r3, [r4, #12]
 8008d92:	2300      	movs	r3, #0
 8008d94:	6063      	str	r3, [r4, #4]
 8008d96:	6923      	ldr	r3, [r4, #16]
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	89a3      	ldrh	r3, [r4, #12]
 8008d9c:	f043 0308 	orr.w	r3, r3, #8
 8008da0:	81a3      	strh	r3, [r4, #12]
 8008da2:	6923      	ldr	r3, [r4, #16]
 8008da4:	b94b      	cbnz	r3, 8008dba <__swsetup_r+0x7a>
 8008da6:	89a3      	ldrh	r3, [r4, #12]
 8008da8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008db0:	d003      	beq.n	8008dba <__swsetup_r+0x7a>
 8008db2:	4621      	mov	r1, r4
 8008db4:	4628      	mov	r0, r5
 8008db6:	f000 f88a 	bl	8008ece <__smakebuf_r>
 8008dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dbe:	f013 0201 	ands.w	r2, r3, #1
 8008dc2:	d00a      	beq.n	8008dda <__swsetup_r+0x9a>
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	60a2      	str	r2, [r4, #8]
 8008dc8:	6962      	ldr	r2, [r4, #20]
 8008dca:	4252      	negs	r2, r2
 8008dcc:	61a2      	str	r2, [r4, #24]
 8008dce:	6922      	ldr	r2, [r4, #16]
 8008dd0:	b942      	cbnz	r2, 8008de4 <__swsetup_r+0xa4>
 8008dd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008dd6:	d1c5      	bne.n	8008d64 <__swsetup_r+0x24>
 8008dd8:	bd38      	pop	{r3, r4, r5, pc}
 8008dda:	0799      	lsls	r1, r3, #30
 8008ddc:	bf58      	it	pl
 8008dde:	6962      	ldrpl	r2, [r4, #20]
 8008de0:	60a2      	str	r2, [r4, #8]
 8008de2:	e7f4      	b.n	8008dce <__swsetup_r+0x8e>
 8008de4:	2000      	movs	r0, #0
 8008de6:	e7f7      	b.n	8008dd8 <__swsetup_r+0x98>
 8008de8:	20000018 	.word	0x20000018

08008dec <_raise_r>:
 8008dec:	291f      	cmp	r1, #31
 8008dee:	b538      	push	{r3, r4, r5, lr}
 8008df0:	4605      	mov	r5, r0
 8008df2:	460c      	mov	r4, r1
 8008df4:	d904      	bls.n	8008e00 <_raise_r+0x14>
 8008df6:	2316      	movs	r3, #22
 8008df8:	6003      	str	r3, [r0, #0]
 8008dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008e02:	b112      	cbz	r2, 8008e0a <_raise_r+0x1e>
 8008e04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e08:	b94b      	cbnz	r3, 8008e1e <_raise_r+0x32>
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f000 f830 	bl	8008e70 <_getpid_r>
 8008e10:	4622      	mov	r2, r4
 8008e12:	4601      	mov	r1, r0
 8008e14:	4628      	mov	r0, r5
 8008e16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e1a:	f000 b817 	b.w	8008e4c <_kill_r>
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d00a      	beq.n	8008e38 <_raise_r+0x4c>
 8008e22:	1c59      	adds	r1, r3, #1
 8008e24:	d103      	bne.n	8008e2e <_raise_r+0x42>
 8008e26:	2316      	movs	r3, #22
 8008e28:	6003      	str	r3, [r0, #0]
 8008e2a:	2001      	movs	r0, #1
 8008e2c:	e7e7      	b.n	8008dfe <_raise_r+0x12>
 8008e2e:	2100      	movs	r1, #0
 8008e30:	4620      	mov	r0, r4
 8008e32:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008e36:	4798      	blx	r3
 8008e38:	2000      	movs	r0, #0
 8008e3a:	e7e0      	b.n	8008dfe <_raise_r+0x12>

08008e3c <raise>:
 8008e3c:	4b02      	ldr	r3, [pc, #8]	@ (8008e48 <raise+0xc>)
 8008e3e:	4601      	mov	r1, r0
 8008e40:	6818      	ldr	r0, [r3, #0]
 8008e42:	f7ff bfd3 	b.w	8008dec <_raise_r>
 8008e46:	bf00      	nop
 8008e48:	20000018 	.word	0x20000018

08008e4c <_kill_r>:
 8008e4c:	b538      	push	{r3, r4, r5, lr}
 8008e4e:	2300      	movs	r3, #0
 8008e50:	4d06      	ldr	r5, [pc, #24]	@ (8008e6c <_kill_r+0x20>)
 8008e52:	4604      	mov	r4, r0
 8008e54:	4608      	mov	r0, r1
 8008e56:	4611      	mov	r1, r2
 8008e58:	602b      	str	r3, [r5, #0]
 8008e5a:	f7f8 fd3a 	bl	80018d2 <_kill>
 8008e5e:	1c43      	adds	r3, r0, #1
 8008e60:	d102      	bne.n	8008e68 <_kill_r+0x1c>
 8008e62:	682b      	ldr	r3, [r5, #0]
 8008e64:	b103      	cbz	r3, 8008e68 <_kill_r+0x1c>
 8008e66:	6023      	str	r3, [r4, #0]
 8008e68:	bd38      	pop	{r3, r4, r5, pc}
 8008e6a:	bf00      	nop
 8008e6c:	2000058c 	.word	0x2000058c

08008e70 <_getpid_r>:
 8008e70:	f7f8 bd28 	b.w	80018c4 <_getpid>

08008e74 <_malloc_usable_size_r>:
 8008e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e78:	1f18      	subs	r0, r3, #4
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	bfbc      	itt	lt
 8008e7e:	580b      	ldrlt	r3, [r1, r0]
 8008e80:	18c0      	addlt	r0, r0, r3
 8008e82:	4770      	bx	lr

08008e84 <__swhatbuf_r>:
 8008e84:	b570      	push	{r4, r5, r6, lr}
 8008e86:	460c      	mov	r4, r1
 8008e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e8c:	4615      	mov	r5, r2
 8008e8e:	2900      	cmp	r1, #0
 8008e90:	461e      	mov	r6, r3
 8008e92:	b096      	sub	sp, #88	@ 0x58
 8008e94:	da0c      	bge.n	8008eb0 <__swhatbuf_r+0x2c>
 8008e96:	89a3      	ldrh	r3, [r4, #12]
 8008e98:	2100      	movs	r1, #0
 8008e9a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e9e:	bf14      	ite	ne
 8008ea0:	2340      	movne	r3, #64	@ 0x40
 8008ea2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	6031      	str	r1, [r6, #0]
 8008eaa:	602b      	str	r3, [r5, #0]
 8008eac:	b016      	add	sp, #88	@ 0x58
 8008eae:	bd70      	pop	{r4, r5, r6, pc}
 8008eb0:	466a      	mov	r2, sp
 8008eb2:	f000 f849 	bl	8008f48 <_fstat_r>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	dbed      	blt.n	8008e96 <__swhatbuf_r+0x12>
 8008eba:	9901      	ldr	r1, [sp, #4]
 8008ebc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ec0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ec4:	4259      	negs	r1, r3
 8008ec6:	4159      	adcs	r1, r3
 8008ec8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ecc:	e7eb      	b.n	8008ea6 <__swhatbuf_r+0x22>

08008ece <__smakebuf_r>:
 8008ece:	898b      	ldrh	r3, [r1, #12]
 8008ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ed2:	079d      	lsls	r5, r3, #30
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	460c      	mov	r4, r1
 8008ed8:	d507      	bpl.n	8008eea <__smakebuf_r+0x1c>
 8008eda:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008ede:	6023      	str	r3, [r4, #0]
 8008ee0:	6123      	str	r3, [r4, #16]
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	6163      	str	r3, [r4, #20]
 8008ee6:	b003      	add	sp, #12
 8008ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eea:	466a      	mov	r2, sp
 8008eec:	ab01      	add	r3, sp, #4
 8008eee:	f7ff ffc9 	bl	8008e84 <__swhatbuf_r>
 8008ef2:	9f00      	ldr	r7, [sp, #0]
 8008ef4:	4605      	mov	r5, r0
 8008ef6:	4639      	mov	r1, r7
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f7fe feeb 	bl	8007cd4 <_malloc_r>
 8008efe:	b948      	cbnz	r0, 8008f14 <__smakebuf_r+0x46>
 8008f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f04:	059a      	lsls	r2, r3, #22
 8008f06:	d4ee      	bmi.n	8008ee6 <__smakebuf_r+0x18>
 8008f08:	f023 0303 	bic.w	r3, r3, #3
 8008f0c:	f043 0302 	orr.w	r3, r3, #2
 8008f10:	81a3      	strh	r3, [r4, #12]
 8008f12:	e7e2      	b.n	8008eda <__smakebuf_r+0xc>
 8008f14:	89a3      	ldrh	r3, [r4, #12]
 8008f16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f1e:	81a3      	strh	r3, [r4, #12]
 8008f20:	9b01      	ldr	r3, [sp, #4]
 8008f22:	6020      	str	r0, [r4, #0]
 8008f24:	b15b      	cbz	r3, 8008f3e <__smakebuf_r+0x70>
 8008f26:	4630      	mov	r0, r6
 8008f28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f2c:	f000 f81e 	bl	8008f6c <_isatty_r>
 8008f30:	b128      	cbz	r0, 8008f3e <__smakebuf_r+0x70>
 8008f32:	89a3      	ldrh	r3, [r4, #12]
 8008f34:	f023 0303 	bic.w	r3, r3, #3
 8008f38:	f043 0301 	orr.w	r3, r3, #1
 8008f3c:	81a3      	strh	r3, [r4, #12]
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	431d      	orrs	r5, r3
 8008f42:	81a5      	strh	r5, [r4, #12]
 8008f44:	e7cf      	b.n	8008ee6 <__smakebuf_r+0x18>
	...

08008f48 <_fstat_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	4d06      	ldr	r5, [pc, #24]	@ (8008f68 <_fstat_r+0x20>)
 8008f4e:	4604      	mov	r4, r0
 8008f50:	4608      	mov	r0, r1
 8008f52:	4611      	mov	r1, r2
 8008f54:	602b      	str	r3, [r5, #0]
 8008f56:	f7f8 fd1b 	bl	8001990 <_fstat>
 8008f5a:	1c43      	adds	r3, r0, #1
 8008f5c:	d102      	bne.n	8008f64 <_fstat_r+0x1c>
 8008f5e:	682b      	ldr	r3, [r5, #0]
 8008f60:	b103      	cbz	r3, 8008f64 <_fstat_r+0x1c>
 8008f62:	6023      	str	r3, [r4, #0]
 8008f64:	bd38      	pop	{r3, r4, r5, pc}
 8008f66:	bf00      	nop
 8008f68:	2000058c 	.word	0x2000058c

08008f6c <_isatty_r>:
 8008f6c:	b538      	push	{r3, r4, r5, lr}
 8008f6e:	2300      	movs	r3, #0
 8008f70:	4d05      	ldr	r5, [pc, #20]	@ (8008f88 <_isatty_r+0x1c>)
 8008f72:	4604      	mov	r4, r0
 8008f74:	4608      	mov	r0, r1
 8008f76:	602b      	str	r3, [r5, #0]
 8008f78:	f7f8 fd19 	bl	80019ae <_isatty>
 8008f7c:	1c43      	adds	r3, r0, #1
 8008f7e:	d102      	bne.n	8008f86 <_isatty_r+0x1a>
 8008f80:	682b      	ldr	r3, [r5, #0]
 8008f82:	b103      	cbz	r3, 8008f86 <_isatty_r+0x1a>
 8008f84:	6023      	str	r3, [r4, #0]
 8008f86:	bd38      	pop	{r3, r4, r5, pc}
 8008f88:	2000058c 	.word	0x2000058c

08008f8c <_init>:
 8008f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8e:	bf00      	nop
 8008f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f92:	bc08      	pop	{r3}
 8008f94:	469e      	mov	lr, r3
 8008f96:	4770      	bx	lr

08008f98 <_fini>:
 8008f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9a:	bf00      	nop
 8008f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f9e:	bc08      	pop	{r3}
 8008fa0:	469e      	mov	lr, r3
 8008fa2:	4770      	bx	lr
